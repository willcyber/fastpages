{
  
    
        "post0": {
            "title": "Focus and Habits",
            "content": "Video Notes . Students often feel burned out and sacrifice their mental health for grades | Do something you love | Change your behavior | Socialize with others | Exercise, sleep, be mindful, set goals | . Gratitude list . my supportive friends that always are there for me and bring me a smile | my parents who are supportive and help me when times get rough | my sister who always finds a way to make me laugh | my grandparents who give good advice and wants the best for me | . Goals . maintain a good balance between academics and life | find activities or hobbies to relieve stress | SLEEP MORE | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/09/Focus-and-Habits.html",
            "relUrl": "/jupyter/2022/09/09/Focus-and-Habits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "If else statements",
            "content": "if statements . If the condition is true, run the code inside . int test = 1; if (test == 1) { System.out.println(&quot;test pass&quot;); } . test pass . if-else statements . If the condition is true, run the code inside If none of the if statements are true, run the else statement. . int test = 0; if (test == 1) { System.out.println(&quot;test pass&quot;); } else { System.out.println(&quot;test failed&quot;); } . test failed . Rock paper Scissors using if-elseif-else . See comments for futher details :D . public class RPS { public static final String ROCK = &quot;ROCK&quot;; public static final String PAPER = &quot;PAPER&quot;; public static final String SCISSORS = &quot;SCISSORS&quot;; public static void main(String args[]) { System.out.println(&quot;Enter any one of the following inputs: &quot;); System.out.println(&quot;ROCK&quot;); System.out.println(&quot;PAPER&quot;); System.out.println(&quot;SCISSORS&quot;); System.out.println(); String playerMove = getPlayerMove(); String computerMove = getComputerMove(); //Tie if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); // Player = Rock, Computer = Paper else if (playerMove.equals(Game.ROCK) &amp;&amp; computerMove.equals(Game.PAPER)) System.out.println(&quot;Computer Wins&quot;); // Player = Rock, Computer = Scissors else if (playerMove.equals(Game.ROCK) &amp;&amp; computerMove.equals(Game.SCISSORS)) System.out.println(&quot;Player Wins&quot;); // Player = Paper, Computer = Scissors else if (playerMove.equals(Game.PAPER) &amp;&amp; computerMove.equals(Game.SCISSORS)) System.out.println(&quot;Computer Wins&quot;); // Player = Paper, Computer = Rock else if (playerMove.equals(Game.PAPER) &amp;&amp; computerMove.equals(Game.ROCK)) System.out.println(&quot;Player Wins&quot;); // Player = Scissors, Computer = Paper else if (playerMove.equals(Game.SCISSORS) &amp;&amp; computerMove.equals(Game.PAPER)) System.out.println(&quot;Player Wins&quot;); // Player = Scissors, Computer = Rock else if (playerMove.equals(Game.SCISSORS) &amp;&amp; computerMove.equals(Game.ROCK)) System.out.println(&quot;Computer Wins&quot;); // Player = Paper, Computer = Scissors else if (playerMove.equals(Game.PAPER)) System.out.println(computerMove.equals(Game.SCISSORS) ? &quot;Computer Wins&quot;: &quot;Player wins&quot;); // if input isn&#39;t rock, paper, or scissors else System.out.println(&quot;There was an error, please try again&quot;); } //Computer mobve is randomly generated through random function public static String getComputerMove() { String computermove; Random random = new Random(); int input = random.nextInt(3)+1; if (input == 1) computermove = Game.ROCK; else if(input == 2) computermove = Game.PAPER; else computermove = Game.SCISSORS; System.out.println(&quot;Computer move is: &quot; + computermove); System.out.println(); return computermove; } //Scanner class to detect what move user plays public static String getPlayerMove() { Scanner in = new Scanner(System.in); String input = in.next(); String playermove = input.toUpperCase(); System.out.println(&quot;Player move is: &quot;+ playermove); return playermove; } } RPS.main(null); . Enter any one of the following inputs: ROCK PAPER SCISSORS Player move is: ROCK Computer move is: SCISSORS Player Wins . Switch Case . public class RPS { public static final String ROCK = &quot;ROCK&quot;; public static final String PAPER = &quot;PAPER&quot;; public static final String SCISSORS = &quot;SCISSORS&quot;; //Scanner class to detect what move user plays public static String getPlayerMove() { Scanner in = new Scanner(System.in); String input = in.next(); String playermove = input.toUpperCase(); System.out.println(&quot;Player move is: &quot;+ playermove); return playermove; } public static void main(String args[]) { System.out.println(&quot;Enter any one of the following inputs: &quot;); System.out.println(&quot;ROCK&quot;); System.out.println(&quot;PAPER&quot;); System.out.println(&quot;SCISSORS&quot;); System.out.println(); String playerMove = getPlayerMove(); String computerMove = getComputerMove(); switch (playerMove) { case ROCK: // if user input ROCK if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(Game.ROCK) &amp;&amp; computerMove.equals(Game.PAPER)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(Game.ROCK) &amp;&amp; computerMove.equals(Game.SCISSORS)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; case PAPER: // if user input is Paper if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(Game.PAPER) &amp;&amp; computerMove.equals(Game.SCISSORS)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(Game.PAPER) &amp;&amp; computerMove.equals(Game.ROCK)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; case SCISSORS: // if user input is scissors if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(Game.SCISSORS) &amp;&amp; computerMove.equals(Game.ROCK)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(Game.SCISSORS) &amp;&amp; computerMove.equals(Game.PAPER)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; } } //Computer mobve is randomly generated through random function public static String getComputerMove() { String computermove; Random random = new Random(); int input = random.nextInt(3)+1; if (input == 1) computermove = Game.ROCK; else if(input == 2) computermove = Game.PAPER; else computermove = Game.SCISSORS; System.out.println(&quot;Computer move is: &quot; + computermove); System.out.println(); return computermove; } } RPS.main(null); . Enter any one of the following inputs: ROCK PAPER SCISSORS Player move is: ROCK Computer move is: SCISSORS Player Wins . De Morgan&#39;s Law . In essence, Not (A and B) is the same as Not A or Not B Remember that &quot;!&quot; denotes Not. . This . boolean test1 = true; boolean test2 = true; if (!(test1 &amp;&amp; test2)){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true&quot;); } . They are both true . is the same as this . boolean test1 = true; boolean test2 = true; if (!test1 || !test2){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true once again&quot;); } . They are both true once again .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/06/if-else-statements.html",
            "relUrl": "/jupyter/2022/09/06/if-else-statements.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Code.org takeaways",
            "content": "Let&#39;s refer to Lesson 7 Part 2 on Code.org . MyNeighborhood.java . import org.code.neighborhood.Painter; public class MyNeighborhood { public static void main(String[] args) { PainterPlus myPainterPlus = new PainterPlus(); // Lesson 6 Level 3 // TO DO #1: Instantiate a PainterPlus object. // Lesson 7 Level 2 // TO DO #1: Navigate the PainterPlus object // to the traffic cone. myPainterPlus.move(); myPainterPlus.move(); myPainterPlus.move(); myPainterPlus.turnRight(); myPainterPlus.move(); myPainterPlus.move(); } } . PainterPlus.java . import org.code.neighborhood.*; public class PainterPlus extends Painter { public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } . Defining a class . Syntax: public class classname . // Example from code.org public class MyNeighborhood . Creating an object . Syntax: Class object = new Class(); . // Example from code.org PainterPlus myPainterPlus = new PainterPlus(); // where PainterPlus is the class and myPainterPlus is the object . Object calling a method . This is what runs the code Syntax: object.method(); . // Example from code.org myPainterPlus.turnRight(); . Extends . superclass - class being extended subclass - class that is extending The result is that the super and subclass will have the same attributes . // syntax public class PainterPlus extends Painter { public PainterPlus() { super(); } } // example from code.org public class PainterPlus extends Painter { public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/05/code.org-takeaways.html",
            "relUrl": "/jupyter/2022/09/05/code.org-takeaways.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;2 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;3 - William&#39;s Modulus Calculator&quot;); System.out.println(&quot;4 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye! Thanks for checking this out :D&quot;); quit = true; break; case 1: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 2: double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); break; case 3: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Vidhi and Riya&#39;s Temp Convertor 2 - Lily&#39;s Average Calculator 3 - Modulus Calculator 4 - F=ma calculator 0 - Quit - 1: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello william Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 25.0 degree Celsius is equal to 298.0 in Kelvin 2: Enter numbers, type &#39;end&#39; to finish Number: 2 Number: 5 Number: 3 Number: end Show detailed info? y/n y Sum: 10.0 Count: 3 Mean: 3.3333333333333335 3: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 4: F=ma calculator Enter the mass: 3.0 Enter the accel: 6.0 Force calculator 3.0*6.0=18.0 0: Goodbye! Thanks for checking this out :D .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/02/menu.html",
            "relUrl": "/jupyter/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Alumni Panel",
            "content": "Notes . How did you realize you wanted to do major? How did Ap CSA and CSP help? . Compare against your competitors . | What you liked to do when you were young. Early interests . | Internships . | Interested in websites, csp gave technical background . | Able to be used in the real world . | . | What is tge biggest challenge you’ve encountered with computer science? . The bugs and errors in the beginning . | Egos, people brag about their accomplishments. Follow your own path. Work on your own stuff . | Theory. How structures are set up. Transition between high school and college . | Finding the motivation. Use google. Projects can helps to create a goal . | Temptation to cut corners. Do stuff just for points. GO abobve and beyond . | Getting started in a new area of cs. . | . | Are there any PBL scenarios in college computer science classes . Still exists in UCSD . | There are PBLS and Tests . | . | Have you applied CS in your major if you are not majoring in CS . Coding is everywhere . | Automate things . | MATLAB uses for loops, if statemntrs, etc . | Helpful for math classes . | . | For existing cplleghe studentrs have you had a job within your profession . Yes, you need to make a resume. Jobs are a good addition to your resume . | Tridant AI . | Northrop Grumman . Wiring Diagrams . | Visuakizing flight data . | Cybersecurity intern . | Creating website for flight data . | Scripting for staffing contract . | . | TEacher Assistant . | Code Ninjas . | . | Personal projects . Good if you have no work experience . | . | Internships, September and November open . | . Insights . This panel really helped me to see how practical CS is in a variety of majors. Computer Science really can be applied to anything. I really resonated with Allison choosing talking about Cognitive Science. I never knew that you could major psychology with computer science. I will definitely check out the other submajors for computer science and choose one that I enjoy doing. I am leaning towards cybersecurity + comp sci rn. In addition, it was comforting knowing that others also faced many challenges in computer science. I liked how Anthony brought up his challenge of looking through other people’s Linkedins and feeling like he wasn’t good enough. His advice on just focusing on what you are doing is really good and beneficial to me. It was also interesting learning what the interns at Northrop Grumman do. .",
            "url": "https://willcyber.github.io/fastpages/2022/08/29/alumni-panel.html",
            "relUrl": "/2022/08/29/alumni-panel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Primatives",
            "content": "// java style to import library import java.util.Scanner; double mass; double accel; double Force; double ac; double m; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); } } ScanPrimitives.main(null); . F=ma calculator Enter the mass: 2.3 Enter the accel: 2.5 Force calculator 2.3*2.5=5.75 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/26/Primatives.html",
            "relUrl": "/jupyter/2022/08/26/Primatives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Bash Tool Checkup",
            "content": "Testing Python Installation . python --version python2 --version python3 --version conda --version . Python 3.9.12 Python 2.7.18 Python 3.9.12 conda 4.14.0 . Testing Java Installation . java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) . Testing Jupyter Kernel installations . jupyter kernelspec list . Available kernels: bash /home/wu/.local/share/jupyter/kernels/bash java /home/wu/.local/share/jupyter/kernels/java javascript /home/wu/.local/share/jupyter/kernels/javascript python3 /home/wu/anaconda3/share/jupyter/kernels/python3 . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/25/bash.html",
            "relUrl": "/jupyter/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java Jupyter Tests",
            "content": "System.out.println(&quot;Hello&quot;); System.out.println(&quot;Test&quot;); System.out.println(&quot;Test Again&quot;); . Hello Test Test Again . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); Output Primitive Data The second key to to all programming is Output. All programming has means to format and combine data. In these examples you see descriptions of the mathematical operation combine with the result of the operation. public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); Output Primitive Data The second key to to all programming is Output. All programming has means to format and combine data. In these examples you see descriptions of the mathematical operation combine with the result of the operation. public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 30; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Test 0 - Quit - 2: DefaultRedGreenYellowBluePurpleCyanWhite 3: Loading...############################## 4: F=ma calculator Enter the mass: 2.0 Enter the accel: 3.0 Force calculator 2.0*3.0=6.0 0: Goodbye, World! .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/21/java.html",
            "relUrl": "/jupyter/2022/08/21/java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python Jupyter Tests",
            "content": "print(&#39;Hello&#39;) . Hello . age = 24 if age &lt; 21: print(&quot;ur too young for beer kid&quot;) else: print(&quot;you&#39;re old enough&quot;) name = &quot;Sam&quot; if name == &quot;William&quot;: print(&quot;Hi William&quot;) elif name == &quot;Bob&quot;: Print(&quot;Hey Bob&quot;) elif name == &quot;Sam&quot;: print(&quot;Hello Sam&quot;) else: print(&quot;You aren&#39;t allowed here&quot;) . you&#39;re old enough Hello Sam . vehicles = [&quot;car&quot;, &quot;bus&quot;, &quot;truck&quot;, &quot;bike&quot;, &quot;train&quot;] for v in vehicles: print(v) print(len(v)) . car 3 bus 3 truck 5 bike 4 train 5 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/20/python.html",
            "relUrl": "/jupyter/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "First Post",
            "content": "Welcome to my first post! . What is this? . This is a website that makes use of a tool called fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Everything is hosted using github pages. . Stuff . Name Github Name Issues Commits Profile . William | willcyber | Issues | Commits | Profile | .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/08/20/first-post.html",
            "relUrl": "/markdown/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://willcyber.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "PBL Notes",
          "content": "Week 0 . “Object Oriented Programming” focuses software design around data, or objects. “object” contains both methods and data “instance of a class” is the process of making an object, unique or instances of variables are created within the object “constructor” special method in class, code that is used to initialize the data within the object “getter” is a method that is used to extract or reference data from within the object. . Week 1 . _notebooks is used for jupyter ntoebooks _posts for mardkdown files _pages creates subpages (stuff on navbar) images stored in the images folder . Week 2 .",
          "url": "https://willcyber.github.io/fastpages/pbl/",
          "relUrl": "/pbl/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "College Board",
          "content": "Unit One: Primitive Types . Goal: To learn the fundamentals of Java and other foundational concepts for coding. AP Exam Weighting 2.5-5% . Unit Two: Using Objects . Goal: Explore reference data in order to represent real-world objects in a digital world and discover methods to initiate more complex operations AP Exam Weighting 5-7.5% . Unit Three: Boolean Expressions and if Statements . Goal: Dive into the building blocks of algorithms and use conditional statements to solve problems and have control over your results AP Exam Weighting 15-17.5% . Unit Four: Iteration . Goal: Learn about iteration which is used for repetition in algorithms AP Exam Weighting 17.5-22.5% . Unit Five: Writing Clauses . Goal: Explore real-world interactions that can be expressed through code by organizing behaviors and attribites into classes – also learn about the legal and ethical implications of programming AP Exam Weighting 5-7.5% . Unit Six: Array . Goal: Learn techniques and standard algorithms to work with collections of data structures AP Exam Weighting 10-15% . Unit Seven: ArrayList . Goal: Delve into data setts, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns for your personal data storage AP Exam Weighting 2.5-7.5% . Unit Eight: 2D Array . Goal: Experiment with data sets represented in a table AP Exam Weighting 7.5-10% . Unit Nine: Inheritance . Goal: Manipulate programming without altering original code by using subclasses to create a hierarchy AP Exam Weighting 5-10% . Unit Ten: Recurision . Goal: Solve larger problems by solving small versions of the same problems using recursive methods AP Exam Weighting 5-7.5% .",
          "url": "https://willcyber.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Bio Vocab",
          "content": "Vocab . Evolution: The gradual process by which something changes into a different form. Natural Selection: the process by which certain traits make it more possible for an organism to survive. Species: a group of a type of organisms or animal .",
          "url": "https://willcyber.github.io/fastpages/otherclass/",
          "relUrl": "/otherclass/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://willcyber.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}