{
  
    
        "post0": {
            "title": "Hashmap",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Collectable and defines abstract methods */ public class Animal extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* Getters * */ public String getName() { return this.name; } public int getAge() { return this.age; } public String getColor() { return this.color; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // convert to Coolection and sort in name order Animal.setOrder(KeyType.name); List&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(animals); Animal.setOrder(KeyType.title); for (Animal animal : animals) System.out.println(animal); } } Animal.main(null); . class [LREPL.$JShell$13C$Animal; 6 Collectable: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 Animal: Cat, Black, 10 Animal: Dog, Brown, 14 Animal: Kitty, Calico, 1 Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 . import java.util.HashMap; public class Pets { // create a new HashMap HashMap&lt;Integer, String&gt; names = new HashMap&lt;Integer, String&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap for (int i=0; i&lt;5000; i++) { String s = String.valueOf(i); names.put(i, s); } } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); // testing to see if it actually added for (Integer key : pets.names.keySet()) { System.out.println(key + &quot;: &quot; + pets.names.get(key)); } } } Pets.main(null); . 0: 0 1: 1 2: 2 3: 3 4: 4 5: 5 6: 6 7: 7 8: 8 9: 9 10: 10 11: 11 12: 12 13: 13 14: 14 15: 15 16: 16 17: 17 18: 18 19: 19 20: 20 21: 21 22: 22 23: 23 24: 24 25: 25 26: 26 27: 27 28: 28 29: 29 30: 30 31: 31 32: 32 33: 33 34: 34 35: 35 36: 36 37: 37 38: 38 39: 39 40: 40 41: 41 42: 42 43: 43 44: 44 45: 45 46: 46 47: 47 48: 48 49: 49 50: 50 51: 51 52: 52 53: 53 54: 54 55: 55 56: 56 57: 57 58: 58 59: 59 60: 60 61: 61 62: 62 63: 63 64: 64 65: 65 66: 66 67: 67 68: 68 69: 69 70: 70 71: 71 72: 72 73: 73 74: 74 75: 75 76: 76 77: 77 78: 78 79: 79 80: 80 81: 81 82: 82 83: 83 84: 84 85: 85 86: 86 87: 87 88: 88 89: 89 90: 90 91: 91 92: 92 93: 93 94: 94 95: 95 96: 96 97: 97 98: 98 99: 99 100: 100 101: 101 102: 102 103: 103 104: 104 105: 105 106: 106 107: 107 108: 108 109: 109 110: 110 111: 111 112: 112 113: 113 114: 114 115: 115 116: 116 117: 117 118: 118 119: 119 120: 120 121: 121 122: 122 123: 123 124: 124 125: 125 126: 126 127: 127 128: 128 129: 129 130: 130 131: 131 132: 132 133: 133 134: 134 135: 135 136: 136 137: 137 138: 138 139: 139 140: 140 141: 141 142: 142 143: 143 144: 144 145: 145 146: 146 147: 147 148: 148 149: 149 150: 150 151: 151 152: 152 153: 153 154: 154 155: 155 156: 156 157: 157 158: 158 159: 159 160: 160 161: 161 162: 162 163: 163 164: 164 165: 165 166: 166 167: 167 168: 168 169: 169 170: 170 171: 171 172: 172 173: 173 174: 174 175: 175 176: 176 177: 177 178: 178 179: 179 180: 180 181: 181 182: 182 183: 183 184: 184 185: 185 186: 186 187: 187 188: 188 189: 189 190: 190 191: 191 192: 192 193: 193 194: 194 195: 195 196: 196 197: 197 198: 198 199: 199 200: 200 201: 201 202: 202 203: 203 204: 204 205: 205 206: 206 207: 207 208: 208 209: 209 210: 210 211: 211 212: 212 213: 213 214: 214 215: 215 216: 216 217: 217 218: 218 219: 219 220: 220 221: 221 222: 222 223: 223 224: 224 225: 225 226: 226 227: 227 228: 228 229: 229 230: 230 231: 231 232: 232 233: 233 234: 234 235: 235 236: 236 237: 237 238: 238 239: 239 240: 240 241: 241 242: 242 243: 243 244: 244 245: 245 246: 246 247: 247 248: 248 249: 249 250: 250 251: 251 252: 252 253: 253 254: 254 255: 255 256: 256 257: 257 258: 258 259: 259 260: 260 261: 261 262: 262 263: 263 264: 264 265: 265 266: 266 267: 267 268: 268 269: 269 270: 270 271: 271 272: 272 273: 273 274: 274 275: 275 276: 276 277: 277 278: 278 279: 279 280: 280 281: 281 282: 282 283: 283 284: 284 285: 285 286: 286 287: 287 288: 288 289: 289 290: 290 291: 291 292: 292 293: 293 294: 294 295: 295 296: 296 297: 297 298: 298 299: 299 300: 300 301: 301 302: 302 303: 303 304: 304 305: 305 306: 306 307: 307 308: 308 309: 309 310: 310 311: 311 312: 312 313: 313 314: 314 315: 315 316: 316 317: 317 318: 318 319: 319 320: 320 321: 321 322: 322 323: 323 324: 324 325: 325 326: 326 327: 327 328: 328 329: 329 330: 330 331: 331 332: 332 333: 333 334: 334 335: 335 336: 336 337: 337 338: 338 339: 339 340: 340 341: 341 342: 342 343: 343 344: 344 345: 345 346: 346 347: 347 348: 348 349: 349 350: 350 351: 351 352: 352 353: 353 354: 354 355: 355 356: 356 357: 357 358: 358 359: 359 360: 360 361: 361 362: 362 363: 363 364: 364 365: 365 366: 366 367: 367 368: 368 369: 369 370: 370 371: 371 372: 372 373: 373 374: 374 375: 375 376: 376 377: 377 378: 378 379: 379 380: 380 381: 381 382: 382 383: 383 384: 384 385: 385 386: 386 387: 387 388: 388 389: 389 390: 390 391: 391 392: 392 393: 393 394: 394 395: 395 396: 396 397: 397 398: 398 399: 399 400: 400 401: 401 402: 402 403: 403 404: 404 405: 405 406: 406 407: 407 408: 408 409: 409 410: 410 411: 411 412: 412 413: 413 414: 414 415: 415 416: 416 417: 417 418: 418 419: 419 420: 420 421: 421 422: 422 423: 423 424: 424 425: 425 426: 426 427: 427 428: 428 429: 429 430: 430 431: 431 432: 432 433: 433 434: 434 435: 435 436: 436 437: 437 438: 438 439: 439 440: 440 441: 441 442: 442 443: 443 444: 444 445: 445 446: 446 447: 447 448: 448 449: 449 450: 450 451: 451 452: 452 453: 453 454: 454 455: 455 456: 456 457: 457 458: 458 459: 459 460: 460 461: 461 462: 462 463: 463 464: 464 465: 465 466: 466 467: 467 468: 468 469: 469 470: 470 471: 471 472: 472 473: 473 474: 474 475: 475 476: 476 477: 477 478: 478 479: 479 480: 480 481: 481 482: 482 483: 483 484: 484 485: 485 486: 486 487: 487 488: 488 489: 489 490: 490 491: 491 492: 492 493: 493 494: 494 495: 495 496: 496 497: 497 498: 498 499: 499 500: 500 501: 501 502: 502 503: 503 504: 504 505: 505 506: 506 507: 507 508: 508 509: 509 510: 510 511: 511 512: 512 513: 513 514: 514 515: 515 516: 516 517: 517 518: 518 519: 519 520: 520 521: 521 522: 522 523: 523 524: 524 525: 525 526: 526 527: 527 528: 528 529: 529 530: 530 531: 531 532: 532 533: 533 534: 534 535: 535 536: 536 537: 537 538: 538 539: 539 540: 540 541: 541 542: 542 543: 543 544: 544 545: 545 546: 546 547: 547 548: 548 549: 549 550: 550 551: 551 552: 552 553: 553 554: 554 555: 555 556: 556 557: 557 558: 558 559: 559 560: 560 561: 561 562: 562 563: 563 564: 564 565: 565 566: 566 567: 567 568: 568 569: 569 570: 570 571: 571 572: 572 573: 573 574: 574 575: 575 576: 576 577: 577 578: 578 579: 579 580: 580 581: 581 582: 582 583: 583 584: 584 585: 585 586: 586 587: 587 588: 588 589: 589 590: 590 591: 591 592: 592 593: 593 594: 594 595: 595 596: 596 597: 597 598: 598 599: 599 600: 600 601: 601 602: 602 603: 603 604: 604 605: 605 606: 606 607: 607 608: 608 609: 609 610: 610 611: 611 612: 612 613: 613 614: 614 615: 615 616: 616 617: 617 618: 618 619: 619 620: 620 621: 621 622: 622 623: 623 624: 624 625: 625 626: 626 627: 627 628: 628 629: 629 630: 630 631: 631 632: 632 633: 633 634: 634 635: 635 636: 636 637: 637 638: 638 639: 639 640: 640 641: 641 642: 642 643: 643 644: 644 645: 645 646: 646 647: 647 648: 648 649: 649 650: 650 651: 651 652: 652 653: 653 654: 654 655: 655 656: 656 657: 657 658: 658 659: 659 660: 660 661: 661 662: 662 663: 663 664: 664 665: 665 666: 666 667: 667 668: 668 669: 669 670: 670 671: 671 672: 672 673: 673 674: 674 675: 675 676: 676 677: 677 678: 678 679: 679 680: 680 681: 681 682: 682 683: 683 684: 684 685: 685 686: 686 687: 687 688: 688 689: 689 690: 690 691: 691 692: 692 693: 693 694: 694 695: 695 696: 696 697: 697 698: 698 699: 699 700: 700 701: 701 702: 702 703: 703 704: 704 705: 705 706: 706 707: 707 708: 708 709: 709 710: 710 711: 711 712: 712 713: 713 714: 714 715: 715 716: 716 717: 717 718: 718 719: 719 720: 720 721: 721 722: 722 723: 723 724: 724 725: 725 726: 726 727: 727 728: 728 729: 729 730: 730 731: 731 732: 732 733: 733 734: 734 735: 735 736: 736 737: 737 738: 738 739: 739 740: 740 741: 741 742: 742 743: 743 744: 744 745: 745 746: 746 747: 747 748: 748 749: 749 750: 750 751: 751 752: 752 753: 753 754: 754 755: 755 756: 756 757: 757 758: 758 759: 759 760: 760 761: 761 762: 762 763: 763 764: 764 765: 765 766: 766 767: 767 768: 768 769: 769 770: 770 771: 771 772: 772 773: 773 774: 774 775: 775 776: 776 777: 777 778: 778 779: 779 780: 780 781: 781 782: 782 783: 783 784: 784 785: 785 786: 786 787: 787 788: 788 789: 789 790: 790 791: 791 792: 792 793: 793 794: 794 795: 795 796: 796 797: 797 798: 798 799: 799 800: 800 801: 801 802: 802 803: 803 804: 804 805: 805 806: 806 807: 807 808: 808 809: 809 810: 810 811: 811 812: 812 813: 813 814: 814 815: 815 816: 816 817: 817 818: 818 819: 819 820: 820 821: 821 822: 822 823: 823 824: 824 825: 825 826: 826 827: 827 828: 828 829: 829 830: 830 831: 831 832: 832 833: 833 834: 834 835: 835 836: 836 837: 837 838: 838 839: 839 840: 840 841: 841 842: 842 843: 843 844: 844 845: 845 846: 846 847: 847 848: 848 849: 849 850: 850 851: 851 852: 852 853: 853 854: 854 855: 855 856: 856 857: 857 858: 858 859: 859 860: 860 861: 861 862: 862 863: 863 864: 864 865: 865 866: 866 867: 867 868: 868 869: 869 870: 870 871: 871 872: 872 873: 873 874: 874 875: 875 876: 876 877: 877 878: 878 879: 879 880: 880 881: 881 882: 882 883: 883 884: 884 885: 885 886: 886 887: 887 888: 888 889: 889 890: 890 891: 891 892: 892 893: 893 894: 894 895: 895 896: 896 897: 897 898: 898 899: 899 900: 900 901: 901 902: 902 903: 903 904: 904 905: 905 906: 906 907: 907 908: 908 909: 909 910: 910 911: 911 912: 912 913: 913 914: 914 915: 915 916: 916 917: 917 918: 918 919: 919 920: 920 921: 921 922: 922 923: 923 924: 924 925: 925 926: 926 927: 927 928: 928 929: 929 930: 930 931: 931 932: 932 933: 933 934: 934 935: 935 936: 936 937: 937 938: 938 939: 939 940: 940 941: 941 942: 942 943: 943 944: 944 945: 945 946: 946 947: 947 948: 948 949: 949 950: 950 951: 951 952: 952 953: 953 954: 954 955: 955 956: 956 957: 957 958: 958 959: 959 960: 960 961: 961 962: 962 963: 963 964: 964 965: 965 966: 966 967: 967 968: 968 969: 969 970: 970 971: 971 972: 972 973: 973 974: 974 975: 975 976: 976 977: 977 978: 978 979: 979 980: 980 981: 981 982: 982 983: 983 984: 984 985: 985 986: 986 987: 987 988: 988 989: 989 990: 990 991: 991 992: 992 993: 993 994: 994 995: 995 996: 996 997: 997 998: 998 999: 999 1000: 1000 1001: 1001 1002: 1002 1003: 1003 1004: 1004 1005: 1005 1006: 1006 1007: 1007 1008: 1008 1009: 1009 1010: 1010 1011: 1011 1012: 1012 1013: 1013 1014: 1014 1015: 1015 1016: 1016 1017: 1017 1018: 1018 1019: 1019 1020: 1020 1021: 1021 1022: 1022 1023: 1023 1024: 1024 1025: 1025 1026: 1026 1027: 1027 1028: 1028 1029: 1029 1030: 1030 1031: 1031 1032: 1032 1033: 1033 1034: 1034 1035: 1035 1036: 1036 1037: 1037 1038: 1038 1039: 1039 1040: 1040 1041: 1041 1042: 1042 1043: 1043 1044: 1044 1045: 1045 1046: 1046 1047: 1047 1048: 1048 1049: 1049 1050: 1050 1051: 1051 1052: 1052 1053: 1053 1054: 1054 1055: 1055 1056: 1056 1057: 1057 1058: 1058 1059: 1059 1060: 1060 1061: 1061 1062: 1062 1063: 1063 1064: 1064 1065: 1065 1066: 1066 1067: 1067 1068: 1068 1069: 1069 1070: 1070 1071: 1071 1072: 1072 1073: 1073 1074: 1074 1075: 1075 1076: 1076 1077: 1077 1078: 1078 1079: 1079 1080: 1080 1081: 1081 1082: 1082 1083: 1083 1084: 1084 1085: 1085 1086: 1086 1087: 1087 1088: 1088 1089: 1089 1090: 1090 1091: 1091 1092: 1092 1093: 1093 1094: 1094 1095: 1095 1096: 1096 1097: 1097 1098: 1098 1099: 1099 1100: 1100 1101: 1101 1102: 1102 1103: 1103 1104: 1104 1105: 1105 1106: 1106 1107: 1107 1108: 1108 1109: 1109 1110: 1110 1111: 1111 1112: 1112 1113: 1113 1114: 1114 1115: 1115 1116: 1116 1117: 1117 1118: 1118 1119: 1119 1120: 1120 1121: 1121 1122: 1122 1123: 1123 1124: 1124 1125: 1125 1126: 1126 1127: 1127 1128: 1128 1129: 1129 1130: 1130 1131: 1131 1132: 1132 1133: 1133 1134: 1134 1135: 1135 1136: 1136 1137: 1137 1138: 1138 1139: 1139 1140: 1140 1141: 1141 1142: 1142 1143: 1143 1144: 1144 1145: 1145 1146: 1146 1147: 1147 1148: 1148 1149: 1149 1150: 1150 1151: 1151 1152: 1152 1153: 1153 1154: 1154 1155: 1155 1156: 1156 1157: 1157 1158: 1158 1159: 1159 1160: 1160 1161: 1161 1162: 1162 1163: 1163 1164: 1164 1165: 1165 1166: 1166 1167: 1167 1168: 1168 1169: 1169 1170: 1170 1171: 1171 1172: 1172 1173: 1173 1174: 1174 1175: 1175 1176: 1176 1177: 1177 1178: 1178 1179: 1179 1180: 1180 1181: 1181 1182: 1182 1183: 1183 1184: 1184 1185: 1185 1186: 1186 1187: 1187 1188: 1188 1189: 1189 1190: 1190 1191: 1191 1192: 1192 1193: 1193 1194: 1194 1195: 1195 1196: 1196 1197: 1197 1198: 1198 1199: 1199 1200: 1200 1201: 1201 1202: 1202 1203: 1203 1204: 1204 1205: 1205 1206: 1206 1207: 1207 1208: 1208 1209: 1209 1210: 1210 1211: 1211 1212: 1212 1213: 1213 1214: 1214 1215: 1215 1216: 1216 1217: 1217 1218: 1218 1219: 1219 1220: 1220 1221: 1221 1222: 1222 1223: 1223 1224: 1224 1225: 1225 1226: 1226 1227: 1227 1228: 1228 1229: 1229 1230: 1230 1231: 1231 1232: 1232 1233: 1233 1234: 1234 1235: 1235 1236: 1236 1237: 1237 1238: 1238 1239: 1239 1240: 1240 1241: 1241 1242: 1242 1243: 1243 1244: 1244 1245: 1245 1246: 1246 1247: 1247 1248: 1248 1249: 1249 1250: 1250 1251: 1251 1252: 1252 1253: 1253 1254: 1254 1255: 1255 1256: 1256 1257: 1257 1258: 1258 1259: 1259 1260: 1260 1261: 1261 1262: 1262 1263: 1263 1264: 1264 1265: 1265 1266: 1266 1267: 1267 1268: 1268 1269: 1269 1270: 1270 1271: 1271 1272: 1272 1273: 1273 1274: 1274 1275: 1275 1276: 1276 1277: 1277 1278: 1278 1279: 1279 1280: 1280 1281: 1281 1282: 1282 1283: 1283 1284: 1284 1285: 1285 1286: 1286 1287: 1287 1288: 1288 1289: 1289 1290: 1290 1291: 1291 1292: 1292 1293: 1293 1294: 1294 1295: 1295 1296: 1296 1297: 1297 1298: 1298 1299: 1299 1300: 1300 1301: 1301 1302: 1302 1303: 1303 1304: 1304 1305: 1305 1306: 1306 1307: 1307 1308: 1308 1309: 1309 1310: 1310 1311: 1311 1312: 1312 1313: 1313 1314: 1314 1315: 1315 1316: 1316 1317: 1317 1318: 1318 1319: 1319 1320: 1320 1321: 1321 1322: 1322 1323: 1323 1324: 1324 1325: 1325 1326: 1326 1327: 1327 1328: 1328 1329: 1329 1330: 1330 1331: 1331 1332: 1332 1333: 1333 1334: 1334 1335: 1335 1336: 1336 1337: 1337 1338: 1338 1339: 1339 1340: 1340 1341: 1341 1342: 1342 1343: 1343 1344: 1344 1345: 1345 1346: 1346 1347: 1347 1348: 1348 1349: 1349 1350: 1350 1351: 1351 1352: 1352 1353: 1353 1354: 1354 1355: 1355 1356: 1356 1357: 1357 1358: 1358 1359: 1359 1360: 1360 1361: 1361 1362: 1362 1363: 1363 1364: 1364 1365: 1365 1366: 1366 1367: 1367 1368: 1368 1369: 1369 1370: 1370 1371: 1371 1372: 1372 1373: 1373 1374: 1374 1375: 1375 1376: 1376 1377: 1377 1378: 1378 1379: 1379 1380: 1380 1381: 1381 1382: 1382 1383: 1383 1384: 1384 1385: 1385 1386: 1386 1387: 1387 1388: 1388 1389: 1389 1390: 1390 1391: 1391 1392: 1392 1393: 1393 1394: 1394 1395: 1395 1396: 1396 1397: 1397 1398: 1398 1399: 1399 1400: 1400 1401: 1401 1402: 1402 1403: 1403 1404: 1404 1405: 1405 1406: 1406 1407: 1407 1408: 1408 1409: 1409 1410: 1410 1411: 1411 1412: 1412 1413: 1413 1414: 1414 1415: 1415 1416: 1416 1417: 1417 1418: 1418 1419: 1419 1420: 1420 1421: 1421 1422: 1422 1423: 1423 1424: 1424 1425: 1425 1426: 1426 1427: 1427 1428: 1428 1429: 1429 1430: 1430 1431: 1431 1432: 1432 1433: 1433 1434: 1434 1435: 1435 1436: 1436 1437: 1437 1438: 1438 1439: 1439 1440: 1440 1441: 1441 1442: 1442 1443: 1443 1444: 1444 1445: 1445 1446: 1446 1447: 1447 1448: 1448 1449: 1449 1450: 1450 1451: 1451 1452: 1452 1453: 1453 1454: 1454 1455: 1455 1456: 1456 1457: 1457 1458: 1458 1459: 1459 1460: 1460 1461: 1461 1462: 1462 1463: 1463 1464: 1464 1465: 1465 1466: 1466 1467: 1467 1468: 1468 1469: 1469 1470: 1470 1471: 1471 1472: 1472 1473: 1473 1474: 1474 1475: 1475 1476: 1476 1477: 1477 1478: 1478 1479: 1479 1480: 1480 1481: 1481 1482: 1482 1483: 1483 1484: 1484 1485: 1485 1486: 1486 1487: 1487 1488: 1488 1489: 1489 1490: 1490 1491: 1491 1492: 1492 1493: 1493 1494: 1494 1495: 1495 1496: 1496 1497: 1497 1498: 1498 1499: 1499 1500: 1500 1501: 1501 1502: 1502 1503: 1503 1504: 1504 1505: 1505 1506: 1506 1507: 1507 1508: 1508 1509: 1509 1510: 1510 1511: 1511 1512: 1512 1513: 1513 1514: 1514 1515: 1515 1516: 1516 1517: 1517 1518: 1518 1519: 1519 1520: 1520 1521: 1521 1522: 1522 1523: 1523 1524: 1524 1525: 1525 1526: 1526 1527: 1527 1528: 1528 1529: 1529 1530: 1530 1531: 1531 1532: 1532 1533: 1533 1534: 1534 1535: 1535 1536: 1536 1537: 1537 1538: 1538 1539: 1539 1540: 1540 1541: 1541 1542: 1542 1543: 1543 1544: 1544 1545: 1545 1546: 1546 1547: 1547 1548: 1548 1549: 1549 1550: 1550 1551: 1551 1552: 1552 1553: 1553 1554: 1554 1555: 1555 1556: 1556 1557: 1557 1558: 1558 1559: 1559 1560: 1560 1561: 1561 1562: 1562 1563: 1563 1564: 1564 1565: 1565 1566: 1566 1567: 1567 1568: 1568 1569: 1569 1570: 1570 1571: 1571 1572: 1572 1573: 1573 1574: 1574 1575: 1575 1576: 1576 1577: 1577 1578: 1578 1579: 1579 1580: 1580 1581: 1581 1582: 1582 1583: 1583 1584: 1584 1585: 1585 1586: 1586 1587: 1587 1588: 1588 1589: 1589 1590: 1590 1591: 1591 1592: 1592 1593: 1593 1594: 1594 1595: 1595 1596: 1596 1597: 1597 1598: 1598 1599: 1599 1600: 1600 1601: 1601 1602: 1602 1603: 1603 1604: 1604 1605: 1605 1606: 1606 1607: 1607 1608: 1608 1609: 1609 1610: 1610 1611: 1611 1612: 1612 1613: 1613 1614: 1614 1615: 1615 1616: 1616 1617: 1617 1618: 1618 1619: 1619 1620: 1620 1621: 1621 1622: 1622 1623: 1623 1624: 1624 1625: 1625 1626: 1626 1627: 1627 1628: 1628 1629: 1629 1630: 1630 1631: 1631 1632: 1632 1633: 1633 1634: 1634 1635: 1635 1636: 1636 1637: 1637 1638: 1638 1639: 1639 1640: 1640 1641: 1641 1642: 1642 1643: 1643 1644: 1644 1645: 1645 1646: 1646 1647: 1647 1648: 1648 1649: 1649 1650: 1650 1651: 1651 1652: 1652 1653: 1653 1654: 1654 1655: 1655 1656: 1656 1657: 1657 1658: 1658 1659: 1659 1660: 1660 1661: 1661 1662: 1662 1663: 1663 1664: 1664 1665: 1665 1666: 1666 1667: 1667 1668: 1668 1669: 1669 1670: 1670 1671: 1671 1672: 1672 1673: 1673 1674: 1674 1675: 1675 1676: 1676 1677: 1677 1678: 1678 1679: 1679 1680: 1680 1681: 1681 1682: 1682 1683: 1683 1684: 1684 1685: 1685 1686: 1686 1687: 1687 1688: 1688 1689: 1689 1690: 1690 1691: 1691 1692: 1692 1693: 1693 1694: 1694 1695: 1695 1696: 1696 1697: 1697 1698: 1698 1699: 1699 1700: 1700 1701: 1701 1702: 1702 1703: 1703 1704: 1704 1705: 1705 1706: 1706 1707: 1707 1708: 1708 1709: 1709 1710: 1710 1711: 1711 1712: 1712 1713: 1713 1714: 1714 1715: 1715 1716: 1716 1717: 1717 1718: 1718 1719: 1719 1720: 1720 1721: 1721 1722: 1722 1723: 1723 1724: 1724 1725: 1725 1726: 1726 1727: 1727 1728: 1728 1729: 1729 1730: 1730 1731: 1731 1732: 1732 1733: 1733 1734: 1734 1735: 1735 1736: 1736 1737: 1737 1738: 1738 1739: 1739 1740: 1740 1741: 1741 1742: 1742 1743: 1743 1744: 1744 1745: 1745 1746: 1746 1747: 1747 1748: 1748 1749: 1749 1750: 1750 1751: 1751 1752: 1752 1753: 1753 1754: 1754 1755: 1755 1756: 1756 1757: 1757 1758: 1758 1759: 1759 1760: 1760 1761: 1761 1762: 1762 1763: 1763 1764: 1764 1765: 1765 1766: 1766 1767: 1767 1768: 1768 1769: 1769 1770: 1770 1771: 1771 1772: 1772 1773: 1773 1774: 1774 1775: 1775 1776: 1776 1777: 1777 1778: 1778 1779: 1779 1780: 1780 1781: 1781 1782: 1782 1783: 1783 1784: 1784 1785: 1785 1786: 1786 1787: 1787 1788: 1788 1789: 1789 1790: 1790 1791: 1791 1792: 1792 1793: 1793 1794: 1794 1795: 1795 1796: 1796 1797: 1797 1798: 1798 1799: 1799 1800: 1800 1801: 1801 1802: 1802 1803: 1803 1804: 1804 1805: 1805 1806: 1806 1807: 1807 1808: 1808 1809: 1809 1810: 1810 1811: 1811 1812: 1812 1813: 1813 1814: 1814 1815: 1815 1816: 1816 1817: 1817 1818: 1818 1819: 1819 1820: 1820 1821: 1821 1822: 1822 1823: 1823 1824: 1824 1825: 1825 1826: 1826 1827: 1827 1828: 1828 1829: 1829 1830: 1830 1831: 1831 1832: 1832 1833: 1833 1834: 1834 1835: 1835 1836: 1836 1837: 1837 1838: 1838 1839: 1839 1840: 1840 1841: 1841 1842: 1842 1843: 1843 1844: 1844 1845: 1845 1846: 1846 1847: 1847 1848: 1848 1849: 1849 1850: 1850 1851: 1851 1852: 1852 1853: 1853 1854: 1854 1855: 1855 1856: 1856 1857: 1857 1858: 1858 1859: 1859 1860: 1860 1861: 1861 1862: 1862 1863: 1863 1864: 1864 1865: 1865 1866: 1866 1867: 1867 1868: 1868 1869: 1869 1870: 1870 1871: 1871 1872: 1872 1873: 1873 1874: 1874 1875: 1875 1876: 1876 1877: 1877 1878: 1878 1879: 1879 1880: 1880 1881: 1881 1882: 1882 1883: 1883 1884: 1884 1885: 1885 1886: 1886 1887: 1887 1888: 1888 1889: 1889 1890: 1890 1891: 1891 1892: 1892 1893: 1893 1894: 1894 1895: 1895 1896: 1896 1897: 1897 1898: 1898 1899: 1899 1900: 1900 1901: 1901 1902: 1902 1903: 1903 1904: 1904 1905: 1905 1906: 1906 1907: 1907 1908: 1908 1909: 1909 1910: 1910 1911: 1911 1912: 1912 1913: 1913 1914: 1914 1915: 1915 1916: 1916 1917: 1917 1918: 1918 1919: 1919 1920: 1920 1921: 1921 1922: 1922 1923: 1923 1924: 1924 1925: 1925 1926: 1926 1927: 1927 1928: 1928 1929: 1929 1930: 1930 1931: 1931 1932: 1932 1933: 1933 1934: 1934 1935: 1935 1936: 1936 1937: 1937 1938: 1938 1939: 1939 1940: 1940 1941: 1941 1942: 1942 1943: 1943 1944: 1944 1945: 1945 1946: 1946 1947: 1947 1948: 1948 1949: 1949 1950: 1950 1951: 1951 1952: 1952 1953: 1953 1954: 1954 1955: 1955 1956: 1956 1957: 1957 1958: 1958 1959: 1959 1960: 1960 1961: 1961 1962: 1962 1963: 1963 1964: 1964 1965: 1965 1966: 1966 1967: 1967 1968: 1968 1969: 1969 1970: 1970 1971: 1971 1972: 1972 1973: 1973 1974: 1974 1975: 1975 1976: 1976 1977: 1977 1978: 1978 1979: 1979 1980: 1980 1981: 1981 1982: 1982 1983: 1983 1984: 1984 1985: 1985 1986: 1986 1987: 1987 1988: 1988 1989: 1989 1990: 1990 1991: 1991 1992: 1992 1993: 1993 1994: 1994 1995: 1995 1996: 1996 1997: 1997 1998: 1998 1999: 1999 2000: 2000 2001: 2001 2002: 2002 2003: 2003 2004: 2004 2005: 2005 2006: 2006 2007: 2007 2008: 2008 2009: 2009 2010: 2010 2011: 2011 2012: 2012 2013: 2013 2014: 2014 2015: 2015 2016: 2016 2017: 2017 2018: 2018 2019: 2019 2020: 2020 2021: 2021 2022: 2022 2023: 2023 2024: 2024 2025: 2025 2026: 2026 2027: 2027 2028: 2028 2029: 2029 2030: 2030 2031: 2031 2032: 2032 2033: 2033 2034: 2034 2035: 2035 2036: 2036 2037: 2037 2038: 2038 2039: 2039 2040: 2040 2041: 2041 2042: 2042 2043: 2043 2044: 2044 2045: 2045 2046: 2046 2047: 2047 2048: 2048 2049: 2049 2050: 2050 2051: 2051 2052: 2052 2053: 2053 2054: 2054 2055: 2055 2056: 2056 2057: 2057 2058: 2058 2059: 2059 2060: 2060 2061: 2061 2062: 2062 2063: 2063 2064: 2064 2065: 2065 2066: 2066 2067: 2067 2068: 2068 2069: 2069 2070: 2070 2071: 2071 2072: 2072 2073: 2073 2074: 2074 2075: 2075 2076: 2076 2077: 2077 2078: 2078 2079: 2079 2080: 2080 2081: 2081 2082: 2082 2083: 2083 2084: 2084 2085: 2085 2086: 2086 2087: 2087 2088: 2088 2089: 2089 2090: 2090 2091: 2091 2092: 2092 2093: 2093 2094: 2094 2095: 2095 2096: 2096 2097: 2097 2098: 2098 2099: 2099 2100: 2100 2101: 2101 2102: 2102 2103: 2103 2104: 2104 2105: 2105 2106: 2106 2107: 2107 2108: 2108 2109: 2109 2110: 2110 2111: 2111 2112: 2112 2113: 2113 2114: 2114 2115: 2115 2116: 2116 2117: 2117 2118: 2118 2119: 2119 2120: 2120 2121: 2121 2122: 2122 2123: 2123 2124: 2124 2125: 2125 2126: 2126 2127: 2127 2128: 2128 2129: 2129 2130: 2130 2131: 2131 2132: 2132 2133: 2133 2134: 2134 2135: 2135 2136: 2136 2137: 2137 2138: 2138 2139: 2139 2140: 2140 2141: 2141 2142: 2142 2143: 2143 2144: 2144 2145: 2145 2146: 2146 2147: 2147 2148: 2148 2149: 2149 2150: 2150 2151: 2151 2152: 2152 2153: 2153 2154: 2154 2155: 2155 2156: 2156 2157: 2157 2158: 2158 2159: 2159 2160: 2160 2161: 2161 2162: 2162 2163: 2163 2164: 2164 2165: 2165 2166: 2166 2167: 2167 2168: 2168 2169: 2169 2170: 2170 2171: 2171 2172: 2172 2173: 2173 2174: 2174 2175: 2175 2176: 2176 2177: 2177 2178: 2178 2179: 2179 2180: 2180 2181: 2181 2182: 2182 2183: 2183 2184: 2184 2185: 2185 2186: 2186 2187: 2187 2188: 2188 2189: 2189 2190: 2190 2191: 2191 2192: 2192 2193: 2193 2194: 2194 2195: 2195 2196: 2196 2197: 2197 2198: 2198 2199: 2199 2200: 2200 2201: 2201 2202: 2202 2203: 2203 2204: 2204 2205: 2205 2206: 2206 2207: 2207 2208: 2208 2209: 2209 2210: 2210 2211: 2211 2212: 2212 2213: 2213 2214: 2214 2215: 2215 2216: 2216 2217: 2217 2218: 2218 2219: 2219 2220: 2220 2221: 2221 2222: 2222 2223: 2223 2224: 2224 2225: 2225 2226: 2226 2227: 2227 2228: 2228 2229: 2229 2230: 2230 2231: 2231 2232: 2232 2233: 2233 2234: 2234 2235: 2235 2236: 2236 2237: 2237 2238: 2238 2239: 2239 2240: 2240 2241: 2241 2242: 2242 2243: 2243 2244: 2244 2245: 2245 2246: 2246 2247: 2247 2248: 2248 2249: 2249 2250: 2250 2251: 2251 2252: 2252 2253: 2253 2254: 2254 2255: 2255 2256: 2256 2257: 2257 2258: 2258 2259: 2259 2260: 2260 2261: 2261 2262: 2262 2263: 2263 2264: 2264 2265: 2265 2266: 2266 2267: 2267 2268: 2268 2269: 2269 2270: 2270 2271: 2271 2272: 2272 2273: 2273 2274: 2274 2275: 2275 2276: 2276 2277: 2277 2278: 2278 2279: 2279 2280: 2280 2281: 2281 2282: 2282 2283: 2283 2284: 2284 2285: 2285 2286: 2286 2287: 2287 2288: 2288 2289: 2289 2290: 2290 2291: 2291 2292: 2292 2293: 2293 2294: 2294 2295: 2295 2296: 2296 2297: 2297 2298: 2298 2299: 2299 2300: 2300 2301: 2301 2302: 2302 2303: 2303 2304: 2304 2305: 2305 2306: 2306 2307: 2307 2308: 2308 2309: 2309 2310: 2310 2311: 2311 2312: 2312 2313: 2313 2314: 2314 2315: 2315 2316: 2316 2317: 2317 2318: 2318 2319: 2319 2320: 2320 2321: 2321 2322: 2322 2323: 2323 2324: 2324 2325: 2325 2326: 2326 2327: 2327 2328: 2328 2329: 2329 2330: 2330 2331: 2331 2332: 2332 2333: 2333 2334: 2334 2335: 2335 2336: 2336 2337: 2337 2338: 2338 2339: 2339 2340: 2340 2341: 2341 2342: 2342 2343: 2343 2344: 2344 2345: 2345 2346: 2346 2347: 2347 2348: 2348 2349: 2349 2350: 2350 2351: 2351 2352: 2352 2353: 2353 2354: 2354 2355: 2355 2356: 2356 2357: 2357 2358: 2358 2359: 2359 2360: 2360 2361: 2361 2362: 2362 2363: 2363 2364: 2364 2365: 2365 2366: 2366 2367: 2367 2368: 2368 2369: 2369 2370: 2370 2371: 2371 2372: 2372 2373: 2373 2374: 2374 2375: 2375 2376: 2376 2377: 2377 2378: 2378 2379: 2379 2380: 2380 2381: 2381 2382: 2382 2383: 2383 2384: 2384 2385: 2385 2386: 2386 2387: 2387 2388: 2388 2389: 2389 2390: 2390 2391: 2391 2392: 2392 2393: 2393 2394: 2394 2395: 2395 2396: 2396 2397: 2397 2398: 2398 2399: 2399 2400: 2400 2401: 2401 2402: 2402 2403: 2403 2404: 2404 2405: 2405 2406: 2406 2407: 2407 2408: 2408 2409: 2409 2410: 2410 2411: 2411 2412: 2412 2413: 2413 2414: 2414 2415: 2415 2416: 2416 2417: 2417 2418: 2418 2419: 2419 2420: 2420 2421: 2421 2422: 2422 2423: 2423 2424: 2424 2425: 2425 2426: 2426 2427: 2427 2428: 2428 2429: 2429 2430: 2430 2431: 2431 2432: 2432 2433: 2433 2434: 2434 2435: 2435 2436: 2436 2437: 2437 2438: 2438 2439: 2439 2440: 2440 2441: 2441 2442: 2442 2443: 2443 2444: 2444 2445: 2445 2446: 2446 2447: 2447 2448: 2448 2449: 2449 2450: 2450 2451: 2451 2452: 2452 2453: 2453 2454: 2454 2455: 2455 2456: 2456 2457: 2457 2458: 2458 2459: 2459 2460: 2460 2461: 2461 2462: 2462 2463: 2463 2464: 2464 2465: 2465 2466: 2466 2467: 2467 2468: 2468 2469: 2469 2470: 2470 2471: 2471 2472: 2472 2473: 2473 2474: 2474 2475: 2475 2476: 2476 2477: 2477 2478: 2478 2479: 2479 2480: 2480 2481: 2481 2482: 2482 2483: 2483 2484: 2484 2485: 2485 2486: 2486 2487: 2487 2488: 2488 2489: 2489 2490: 2490 2491: 2491 2492: 2492 2493: 2493 2494: 2494 2495: 2495 2496: 2496 2497: 2497 2498: 2498 2499: 2499 2500: 2500 2501: 2501 2502: 2502 2503: 2503 2504: 2504 2505: 2505 2506: 2506 2507: 2507 2508: 2508 2509: 2509 2510: 2510 2511: 2511 2512: 2512 2513: 2513 2514: 2514 2515: 2515 2516: 2516 2517: 2517 2518: 2518 2519: 2519 2520: 2520 2521: 2521 2522: 2522 2523: 2523 2524: 2524 2525: 2525 2526: 2526 2527: 2527 2528: 2528 2529: 2529 2530: 2530 2531: 2531 2532: 2532 2533: 2533 2534: 2534 2535: 2535 2536: 2536 2537: 2537 2538: 2538 2539: 2539 2540: 2540 2541: 2541 2542: 2542 2543: 2543 2544: 2544 2545: 2545 2546: 2546 2547: 2547 2548: 2548 2549: 2549 2550: 2550 2551: 2551 2552: 2552 2553: 2553 2554: 2554 2555: 2555 2556: 2556 2557: 2557 2558: 2558 2559: 2559 2560: 2560 2561: 2561 2562: 2562 2563: 2563 2564: 2564 2565: 2565 2566: 2566 2567: 2567 2568: 2568 2569: 2569 2570: 2570 2571: 2571 2572: 2572 2573: 2573 2574: 2574 2575: 2575 2576: 2576 2577: 2577 2578: 2578 2579: 2579 2580: 2580 2581: 2581 2582: 2582 2583: 2583 2584: 2584 2585: 2585 2586: 2586 2587: 2587 2588: 2588 2589: 2589 2590: 2590 2591: 2591 2592: 2592 2593: 2593 2594: 2594 2595: 2595 2596: 2596 2597: 2597 2598: 2598 2599: 2599 2600: 2600 2601: 2601 2602: 2602 2603: 2603 2604: 2604 2605: 2605 2606: 2606 2607: 2607 2608: 2608 2609: 2609 2610: 2610 2611: 2611 2612: 2612 2613: 2613 2614: 2614 2615: 2615 2616: 2616 2617: 2617 2618: 2618 2619: 2619 2620: 2620 2621: 2621 2622: 2622 2623: 2623 2624: 2624 2625: 2625 2626: 2626 2627: 2627 2628: 2628 2629: 2629 2630: 2630 2631: 2631 2632: 2632 2633: 2633 2634: 2634 2635: 2635 2636: 2636 2637: 2637 2638: 2638 2639: 2639 2640: 2640 2641: 2641 2642: 2642 2643: 2643 2644: 2644 2645: 2645 2646: 2646 2647: 2647 2648: 2648 2649: 2649 2650: 2650 2651: 2651 2652: 2652 2653: 2653 2654: 2654 2655: 2655 2656: 2656 2657: 2657 2658: 2658 2659: 2659 2660: 2660 2661: 2661 2662: 2662 2663: 2663 2664: 2664 2665: 2665 2666: 2666 2667: 2667 2668: 2668 2669: 2669 2670: 2670 2671: 2671 2672: 2672 2673: 2673 2674: 2674 2675: 2675 2676: 2676 2677: 2677 2678: 2678 2679: 2679 2680: 2680 2681: 2681 2682: 2682 2683: 2683 2684: 2684 2685: 2685 2686: 2686 2687: 2687 2688: 2688 2689: 2689 2690: 2690 2691: 2691 2692: 2692 2693: 2693 2694: 2694 2695: 2695 2696: 2696 2697: 2697 2698: 2698 2699: 2699 2700: 2700 2701: 2701 2702: 2702 2703: 2703 2704: 2704 2705: 2705 2706: 2706 2707: 2707 2708: 2708 2709: 2709 2710: 2710 2711: 2711 2712: 2712 2713: 2713 2714: 2714 2715: 2715 2716: 2716 2717: 2717 2718: 2718 2719: 2719 2720: 2720 2721: 2721 2722: 2722 2723: 2723 2724: 2724 2725: 2725 2726: 2726 2727: 2727 2728: 2728 2729: 2729 2730: 2730 2731: 2731 2732: 2732 2733: 2733 2734: 2734 2735: 2735 2736: 2736 2737: 2737 2738: 2738 2739: 2739 2740: 2740 2741: 2741 2742: 2742 2743: 2743 2744: 2744 2745: 2745 2746: 2746 2747: 2747 2748: 2748 2749: 2749 2750: 2750 2751: 2751 2752: 2752 2753: 2753 2754: 2754 2755: 2755 2756: 2756 2757: 2757 2758: 2758 2759: 2759 2760: 2760 2761: 2761 2762: 2762 2763: 2763 2764: 2764 2765: 2765 2766: 2766 2767: 2767 2768: 2768 2769: 2769 2770: 2770 2771: 2771 2772: 2772 2773: 2773 2774: 2774 2775: 2775 2776: 2776 2777: 2777 2778: 2778 2779: 2779 2780: 2780 2781: 2781 2782: 2782 2783: 2783 2784: 2784 2785: 2785 2786: 2786 2787: 2787 2788: 2788 2789: 2789 2790: 2790 2791: 2791 2792: 2792 2793: 2793 2794: 2794 2795: 2795 2796: 2796 2797: 2797 2798: 2798 2799: 2799 2800: 2800 2801: 2801 2802: 2802 2803: 2803 2804: 2804 2805: 2805 2806: 2806 2807: 2807 2808: 2808 2809: 2809 2810: 2810 2811: 2811 2812: 2812 2813: 2813 2814: 2814 2815: 2815 2816: 2816 2817: 2817 2818: 2818 2819: 2819 2820: 2820 2821: 2821 2822: 2822 2823: 2823 2824: 2824 2825: 2825 2826: 2826 2827: 2827 2828: 2828 2829: 2829 2830: 2830 2831: 2831 2832: 2832 2833: 2833 2834: 2834 2835: 2835 2836: 2836 2837: 2837 2838: 2838 2839: 2839 2840: 2840 2841: 2841 2842: 2842 2843: 2843 2844: 2844 2845: 2845 2846: 2846 2847: 2847 2848: 2848 2849: 2849 2850: 2850 2851: 2851 2852: 2852 2853: 2853 2854: 2854 2855: 2855 2856: 2856 2857: 2857 2858: 2858 2859: 2859 2860: 2860 2861: 2861 2862: 2862 2863: 2863 2864: 2864 2865: 2865 2866: 2866 2867: 2867 2868: 2868 2869: 2869 2870: 2870 2871: 2871 2872: 2872 2873: 2873 2874: 2874 2875: 2875 2876: 2876 2877: 2877 2878: 2878 2879: 2879 2880: 2880 2881: 2881 2882: 2882 2883: 2883 2884: 2884 2885: 2885 2886: 2886 2887: 2887 2888: 2888 2889: 2889 2890: 2890 2891: 2891 2892: 2892 2893: 2893 2894: 2894 2895: 2895 2896: 2896 2897: 2897 2898: 2898 2899: 2899 2900: 2900 2901: 2901 2902: 2902 2903: 2903 2904: 2904 2905: 2905 2906: 2906 2907: 2907 2908: 2908 2909: 2909 2910: 2910 2911: 2911 2912: 2912 2913: 2913 2914: 2914 2915: 2915 2916: 2916 2917: 2917 2918: 2918 2919: 2919 2920: 2920 2921: 2921 2922: 2922 2923: 2923 2924: 2924 2925: 2925 2926: 2926 2927: 2927 2928: 2928 2929: 2929 2930: 2930 2931: 2931 2932: 2932 2933: 2933 2934: 2934 2935: 2935 2936: 2936 2937: 2937 2938: 2938 2939: 2939 2940: 2940 2941: 2941 2942: 2942 2943: 2943 2944: 2944 2945: 2945 2946: 2946 2947: 2947 2948: 2948 2949: 2949 2950: 2950 2951: 2951 2952: 2952 2953: 2953 2954: 2954 2955: 2955 2956: 2956 2957: 2957 2958: 2958 2959: 2959 2960: 2960 2961: 2961 2962: 2962 2963: 2963 2964: 2964 2965: 2965 2966: 2966 2967: 2967 2968: 2968 2969: 2969 2970: 2970 2971: 2971 2972: 2972 2973: 2973 2974: 2974 2975: 2975 2976: 2976 2977: 2977 2978: 2978 2979: 2979 2980: 2980 2981: 2981 2982: 2982 2983: 2983 2984: 2984 2985: 2985 2986: 2986 2987: 2987 2988: 2988 2989: 2989 2990: 2990 2991: 2991 2992: 2992 2993: 2993 2994: 2994 2995: 2995 2996: 2996 2997: 2997 2998: 2998 2999: 2999 3000: 3000 3001: 3001 3002: 3002 3003: 3003 3004: 3004 3005: 3005 3006: 3006 3007: 3007 3008: 3008 3009: 3009 3010: 3010 3011: 3011 3012: 3012 3013: 3013 3014: 3014 3015: 3015 3016: 3016 3017: 3017 3018: 3018 3019: 3019 3020: 3020 3021: 3021 3022: 3022 3023: 3023 3024: 3024 3025: 3025 3026: 3026 3027: 3027 3028: 3028 3029: 3029 3030: 3030 3031: 3031 3032: 3032 3033: 3033 3034: 3034 3035: 3035 3036: 3036 3037: 3037 3038: 3038 3039: 3039 3040: 3040 3041: 3041 3042: 3042 3043: 3043 3044: 3044 3045: 3045 3046: 3046 3047: 3047 3048: 3048 3049: 3049 3050: 3050 3051: 3051 3052: 3052 3053: 3053 3054: 3054 3055: 3055 3056: 3056 3057: 3057 3058: 3058 3059: 3059 3060: 3060 3061: 3061 3062: 3062 3063: 3063 3064: 3064 3065: 3065 3066: 3066 3067: 3067 3068: 3068 3069: 3069 3070: 3070 3071: 3071 3072: 3072 3073: 3073 3074: 3074 3075: 3075 3076: 3076 3077: 3077 3078: 3078 3079: 3079 3080: 3080 3081: 3081 3082: 3082 3083: 3083 3084: 3084 3085: 3085 3086: 3086 3087: 3087 3088: 3088 3089: 3089 3090: 3090 3091: 3091 3092: 3092 3093: 3093 3094: 3094 3095: 3095 3096: 3096 3097: 3097 3098: 3098 3099: 3099 3100: 3100 3101: 3101 3102: 3102 3103: 3103 3104: 3104 3105: 3105 3106: 3106 3107: 3107 3108: 3108 3109: 3109 3110: 3110 3111: 3111 3112: 3112 3113: 3113 3114: 3114 3115: 3115 3116: 3116 3117: 3117 3118: 3118 3119: 3119 3120: 3120 3121: 3121 3122: 3122 3123: 3123 3124: 3124 3125: 3125 3126: 3126 3127: 3127 3128: 3128 3129: 3129 3130: 3130 3131: 3131 3132: 3132 3133: 3133 3134: 3134 3135: 3135 3136: 3136 3137: 3137 3138: 3138 3139: 3139 3140: 3140 3141: 3141 3142: 3142 3143: 3143 3144: 3144 3145: 3145 3146: 3146 3147: 3147 3148: 3148 3149: 3149 3150: 3150 3151: 3151 3152: 3152 3153: 3153 3154: 3154 3155: 3155 3156: 3156 3157: 3157 3158: 3158 3159: 3159 3160: 3160 3161: 3161 3162: 3162 3163: 3163 3164: 3164 3165: 3165 3166: 3166 3167: 3167 3168: 3168 3169: 3169 3170: 3170 3171: 3171 3172: 3172 3173: 3173 3174: 3174 3175: 3175 3176: 3176 3177: 3177 3178: 3178 3179: 3179 3180: 3180 3181: 3181 3182: 3182 3183: 3183 3184: 3184 3185: 3185 3186: 3186 3187: 3187 3188: 3188 3189: 3189 3190: 3190 3191: 3191 3192: 3192 3193: 3193 3194: 3194 3195: 3195 3196: 3196 3197: 3197 3198: 3198 3199: 3199 3200: 3200 3201: 3201 3202: 3202 3203: 3203 3204: 3204 3205: 3205 3206: 3206 3207: 3207 3208: 3208 3209: 3209 3210: 3210 3211: 3211 3212: 3212 3213: 3213 3214: 3214 3215: 3215 3216: 3216 3217: 3217 3218: 3218 3219: 3219 3220: 3220 3221: 3221 3222: 3222 3223: 3223 3224: 3224 3225: 3225 3226: 3226 3227: 3227 3228: 3228 3229: 3229 3230: 3230 3231: 3231 3232: 3232 3233: 3233 3234: 3234 3235: 3235 3236: 3236 3237: 3237 3238: 3238 3239: 3239 3240: 3240 3241: 3241 3242: 3242 3243: 3243 3244: 3244 3245: 3245 3246: 3246 3247: 3247 3248: 3248 3249: 3249 3250: 3250 3251: 3251 3252: 3252 3253: 3253 3254: 3254 3255: 3255 3256: 3256 3257: 3257 3258: 3258 3259: 3259 3260: 3260 3261: 3261 3262: 3262 3263: 3263 3264: 3264 3265: 3265 3266: 3266 3267: 3267 3268: 3268 3269: 3269 3270: 3270 3271: 3271 3272: 3272 3273: 3273 3274: 3274 3275: 3275 3276: 3276 3277: 3277 3278: 3278 3279: 3279 3280: 3280 3281: 3281 3282: 3282 3283: 3283 3284: 3284 3285: 3285 3286: 3286 3287: 3287 3288: 3288 3289: 3289 3290: 3290 3291: 3291 3292: 3292 3293: 3293 3294: 3294 3295: 3295 3296: 3296 3297: 3297 3298: 3298 3299: 3299 3300: 3300 3301: 3301 3302: 3302 3303: 3303 3304: 3304 3305: 3305 3306: 3306 3307: 3307 3308: 3308 3309: 3309 3310: 3310 3311: 3311 3312: 3312 3313: 3313 3314: 3314 3315: 3315 3316: 3316 3317: 3317 3318: 3318 3319: 3319 3320: 3320 3321: 3321 3322: 3322 3323: 3323 3324: 3324 3325: 3325 3326: 3326 3327: 3327 3328: 3328 3329: 3329 3330: 3330 3331: 3331 3332: 3332 3333: 3333 3334: 3334 3335: 3335 3336: 3336 3337: 3337 3338: 3338 3339: 3339 3340: 3340 3341: 3341 3342: 3342 3343: 3343 3344: 3344 3345: 3345 3346: 3346 3347: 3347 3348: 3348 3349: 3349 3350: 3350 3351: 3351 3352: 3352 3353: 3353 3354: 3354 3355: 3355 3356: 3356 3357: 3357 3358: 3358 3359: 3359 3360: 3360 3361: 3361 3362: 3362 3363: 3363 3364: 3364 3365: 3365 3366: 3366 3367: 3367 3368: 3368 3369: 3369 3370: 3370 3371: 3371 3372: 3372 3373: 3373 3374: 3374 3375: 3375 3376: 3376 3377: 3377 3378: 3378 3379: 3379 3380: 3380 3381: 3381 3382: 3382 3383: 3383 3384: 3384 3385: 3385 3386: 3386 3387: 3387 3388: 3388 3389: 3389 3390: 3390 3391: 3391 3392: 3392 3393: 3393 3394: 3394 3395: 3395 3396: 3396 3397: 3397 3398: 3398 3399: 3399 3400: 3400 3401: 3401 3402: 3402 3403: 3403 3404: 3404 3405: 3405 3406: 3406 3407: 3407 3408: 3408 3409: 3409 3410: 3410 3411: 3411 3412: 3412 3413: 3413 3414: 3414 3415: 3415 3416: 3416 3417: 3417 3418: 3418 3419: 3419 3420: 3420 3421: 3421 3422: 3422 3423: 3423 3424: 3424 3425: 3425 3426: 3426 3427: 3427 3428: 3428 3429: 3429 3430: 3430 3431: 3431 3432: 3432 3433: 3433 3434: 3434 3435: 3435 3436: 3436 3437: 3437 3438: 3438 3439: 3439 3440: 3440 3441: 3441 3442: 3442 3443: 3443 3444: 3444 3445: 3445 3446: 3446 3447: 3447 3448: 3448 3449: 3449 3450: 3450 3451: 3451 3452: 3452 3453: 3453 3454: 3454 3455: 3455 3456: 3456 3457: 3457 3458: 3458 3459: 3459 3460: 3460 3461: 3461 3462: 3462 3463: 3463 3464: 3464 3465: 3465 3466: 3466 3467: 3467 3468: 3468 3469: 3469 3470: 3470 3471: 3471 3472: 3472 3473: 3473 3474: 3474 3475: 3475 3476: 3476 3477: 3477 3478: 3478 3479: 3479 3480: 3480 3481: 3481 3482: 3482 3483: 3483 3484: 3484 3485: 3485 3486: 3486 3487: 3487 3488: 3488 3489: 3489 3490: 3490 3491: 3491 3492: 3492 3493: 3493 3494: 3494 3495: 3495 3496: 3496 3497: 3497 3498: 3498 3499: 3499 3500: 3500 3501: 3501 3502: 3502 3503: 3503 3504: 3504 3505: 3505 3506: 3506 3507: 3507 3508: 3508 3509: 3509 3510: 3510 3511: 3511 3512: 3512 3513: 3513 3514: 3514 3515: 3515 3516: 3516 3517: 3517 3518: 3518 3519: 3519 3520: 3520 3521: 3521 3522: 3522 3523: 3523 3524: 3524 3525: 3525 3526: 3526 3527: 3527 3528: 3528 3529: 3529 3530: 3530 3531: 3531 3532: 3532 3533: 3533 3534: 3534 3535: 3535 3536: 3536 3537: 3537 3538: 3538 3539: 3539 3540: 3540 3541: 3541 3542: 3542 3543: 3543 3544: 3544 3545: 3545 3546: 3546 3547: 3547 3548: 3548 3549: 3549 3550: 3550 3551: 3551 3552: 3552 3553: 3553 3554: 3554 3555: 3555 3556: 3556 3557: 3557 3558: 3558 3559: 3559 3560: 3560 3561: 3561 3562: 3562 3563: 3563 3564: 3564 3565: 3565 3566: 3566 3567: 3567 3568: 3568 3569: 3569 3570: 3570 3571: 3571 3572: 3572 3573: 3573 3574: 3574 3575: 3575 3576: 3576 3577: 3577 3578: 3578 3579: 3579 3580: 3580 3581: 3581 3582: 3582 3583: 3583 3584: 3584 3585: 3585 3586: 3586 3587: 3587 3588: 3588 3589: 3589 3590: 3590 3591: 3591 3592: 3592 3593: 3593 3594: 3594 3595: 3595 3596: 3596 3597: 3597 3598: 3598 3599: 3599 3600: 3600 3601: 3601 3602: 3602 3603: 3603 3604: 3604 3605: 3605 3606: 3606 3607: 3607 3608: 3608 3609: 3609 3610: 3610 3611: 3611 3612: 3612 3613: 3613 3614: 3614 3615: 3615 3616: 3616 3617: 3617 3618: 3618 3619: 3619 3620: 3620 3621: 3621 3622: 3622 3623: 3623 3624: 3624 3625: 3625 3626: 3626 3627: 3627 3628: 3628 3629: 3629 3630: 3630 3631: 3631 3632: 3632 3633: 3633 3634: 3634 3635: 3635 3636: 3636 3637: 3637 3638: 3638 3639: 3639 3640: 3640 3641: 3641 3642: 3642 3643: 3643 3644: 3644 3645: 3645 3646: 3646 3647: 3647 3648: 3648 3649: 3649 3650: 3650 3651: 3651 3652: 3652 3653: 3653 3654: 3654 3655: 3655 3656: 3656 3657: 3657 3658: 3658 3659: 3659 3660: 3660 3661: 3661 3662: 3662 3663: 3663 3664: 3664 3665: 3665 3666: 3666 3667: 3667 3668: 3668 3669: 3669 3670: 3670 3671: 3671 3672: 3672 3673: 3673 3674: 3674 3675: 3675 3676: 3676 3677: 3677 3678: 3678 3679: 3679 3680: 3680 3681: 3681 3682: 3682 3683: 3683 3684: 3684 3685: 3685 3686: 3686 3687: 3687 3688: 3688 3689: 3689 3690: 3690 3691: 3691 3692: 3692 3693: 3693 3694: 3694 3695: 3695 3696: 3696 3697: 3697 3698: 3698 3699: 3699 3700: 3700 3701: 3701 3702: 3702 3703: 3703 3704: 3704 3705: 3705 3706: 3706 3707: 3707 3708: 3708 3709: 3709 3710: 3710 3711: 3711 3712: 3712 3713: 3713 3714: 3714 3715: 3715 3716: 3716 3717: 3717 3718: 3718 3719: 3719 3720: 3720 3721: 3721 3722: 3722 3723: 3723 3724: 3724 3725: 3725 3726: 3726 3727: 3727 3728: 3728 3729: 3729 3730: 3730 3731: 3731 3732: 3732 3733: 3733 3734: 3734 3735: 3735 3736: 3736 3737: 3737 3738: 3738 3739: 3739 3740: 3740 3741: 3741 3742: 3742 3743: 3743 3744: 3744 3745: 3745 3746: 3746 3747: 3747 3748: 3748 3749: 3749 3750: 3750 3751: 3751 3752: 3752 3753: 3753 3754: 3754 3755: 3755 3756: 3756 3757: 3757 3758: 3758 3759: 3759 3760: 3760 3761: 3761 3762: 3762 3763: 3763 3764: 3764 3765: 3765 3766: 3766 3767: 3767 3768: 3768 3769: 3769 3770: 3770 3771: 3771 3772: 3772 3773: 3773 3774: 3774 3775: 3775 3776: 3776 3777: 3777 3778: 3778 3779: 3779 3780: 3780 3781: 3781 3782: 3782 3783: 3783 3784: 3784 3785: 3785 3786: 3786 3787: 3787 3788: 3788 3789: 3789 3790: 3790 3791: 3791 3792: 3792 3793: 3793 3794: 3794 3795: 3795 3796: 3796 3797: 3797 3798: 3798 3799: 3799 3800: 3800 3801: 3801 3802: 3802 3803: 3803 3804: 3804 3805: 3805 3806: 3806 3807: 3807 3808: 3808 3809: 3809 3810: 3810 3811: 3811 3812: 3812 3813: 3813 3814: 3814 3815: 3815 3816: 3816 3817: 3817 3818: 3818 3819: 3819 3820: 3820 3821: 3821 3822: 3822 3823: 3823 3824: 3824 3825: 3825 3826: 3826 3827: 3827 3828: 3828 3829: 3829 3830: 3830 3831: 3831 3832: 3832 3833: 3833 3834: 3834 3835: 3835 3836: 3836 3837: 3837 3838: 3838 3839: 3839 3840: 3840 3841: 3841 3842: 3842 3843: 3843 3844: 3844 3845: 3845 3846: 3846 3847: 3847 3848: 3848 3849: 3849 3850: 3850 3851: 3851 3852: 3852 3853: 3853 3854: 3854 3855: 3855 3856: 3856 3857: 3857 3858: 3858 3859: 3859 3860: 3860 3861: 3861 3862: 3862 3863: 3863 3864: 3864 3865: 3865 3866: 3866 3867: 3867 3868: 3868 3869: 3869 3870: 3870 3871: 3871 3872: 3872 3873: 3873 3874: 3874 3875: 3875 3876: 3876 3877: 3877 3878: 3878 3879: 3879 3880: 3880 3881: 3881 3882: 3882 3883: 3883 3884: 3884 3885: 3885 3886: 3886 3887: 3887 3888: 3888 3889: 3889 3890: 3890 3891: 3891 3892: 3892 3893: 3893 3894: 3894 3895: 3895 3896: 3896 3897: 3897 3898: 3898 3899: 3899 3900: 3900 3901: 3901 3902: 3902 3903: 3903 3904: 3904 3905: 3905 3906: 3906 3907: 3907 3908: 3908 3909: 3909 3910: 3910 3911: 3911 3912: 3912 3913: 3913 3914: 3914 3915: 3915 3916: 3916 3917: 3917 3918: 3918 3919: 3919 3920: 3920 3921: 3921 3922: 3922 3923: 3923 3924: 3924 3925: 3925 3926: 3926 3927: 3927 3928: 3928 3929: 3929 3930: 3930 3931: 3931 3932: 3932 3933: 3933 3934: 3934 3935: 3935 3936: 3936 3937: 3937 3938: 3938 3939: 3939 3940: 3940 3941: 3941 3942: 3942 3943: 3943 3944: 3944 3945: 3945 3946: 3946 3947: 3947 3948: 3948 3949: 3949 3950: 3950 3951: 3951 3952: 3952 3953: 3953 3954: 3954 3955: 3955 3956: 3956 3957: 3957 3958: 3958 3959: 3959 3960: 3960 3961: 3961 3962: 3962 3963: 3963 3964: 3964 3965: 3965 3966: 3966 3967: 3967 3968: 3968 3969: 3969 3970: 3970 3971: 3971 3972: 3972 3973: 3973 3974: 3974 3975: 3975 3976: 3976 3977: 3977 3978: 3978 3979: 3979 3980: 3980 3981: 3981 3982: 3982 3983: 3983 3984: 3984 3985: 3985 3986: 3986 3987: 3987 3988: 3988 3989: 3989 3990: 3990 3991: 3991 3992: 3992 3993: 3993 3994: 3994 3995: 3995 3996: 3996 3997: 3997 3998: 3998 3999: 3999 4000: 4000 4001: 4001 4002: 4002 4003: 4003 4004: 4004 4005: 4005 4006: 4006 4007: 4007 4008: 4008 4009: 4009 4010: 4010 4011: 4011 4012: 4012 4013: 4013 4014: 4014 4015: 4015 4016: 4016 4017: 4017 4018: 4018 4019: 4019 4020: 4020 4021: 4021 4022: 4022 4023: 4023 4024: 4024 4025: 4025 4026: 4026 4027: 4027 4028: 4028 4029: 4029 4030: 4030 4031: 4031 4032: 4032 4033: 4033 4034: 4034 4035: 4035 4036: 4036 4037: 4037 4038: 4038 4039: 4039 4040: 4040 4041: 4041 4042: 4042 4043: 4043 4044: 4044 4045: 4045 4046: 4046 4047: 4047 4048: 4048 4049: 4049 4050: 4050 4051: 4051 4052: 4052 4053: 4053 4054: 4054 4055: 4055 4056: 4056 4057: 4057 4058: 4058 4059: 4059 4060: 4060 4061: 4061 4062: 4062 4063: 4063 4064: 4064 4065: 4065 4066: 4066 4067: 4067 4068: 4068 4069: 4069 4070: 4070 4071: 4071 4072: 4072 4073: 4073 4074: 4074 4075: 4075 4076: 4076 4077: 4077 4078: 4078 4079: 4079 4080: 4080 4081: 4081 4082: 4082 4083: 4083 4084: 4084 4085: 4085 4086: 4086 4087: 4087 4088: 4088 4089: 4089 4090: 4090 4091: 4091 4092: 4092 4093: 4093 4094: 4094 4095: 4095 4096: 4096 4097: 4097 4098: 4098 4099: 4099 4100: 4100 4101: 4101 4102: 4102 4103: 4103 4104: 4104 4105: 4105 4106: 4106 4107: 4107 4108: 4108 4109: 4109 4110: 4110 4111: 4111 4112: 4112 4113: 4113 4114: 4114 4115: 4115 4116: 4116 4117: 4117 4118: 4118 4119: 4119 4120: 4120 4121: 4121 4122: 4122 4123: 4123 4124: 4124 4125: 4125 4126: 4126 4127: 4127 4128: 4128 4129: 4129 4130: 4130 4131: 4131 4132: 4132 4133: 4133 4134: 4134 4135: 4135 4136: 4136 4137: 4137 4138: 4138 4139: 4139 4140: 4140 4141: 4141 4142: 4142 4143: 4143 4144: 4144 4145: 4145 4146: 4146 4147: 4147 4148: 4148 4149: 4149 4150: 4150 4151: 4151 4152: 4152 4153: 4153 4154: 4154 4155: 4155 4156: 4156 4157: 4157 4158: 4158 4159: 4159 4160: 4160 4161: 4161 4162: 4162 4163: 4163 4164: 4164 4165: 4165 4166: 4166 4167: 4167 4168: 4168 4169: 4169 4170: 4170 4171: 4171 4172: 4172 4173: 4173 4174: 4174 4175: 4175 4176: 4176 4177: 4177 4178: 4178 4179: 4179 4180: 4180 4181: 4181 4182: 4182 4183: 4183 4184: 4184 4185: 4185 4186: 4186 4187: 4187 4188: 4188 4189: 4189 4190: 4190 4191: 4191 4192: 4192 4193: 4193 4194: 4194 4195: 4195 4196: 4196 4197: 4197 4198: 4198 4199: 4199 4200: 4200 4201: 4201 4202: 4202 4203: 4203 4204: 4204 4205: 4205 4206: 4206 4207: 4207 4208: 4208 4209: 4209 4210: 4210 4211: 4211 4212: 4212 4213: 4213 4214: 4214 4215: 4215 4216: 4216 4217: 4217 4218: 4218 4219: 4219 4220: 4220 4221: 4221 4222: 4222 4223: 4223 4224: 4224 4225: 4225 4226: 4226 4227: 4227 4228: 4228 4229: 4229 4230: 4230 4231: 4231 4232: 4232 4233: 4233 4234: 4234 4235: 4235 4236: 4236 4237: 4237 4238: 4238 4239: 4239 4240: 4240 4241: 4241 4242: 4242 4243: 4243 4244: 4244 4245: 4245 4246: 4246 4247: 4247 4248: 4248 4249: 4249 4250: 4250 4251: 4251 4252: 4252 4253: 4253 4254: 4254 4255: 4255 4256: 4256 4257: 4257 4258: 4258 4259: 4259 4260: 4260 4261: 4261 4262: 4262 4263: 4263 4264: 4264 4265: 4265 4266: 4266 4267: 4267 4268: 4268 4269: 4269 4270: 4270 4271: 4271 4272: 4272 4273: 4273 4274: 4274 4275: 4275 4276: 4276 4277: 4277 4278: 4278 4279: 4279 4280: 4280 4281: 4281 4282: 4282 4283: 4283 4284: 4284 4285: 4285 4286: 4286 4287: 4287 4288: 4288 4289: 4289 4290: 4290 4291: 4291 4292: 4292 4293: 4293 4294: 4294 4295: 4295 4296: 4296 4297: 4297 4298: 4298 4299: 4299 4300: 4300 4301: 4301 4302: 4302 4303: 4303 4304: 4304 4305: 4305 4306: 4306 4307: 4307 4308: 4308 4309: 4309 4310: 4310 4311: 4311 4312: 4312 4313: 4313 4314: 4314 4315: 4315 4316: 4316 4317: 4317 4318: 4318 4319: 4319 4320: 4320 4321: 4321 4322: 4322 4323: 4323 4324: 4324 4325: 4325 4326: 4326 4327: 4327 4328: 4328 4329: 4329 4330: 4330 4331: 4331 4332: 4332 4333: 4333 4334: 4334 4335: 4335 4336: 4336 4337: 4337 4338: 4338 4339: 4339 4340: 4340 4341: 4341 4342: 4342 4343: 4343 4344: 4344 4345: 4345 4346: 4346 4347: 4347 4348: 4348 4349: 4349 4350: 4350 4351: 4351 4352: 4352 4353: 4353 4354: 4354 4355: 4355 4356: 4356 4357: 4357 4358: 4358 4359: 4359 4360: 4360 4361: 4361 4362: 4362 4363: 4363 4364: 4364 4365: 4365 4366: 4366 4367: 4367 4368: 4368 4369: 4369 4370: 4370 4371: 4371 4372: 4372 4373: 4373 4374: 4374 4375: 4375 4376: 4376 4377: 4377 4378: 4378 4379: 4379 4380: 4380 4381: 4381 4382: 4382 4383: 4383 4384: 4384 4385: 4385 4386: 4386 4387: 4387 4388: 4388 4389: 4389 4390: 4390 4391: 4391 4392: 4392 4393: 4393 4394: 4394 4395: 4395 4396: 4396 4397: 4397 4398: 4398 4399: 4399 4400: 4400 4401: 4401 4402: 4402 4403: 4403 4404: 4404 4405: 4405 4406: 4406 4407: 4407 4408: 4408 4409: 4409 4410: 4410 4411: 4411 4412: 4412 4413: 4413 4414: 4414 4415: 4415 4416: 4416 4417: 4417 4418: 4418 4419: 4419 4420: 4420 4421: 4421 4422: 4422 4423: 4423 4424: 4424 4425: 4425 4426: 4426 4427: 4427 4428: 4428 4429: 4429 4430: 4430 4431: 4431 4432: 4432 4433: 4433 4434: 4434 4435: 4435 4436: 4436 4437: 4437 4438: 4438 4439: 4439 4440: 4440 4441: 4441 4442: 4442 4443: 4443 4444: 4444 4445: 4445 4446: 4446 4447: 4447 4448: 4448 4449: 4449 4450: 4450 4451: 4451 4452: 4452 4453: 4453 4454: 4454 4455: 4455 4456: 4456 4457: 4457 4458: 4458 4459: 4459 4460: 4460 4461: 4461 4462: 4462 4463: 4463 4464: 4464 4465: 4465 4466: 4466 4467: 4467 4468: 4468 4469: 4469 4470: 4470 4471: 4471 4472: 4472 4473: 4473 4474: 4474 4475: 4475 4476: 4476 4477: 4477 4478: 4478 4479: 4479 4480: 4480 4481: 4481 4482: 4482 4483: 4483 4484: 4484 4485: 4485 4486: 4486 4487: 4487 4488: 4488 4489: 4489 4490: 4490 4491: 4491 4492: 4492 4493: 4493 4494: 4494 4495: 4495 4496: 4496 4497: 4497 4498: 4498 4499: 4499 4500: 4500 4501: 4501 4502: 4502 4503: 4503 4504: 4504 4505: 4505 4506: 4506 4507: 4507 4508: 4508 4509: 4509 4510: 4510 4511: 4511 4512: 4512 4513: 4513 4514: 4514 4515: 4515 4516: 4516 4517: 4517 4518: 4518 4519: 4519 4520: 4520 4521: 4521 4522: 4522 4523: 4523 4524: 4524 4525: 4525 4526: 4526 4527: 4527 4528: 4528 4529: 4529 4530: 4530 4531: 4531 4532: 4532 4533: 4533 4534: 4534 4535: 4535 4536: 4536 4537: 4537 4538: 4538 4539: 4539 4540: 4540 4541: 4541 4542: 4542 4543: 4543 4544: 4544 4545: 4545 4546: 4546 4547: 4547 4548: 4548 4549: 4549 4550: 4550 4551: 4551 4552: 4552 4553: 4553 4554: 4554 4555: 4555 4556: 4556 4557: 4557 4558: 4558 4559: 4559 4560: 4560 4561: 4561 4562: 4562 4563: 4563 4564: 4564 4565: 4565 4566: 4566 4567: 4567 4568: 4568 4569: 4569 4570: 4570 4571: 4571 4572: 4572 4573: 4573 4574: 4574 4575: 4575 4576: 4576 4577: 4577 4578: 4578 4579: 4579 4580: 4580 4581: 4581 4582: 4582 4583: 4583 4584: 4584 4585: 4585 4586: 4586 4587: 4587 4588: 4588 4589: 4589 4590: 4590 4591: 4591 4592: 4592 4593: 4593 4594: 4594 4595: 4595 4596: 4596 4597: 4597 4598: 4598 4599: 4599 4600: 4600 4601: 4601 4602: 4602 4603: 4603 4604: 4604 4605: 4605 4606: 4606 4607: 4607 4608: 4608 4609: 4609 4610: 4610 4611: 4611 4612: 4612 4613: 4613 4614: 4614 4615: 4615 4616: 4616 4617: 4617 4618: 4618 4619: 4619 4620: 4620 4621: 4621 4622: 4622 4623: 4623 4624: 4624 4625: 4625 4626: 4626 4627: 4627 4628: 4628 4629: 4629 4630: 4630 4631: 4631 4632: 4632 4633: 4633 4634: 4634 4635: 4635 4636: 4636 4637: 4637 4638: 4638 4639: 4639 4640: 4640 4641: 4641 4642: 4642 4643: 4643 4644: 4644 4645: 4645 4646: 4646 4647: 4647 4648: 4648 4649: 4649 4650: 4650 4651: 4651 4652: 4652 4653: 4653 4654: 4654 4655: 4655 4656: 4656 4657: 4657 4658: 4658 4659: 4659 4660: 4660 4661: 4661 4662: 4662 4663: 4663 4664: 4664 4665: 4665 4666: 4666 4667: 4667 4668: 4668 4669: 4669 4670: 4670 4671: 4671 4672: 4672 4673: 4673 4674: 4674 4675: 4675 4676: 4676 4677: 4677 4678: 4678 4679: 4679 4680: 4680 4681: 4681 4682: 4682 4683: 4683 4684: 4684 4685: 4685 4686: 4686 4687: 4687 4688: 4688 4689: 4689 4690: 4690 4691: 4691 4692: 4692 4693: 4693 4694: 4694 4695: 4695 4696: 4696 4697: 4697 4698: 4698 4699: 4699 4700: 4700 4701: 4701 4702: 4702 4703: 4703 4704: 4704 4705: 4705 4706: 4706 4707: 4707 4708: 4708 4709: 4709 4710: 4710 4711: 4711 4712: 4712 4713: 4713 4714: 4714 4715: 4715 4716: 4716 4717: 4717 4718: 4718 4719: 4719 4720: 4720 4721: 4721 4722: 4722 4723: 4723 4724: 4724 4725: 4725 4726: 4726 4727: 4727 4728: 4728 4729: 4729 4730: 4730 4731: 4731 4732: 4732 4733: 4733 4734: 4734 4735: 4735 4736: 4736 4737: 4737 4738: 4738 4739: 4739 4740: 4740 4741: 4741 4742: 4742 4743: 4743 4744: 4744 4745: 4745 4746: 4746 4747: 4747 4748: 4748 4749: 4749 4750: 4750 4751: 4751 4752: 4752 4753: 4753 4754: 4754 4755: 4755 4756: 4756 4757: 4757 4758: 4758 4759: 4759 4760: 4760 4761: 4761 4762: 4762 4763: 4763 4764: 4764 4765: 4765 4766: 4766 4767: 4767 4768: 4768 4769: 4769 4770: 4770 4771: 4771 4772: 4772 4773: 4773 4774: 4774 4775: 4775 4776: 4776 4777: 4777 4778: 4778 4779: 4779 4780: 4780 4781: 4781 4782: 4782 4783: 4783 4784: 4784 4785: 4785 4786: 4786 4787: 4787 4788: 4788 4789: 4789 4790: 4790 4791: 4791 4792: 4792 4793: 4793 4794: 4794 4795: 4795 4796: 4796 4797: 4797 4798: 4798 4799: 4799 4800: 4800 4801: 4801 4802: 4802 4803: 4803 4804: 4804 4805: 4805 4806: 4806 4807: 4807 4808: 4808 4809: 4809 4810: 4810 4811: 4811 4812: 4812 4813: 4813 4814: 4814 4815: 4815 4816: 4816 4817: 4817 4818: 4818 4819: 4819 4820: 4820 4821: 4821 4822: 4822 4823: 4823 4824: 4824 4825: 4825 4826: 4826 4827: 4827 4828: 4828 4829: 4829 4830: 4830 4831: 4831 4832: 4832 4833: 4833 4834: 4834 4835: 4835 4836: 4836 4837: 4837 4838: 4838 4839: 4839 4840: 4840 4841: 4841 4842: 4842 4843: 4843 4844: 4844 4845: 4845 4846: 4846 4847: 4847 4848: 4848 4849: 4849 4850: 4850 4851: 4851 4852: 4852 4853: 4853 4854: 4854 4855: 4855 4856: 4856 4857: 4857 4858: 4858 4859: 4859 4860: 4860 4861: 4861 4862: 4862 4863: 4863 4864: 4864 4865: 4865 4866: 4866 4867: 4867 4868: 4868 4869: 4869 4870: 4870 4871: 4871 4872: 4872 4873: 4873 4874: 4874 4875: 4875 4876: 4876 4877: 4877 4878: 4878 4879: 4879 4880: 4880 4881: 4881 4882: 4882 4883: 4883 4884: 4884 4885: 4885 4886: 4886 4887: 4887 4888: 4888 4889: 4889 4890: 4890 4891: 4891 4892: 4892 4893: 4893 4894: 4894 4895: 4895 4896: 4896 4897: 4897 4898: 4898 4899: 4899 4900: 4900 4901: 4901 4902: 4902 4903: 4903 4904: 4904 4905: 4905 4906: 4906 4907: 4907 4908: 4908 4909: 4909 4910: 4910 4911: 4911 4912: 4912 4913: 4913 4914: 4914 4915: 4915 4916: 4916 4917: 4917 4918: 4918 4919: 4919 4920: 4920 4921: 4921 4922: 4922 4923: 4923 4924: 4924 4925: 4925 4926: 4926 4927: 4927 4928: 4928 4929: 4929 4930: 4930 4931: 4931 4932: 4932 4933: 4933 4934: 4934 4935: 4935 4936: 4936 4937: 4937 4938: 4938 4939: 4939 4940: 4940 4941: 4941 4942: 4942 4943: 4943 4944: 4944 4945: 4945 4946: 4946 4947: 4947 4948: 4948 4949: 4949 4950: 4950 4951: 4951 4952: 4952 4953: 4953 4954: 4954 4955: 4955 4956: 4956 4957: 4957 4958: 4958 4959: 4959 4960: 4960 4961: 4961 4962: 4962 4963: 4963 4964: 4964 4965: 4965 4966: 4966 4967: 4967 4968: 4968 4969: 4969 4970: 4970 4971: 4971 4972: 4972 4973: 4973 4974: 4974 4975: 4975 4976: 4976 4977: 4977 4978: 4978 4979: 4979 4980: 4980 4981: 4981 4982: 4982 4983: 4983 4984: 4984 4985: 4985 4986: 4986 4987: 4987 4988: 4988 4989: 4989 4990: 4990 4991: 4991 4992: 4992 4993: 4993 4994: 4994 4995: 4995 4996: 4996 4997: 4997 4998: 4998 4999: 4999 .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/04/hashmap.html",
            "relUrl": "/tri3/2023/04/04/hashmap.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Checkpoint",
            "content": "/** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail tail.setPrevNode(this.tail); this.tail = tail; // update tail } } public void addList(T[] lists) { for (T data : lists) { this.add(data); } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } /** * Changes the head * */ public void setHead(LinkedList&lt;T&gt; h) { this.head = h; } /** * Returns size of queue * * @return size of queue */ public int size() { int sz = 0; for (T e: this) { sz++; } return sz; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;count: &quot; + count + &quot;, data: &quot; + str; } } . Generic Class . abstract class Sorter&lt;T&gt; { String name; double stime; double etime; double difftime; int compares; int swaps; public Sorter(String name) { this.name = name; } abstract public Queue&lt;T&gt; sort(Queue&lt;T&gt; list, boolean verbose); public Queue&lt;T&gt; sort(Queue&lt;T&gt; list) { return this.sort(list, true); } public void start() { this.stime = System.nanoTime(); } public void end() { this.etime = System.nanoTime(); } public double elapsedtime() { difftime = etime - stime; return difftime; } public void incrementcompare() { compares ++; } public void incrementswap() { swaps ++; } public int printcomp() { return this.compares; } public int printswap() { return this.swaps; } } . Bubble . class BubbleSorter&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public BubbleSorter() { super(&quot;Bubble Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q, boolean verbose) { super.start(); boolean swapped = true; LinkedList&lt;T&gt; head = q.getHead(); while (swapped) { swapped = false; LinkedList&lt;T&gt; current = head; while (current.getNext() != null) { if (current.getData().compareTo(current.getNext().getData()) &gt; 0) { T temp = current.getNext().getData(); current.getNext().setData(current.getData()); current.setData(temp); swapped = true; super.incrementswap(); } super.incrementcompare(); current = current.getNext(); } if (verbose) System.out.println(&quot;Intermediate: &quot; + q); } super.end(); return q; } } . public class Tester { public static void main (String[] args) { List&lt;Sorter&lt;Integer&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Integer&gt;&gt;(); sorters.add(new BubbleSorter&lt;&gt;()); Integer[] arr = {10, 1, 3, 2, 5}; for (Sorter i : sorters) { Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); q.addList(arr); System.out.println(&quot;Bubble&quot;); System.out.println(i.sort(q)); System.out.println(&quot;Elapsed time: &quot; + i.elapsedtime() + &quot;ns&quot;); System.out.println(&quot;Number of compares: &quot; + i.printcomp()); System.out.println(&quot;Number of swaps: &quot; + i.printswap()); System.out.println(); } System.out.println(); } } Tester.main(null); . Bubble Intermediate: count: 5, data: 1 3 2 5 10 Intermediate: count: 5, data: 1 2 3 5 10 Intermediate: count: 5, data: 1 2 3 5 10 count: 5, data: 1 2 3 5 10 Elapsed time: 1320500.0ns Number of compares: 12 Number of swaps: 5 . class Selection&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public Selection() { super(&quot;Selection Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q, boolean verbose) { super.start(); boolean swapped = true; LinkedList&lt;T&gt; current = q.getHead(); while (current.getNext() != null) { LinkedList&lt;T&gt; currentnext = current.getNext(); LinkedList&lt;T&gt; min = current; while (currentnext != null) { if (min.getData().compareTo(currentnext.getData()) &gt; 0) { min = currentnext; } currentnext = currentnext.getNext(); super.incrementcompare(); } T temp = min.getData(); min.setData(current.getData()); current.setData(temp); super.incrementswap(); current = current.getNext(); } super.end(); return q; } } . public class Tester { public static void main (String[] args) { List&lt;Sorter&lt;Integer&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Integer&gt;&gt;(); sorters.add(new Selection&lt;&gt;()); Integer[] arr = {10, 1, 3, 2, 5}; for (Sorter i : sorters) { Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); q.addList(arr); System.out.println(&quot;Selection&quot;); System.out.println(i.sort(q)); System.out.println(&quot;Elapsed time: &quot; + i.elapsedtime() + &quot;ns&quot;); System.out.println(&quot;Number of compares: &quot; + i.printcomp()); System.out.println(&quot;Number of swaps: &quot; + i.printswap()); System.out.println(); } System.out.println(); } } Tester.main(null); . Selection count: 5, data: 1 2 3 5 10 Elapsed time: 34100.0ns Number of compares: 10 Number of swaps: 4 . class Insertion&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public Insertion() { super(&quot;Insertion Sort&quot;); } public Queue&lt;T&gt; sort(Queue&lt;T&gt; q, boolean verbose) { super.start(); LinkedList&lt;T&gt; current = q.getHead().getNext(); while (current != null) { LinkedList&lt;T&gt; current2 = current; while (current2.getPrevious() != null &amp;&amp; current2.getPrevious().getData().compareTo(current2.getData()) &gt; 0) { T temp = current2.getPrevious().getData(); current2.getPrevious().setData(current2.getData()); current2.setData(temp); super.incrementswap(); current2 = current2.getPrevious(); } current = current.getNext(); super.incrementcompare(); } super.end(); return q; } } . public class Tester { public static void main (String[] args) { List&lt;Sorter&lt;Integer&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Integer&gt;&gt;(); sorters.add(new Insertion&lt;&gt;()); Integer[] arr = {10, 1, 3, 2, 5}; for (Sorter i : sorters) { Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); q.addList(arr); System.out.println(&quot;Insertion&quot;); System.out.println(i.sort(q)); System.out.println(&quot;Elapsed time: &quot; + i.elapsedtime() + &quot;ns&quot;); System.out.println(&quot;Number of compares: &quot; + i.printcomp()); System.out.println(&quot;Number of swaps: &quot; + i.printswap()); System.out.println(); } System.out.println(); } } Tester.main(null); . Insertion count: 5, data: 1 2 3 5 10 Elapsed time: 26200.0ns Number of compares: 4 Number of swaps: 5 . class Merge&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public Queue&lt;T&gt; sort(Queue&lt;T&gt; q, boolean verbose) { super.start(); LinkedList&lt;T&gt; current = q.getHead().getNext(); while (current != null) { LinkedList&lt;T&gt; current2 = current; while (current2.getPrevious() != null &amp;&amp; current2.getPrevious().getData().compareTo(current2.getData()) &gt; 0) { T temp = current2.getPrevious().getData(); current2.getPrevious().setData(current2.getData()); current2.setData(temp); super.incrementswap(); current2 = current2.getPrevious(); } current = current.getNext(); super.incrementcompare(); } super.end(); return q; } } . public class Tester { public static void main (String[] args) { List&lt;Sorter&lt;Integer&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Integer&gt;&gt;(); sorters.add(new Merge&lt;&gt;()); Integer[] arr = {10, 1, 3, 2, 5}; for (Sorter i : sorters) { Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); q.addList(arr); System.out.println(&quot;Merge&quot;); System.out.println(i.sort(q)); System.out.println(&quot;Elapsed time: &quot; + i.elapsedtime() + &quot;ns&quot;); System.out.println(&quot;Number of compares: &quot; + i.printcomp()); System.out.println(&quot;Number of swaps: &quot; + i.printswap()); System.out.println(); } System.out.println(); } } Tester.main(null); .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/02/checkpoint3.html",
            "relUrl": "/tri3/2023/04/02/checkpoint3.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "CSU notes",
            "content": "Our stories . failed Calc and physics but kept on persuing | got PHD | cal state opened lots of doors | | . Fun facts . newer University | new engineer bulding | national leader in social mobility | easy to get internships | . Pathways . Chem | biochem | apploed physics | electronics | bio | comp sci | cyber | comp eng | . Departments . physics | chem | biotech | math | comp sci | . Clubs . cybersecurity club | robotics | 3D printing | . Internships . network | join clubs | check emails | . Programs . Summer scholars program - do research with a professor | Quantam - $1500 + learn quantaum science | . Reflection . It was very cool learning each of their journeys and how CSU opened so many doors. Although I don&#39;t plan on going to CSU, I learned lots of great advice on loans and scholarships. It was also interesting learning how much their internships paid them. Overall, this was a cool oppurtunity to learn about the college experiece from current college students! .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/28/csunotes.html",
            "relUrl": "/tri3/2023/03/28/csunotes.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Sorts and Algo Rhythmic",
            "content": "Bubble Sort . public class Sorts { //bubble public void Bubble(int arr[]) { int n = arr.length; int t; for (int j = 0; j &lt; n - 1; j++) { for (int i = 0; i &lt; n - 1 - j; i++) { if (arr[i] &gt; arr[i + 1]) { t = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = t; } } } } //selection public void Selection(int arr[]) { int n = arr.length; int t; int min; int k; for (int j = 0; j &lt; n - 1; j++) { min = arr[j]; k = j; for (int i = j + 1; i &lt; n; i++) { if (min &gt; arr[i]) { min = arr[i]; k = i; } } if (k != j) { t = arr[j]; arr[j] = arr[k]; arr[k] = t; } } } //insertion public void Insertion(int arr[]) { } public static void main(String args[]) { Sorts obj = new Sorts(); int arr[] = {2, 1, 8, 4, 7}; obj.Bubble(arr); // obj.Selection(arr); int n = arr.length; System.out.println(&quot;Bubble:&quot;); for (int i = 0; i &lt; n; ++i) { System.out.print(arr[i] + &quot; &quot;); } System.out.println(); Sorts obj2 = new Sorts(); int arr2[] = {2, 1, 8, 4, 7}; obj.Selection(arr2); int m = arr2.length; System.out.println(&quot;Selection:&quot;); for (int i = 0; i &lt; m; ++i) { System.out.print(arr2[i] + &quot; &quot;); } System.out.println(); } } Sorts.main(null); . Bubble: 1 2 4 7 8 Selection: 1 2 4 7 8 .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/26/sorts.html",
            "relUrl": "/tri3/2023/03/26/sorts.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Collections Hacks",
            "content": "CB Vid . An access modifier is a keyword that determines the accessibility of a class, method, or variable. In Java, there are four access modifiers: public, protected, private, and default. Public classes, methods, and variables can be accessed from anywhere, while private ones can only be accessed within the same class. Protected ones can be accessed within the same package or through inheritance, and default ones can be accessed within the same package. | A constructor is a special method that is used to initialize objects of a class. It has the same name as the class and doesn&#39;t have a return type. Constructors can have parameters or no parameters, and they are called automatically when an object is created using the &quot;new&quot; keyword. | Modifiers are methods that are used to modify the values of the variables of a class. They can be public or private, and they are used to encapsulate the class by hiding the internal details. Modifiers can also have validation checks to ensure that the values are within certain limits. | Getters are methods that are used to retrieve the values of the variables of a class. They are used to encapsulate the class by hiding the internal details, and they are usually public. Getters can also be used to return calculated values based on the variables of the class. | Variables are used to store data within a class. They can be of different data types, such as int, double, String, and so on. Variables can also have different access modifiers, such as public, private, protected, and default. | Methods are functions that are defined within a class. They can be used to perform operations on the variables of the class, and they can also be used to return values. Methods can have parameters or no parameters, and they can be public or private. | . Hack Challenge #1 . public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { private LinkedList&lt;T&gt; head = null; private LinkedList&lt;T&gt; tail = null; private int wordCount = 0; public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) { // initial condition this.head = this.tail = tail; } else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } wordCount++; System.out.printf(&quot;Enqueued data: %s n&quot;, data); System.out.printf(&quot;Words count: %d, data: %s n&quot;, wordCount, this.toString()); } public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(null); } } wordCount--; System.out.printf(&quot;Dequeued data: %s n&quot;, data); System.out.printf(&quot;Words count: %d, data: %s n&quot;, wordCount, this.toString()); return data; } public T peek() { return this.head.getData(); } public LinkedList&lt;T&gt; getHead() { return this.head; } public LinkedList&lt;T&gt; getTail() { return this.tail; } public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } public String toString() { StringBuilder sb = new StringBuilder(); LinkedList&lt;T&gt; current = head; while (current != null) { sb.append(current.getData().toString()); sb.append(&quot; &quot;); current = current.getNext(); } return sb.toString().trim(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); // qWords.queue.add(&quot;Test&quot;); // qWords.queue.delete(&quot;seven&quot;); qWords.printQueue(); } } QueueTester.main(null); . Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/19/dscollections.html",
            "relUrl": "/tri3/2023/03/19/dscollections.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Checkpoint 1",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class User extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { User.key = key; } public enum KeyType implements KeyTypes {title, uid, password, name, points} // Instance data private final String uid; // user / person id private final String password; private final String name; private final int points; /* constructor * */ public User(String uid, String password, String name, int points) { super.setType(&quot;User&quot;); this.uid = uid; this.password = password; this.name = name; this.points = points; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return User.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.uid.equals(this.getKey())) { output += this.uid; } else if (KeyType.password.equals(this.getKey())) { output += this.password; } else if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.points.equals(this.getKey())) { output += this.points; } else { output += super.getType() + &quot;: &quot; + this.uid + &quot;, &quot; + this.password + &quot;, &quot; + this.name + &quot;, &quot; + this.points; } return output; } // Test data initializer public static User[] Users() { return new User[]{ new User(&quot;1&quot;, &quot;CyberPatriot1!&quot;, &quot;William&quot;, 20), new User(&quot;2&quot;, &quot;Password1!&quot;, &quot;Aidan&quot;, 5) }; } /* main to test User class * */ public static void main(String[] args) { // Inheritance Hierarchy User[] objs = Users(); // print with title User.setOrder(KeyType.title); User.print(objs); // print name only User.setOrder(KeyType.name); User.print(objs); } } User.main(null); . class [LREPL.$JShell$15B$User; 2 Generic: User listed by title User: 1, CyberPatriot1!, William, 20 User: 2, Password1!, Aidan, 5 class [LREPL.$JShell$15B$User; 2 Generic: User listed by name William Aidan . Challenge 2 . // Create iterable Queue of Integers Queue&lt;Object&gt; queue1 = new LinkedList&lt;&gt;(); queue1.add(1); queue1.add(4); queue1.add(5); queue1.add(8); Queue&lt;Object&gt; queue2 = new LinkedList&lt;&gt;(); queue2.add(2); queue2.add(3); queue2.add(6); queue2.add(7); System.out.println(&quot;Queue 1&quot;); System.out.println(queue1); System.out.println(&quot;Queue 2&quot;); System.out.println(queue2); Queue&lt;Object&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) { Object num1 = queue1.peek(); Object num2 = queue2.peek(); if ((int) num1 &lt; (int) num2) { mergedQueue.add(num1); queue1.remove(); } else { mergedQueue.add(num2); queue2.remove(); } } while (!queue1.isEmpty()) { mergedQueue.add(queue1.peek()); queue1.remove(); } while (!queue2.isEmpty()) { mergedQueue.add(queue2.peek()); queue2.remove(); } System.out.println(&quot;Merged Queue&quot;); System.out.println(mergedQueue); . Queue 1 [1, 4, 5, 8] Queue 2 [2, 3, 6, 7] Merged Queue [1, 2, 3, 4, 5, 6, 7, 8] .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/19/checkpoint1.html",
            "relUrl": "/tri3/2023/03/19/checkpoint1.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Types Hacks",
            "content": "Primatives . // int int[] intArray = new int[5]; for (int i=0; i&lt;intArray.length; i++) { intArray[i] = (int) (Math.random() *10); System.out.println(intArray[i]); } . 1 4 6 5 3 . // double double[] doubleArray = new double[5]; for (int i=0; i&lt;intArray.length; i++) { doubleArray[i] = (Math.random() *10); System.out.println(doubleArray[i]); } double d1 = 1.23; double d2 = 1.23; System.out.println(d1==d2); . 7.301043248071254 3.9008856742247797 9.461633641089941 6.668201382560991 0.853542092221744 true . //bool boolean tof = true; if (tof) { System.out.println(&quot;bool is true&quot;); } . bool is true . //char char letter = &#39;h&#39;; char letter2 = &#39;e&#39;; char letter3 = &#39;l&#39;; char letter4 = &#39;o&#39;; String word = &quot;&quot; + letter + letter2 + letter3 + letter3 + letter4; System.out.println(word); . hello . Wrapper Class . //Integer Integer[] intArray = new Integer[5]; for (int i = 0; i &lt; intArray.length; i++) { intArray[i] = (int) (Math.random() * 10); System.out.println(intArray[i]); } . 2 5 7 4 3 . // double double[] doubleArray = new double[5]; for (int i=0; i&lt;intArray.length; i++) { doubleArray[i] = (Math.random() *10); System.out.println(doubleArray[i]); } Double d3 = 1.23; Double d4 = 1.23; System.out.println(d3==d4); . 7.5698481641159185 2.086576518913615 8.956948380868376 7.035930903235372 2.0862771279196535 false . //Boolean Boolean b1 = Boolean.TRUE; Boolean b2 = Boolean.FALSE; Boolean b3 = true; System.out.println(b1); System.out.println(b2); System.out.println(b3); . true false true . //Character Character letter = &#39;h&#39;; Character letter2 = &#39;e&#39;; Character letter3 = &#39;l&#39;; Character letter4 = &#39;o&#39;; String word = new StringBuilder().append(letter).append(letter2).append(letter3).append(letter3).append(letter4).toString(); System.out.println(word); . hello . Methods and Control Structures . Methods take in an input and output a value. They can be called from other parts of the code. . Control Structures allow users to specify what actions occur in what conditions. Some examples inclue for loops and if else statements. . Diverse Arrays and Matrix include both methods and control strucutures. . For example, matrix includes the method String toString() and multiple for loops. . There are multiple data type examples in their code. Uses int and String. . Math.random . Math.random() * 10, random numbers between 0 and 10 (not includng 10) | returns double | if you want it in int add (int) to the front of Math.random() | . DoNothingByValue . Essentially this code shows the differenc between passing by value and by reference | the main method calls multiple methods with different paramteter types | integer array &quot;arr&quot; defined | inter value &quot;val&quot; defined | &quot;word&quot; defined as first 5 char of input string | all elements of arr set to 0 | print arr elememnts through for loop | changeIt essentially shows that passing parameters by value does not modify the original values of the variables. The method creates a new integer array of length 5, sets val to 0, and sets word to the first 5 characters of the input string. Then, it initializes all elements of the arr array to 0 and prints the array elements and word using a for loop. | changeIt2 has the same purpose as changeIt. It creates a new integer array of length 5, sets value to 0, and sets name to the first 5 characters of the input string. Then, it initializes all elements of the nums array to 0 and prints the array elements and name using a for loop. | changeIt3 and 4 both demonstrate that it is possible to change values by returning a new value. changeIt3 creates a new string that is the first 5 characters of the input string and initializes all elements of the arr array to 0. Then, it prints the array elements and the new string while changeIt4 creates a new integer array of length 5, sets the integer value to 0, and sets the string value to the first 5 characters of the input string. Then, it initializes all elements of the integer array to 0 and prints the array elements and the string. | . IntByReference . the method swapToLowHighOrder() basically swaps the value fiels of two objects if this.value &gt; i.value | the static swapper() method takes two integer arguments n0 and n1. This method creates two IntByReference objects, a and b, with n0 and n1 as their values, respectively. It then calls the swapToLowHighOrder() method on a, passing in b as an argument. Finally, it prints the values of a and b before and after the swap. | main() calls sweeper 3 times with different values | . Menu . Try is literally used to catch errors in a block of code | If there are errors in the try block, catch can catch the error and output an applicable error message to help debugging | Runnable is used to store a class-method to be run when a title is selected from a menu. It will be executed when the correspinding MenuRow object is selected. | .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/13/datahacks.html",
            "relUrl": "/tri3/2023/03/13/datahacks.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Binary Addition",
            "content": "String input0 = &quot;1&quot;; String input1 = &quot;1&quot;; int number0 = Integer.parseInt(input0, 2); int number1 = Integer.parseInt(input1, 2); int sum = number0 + number1; System.out.println(Integer.toBinaryString(sum)); . 10 . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 915254697 In changeAtomicInteger method Before change: n = 5 hash code = 915254697 After change: n = 15 hash code = 915254697 Main method after changeAtomicInteger(n): n = 15 hash code = 915254697 . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://willcyber.github.io/fastpages/tri2/2023/03/06/binaryaddition.html",
            "relUrl": "/tri2/2023/03/06/binaryaddition.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "55 MC",
            "content": "2 . Misunderstood the problem. didn&#39;t realize it would lead to a chain reaction . 6 . The algorithm uses a for-each loop to traverse the rows, the row index is not being stored. . 9 . System.out.println would not affect the str&#39;s length . 10 . I forgot that you concatanate with + and += . 25 . didn&#39;t see that the remove didn&#39;t occurr before the size was calculated . 33 . C is wrong because r is used as the row index in printing numbers[r][c] . 45 . Got this wronng because I was confused about what the code what doing. I now understand that it runs line 12 every time a new smallest value is found . 47 . I can&#39;t do math apparently. 2+2+3+8+5+6=26 . 50 . When j has the value 0, k takes on values from 0 through 2, inclusive and 1 2 3 is printed. When j has the value 1, k takes on the values 1 and 2 and 5 6 is printed. When j has the value 2, k takes on the value 2 and 9 is printed. When j has the value 3, the inner for loop body is not executed because the initial value of k (3) is not less than the number of elements in the first row of the array (3). .",
            "url": "https://willcyber.github.io/fastpages/tri2/2023/01/30/52mc.html",
            "relUrl": "/tri2/2023/01/30/52mc.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "66 MC",
            "content": "4, 9, 10, 16, 22, 24, 34, 38, 44, 45, 46, 50, 56, 59, 60, 63, 65, . 4 . This was just a dumb mistake. I was too focused on flipping the &amp;&amp; to || and forgot to add the ! to &quot;a&quot; and &quot;b&quot; | . 9 . Once again a dumb mistake. I had the right idea but picked the wrong answer. The top result will be affectected not the middle duh | . 10 . Once again a dumb mistake. I seem to always have the right idea but execute it wrong. I thought the if statements were &lt; instead of greater than | . 16 . Column is a variable so C would be wrong | . 22 . I misread the code. A is obv wrong because the code works fine if there is no A include in any of the rows. | . 24 . - .",
            "url": "https://willcyber.github.io/fastpages/tri2/2023/01/28/66mc.html",
            "relUrl": "/tri2/2023/01/28/66mc.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 6-10 Vocab",
            "content": "Unit 6 . Arrays are objects defined by type[] name = new type[size] or initialized with elements using type[] name = new type[]{a,b,c,...} | Loops an enhanced can iterate through arrays | Index goes from 0 to size-1 | Algorithms can be used to modify or get info about arrays | By default, each element in the array is value 0 | . int[] arraytest = new int[5]; int[] arraytest2 = {10, 9, 5, 2, 4}; . Bound Errors . // good arraytest[3]; . 0 . //bound error arraytest[5]; . java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5 at .(#17:1) . Uninitialized and Unfilled Arrays - Allocate a single array variable but not the whole array | Traversing an array - incrementing through the array and doing stuff | . for(int i = 0; i &lt; arraytest2.length; i++){ System.out.println(arraytest2[i]); } . 10 9 5 2 4 . Unit 7 . Wrapper class stores prim in objects | make sure to specify the data type | return arraylist using the return command | traverse arraylist through for loops and while loops | get() to get an element | size() to get size | . import java.util.ArrayList; ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;hi&quot;); list.add(&quot;hey&quot;); list.add(&quot;hello&quot;); list.add(&quot;nice&quot;); . true . System.out.println(list); . [hi, hey, hello, nice] . add(int index, element) . list.add(1, &quot;test&quot;); System.out.println(list); . [hi, test, hey, hello, nice] . addAll(int index, Collection collection) . ArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;(); list2.add(&quot;apple&quot;); list2.add(&quot;orange&quot;); list2.add(&quot;grape&quot;); list2.add(&quot;pineapple&quot;); System.out.println(list2); . [apple, orange, grape, pineapple] . list.addAll(3, list2); System.out.println(list); . [hi, test, hey, apple, orange, grape, pineapple, hello, nice] . size() . list.size(); . 9 . clear() . list2.clear(); System.out.println(list2); . [] . remove(int index) . list.remove(2); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice] . remove(element) . list.add(&quot;nice&quot;); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice, nice] . get(int index) . list.get(3); // first element is actually the 0th index . orange . set(int index, element) . list.set(4, new String(&quot;grapeskittlessuck?&quot;)); System.out.println(list); . [hi, test, apple, orange, grapeskittlessuck?, pineapple, hello, nice, nice] . Unit 8 . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array | Format: data type[][] name = new data type[num row][num column] | . Accessing an element . //Hack 1 public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . Traverse 2D arrays through Nested Loops . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Unit 9 . Inheritance useful because it is efficeint | don&#39;t need to define methods over and over again | extend from base class | base class -&gt; super class | protected is an access modifier so that the attribute isn&#39;t affected by outside modifiers | super keyword allows us to use constructors that we define in the superclass | sub and superclass can have some varying attributes | Overriding allows a subclass or child class to provide a specific implementation of a method that has already been provided by a super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type (or sub-type) as a method in its super-class, then the method in the subclass will override the method in the super-class | . public class School { protected double numberpencil; protected double numberpapaer; protected double numberscis; public School(double numberpencil, double numberpapaer, double numberscis) { this.numberpencil = numberpencil; this.numberpapaer = numberpapaer; this.numberscis = numberscis; } public void test() { System.out.println(&quot;test&quot;); } } . public class Math extends School { protected double numbercalc; public Math(double numberpencil, double numberpapaer, double numberscis, double numbercalc) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(numberpencil, numberpapaer, numberscis); } // hornSound is not in the Superclass, so we add it separately in the constructor @Override public void test () { System.out.println(&quot;tets test&quot;); } public static void main(String[] args) { // 5 argument constructor Math william = new Math(2, 3, 1, 5); william.test(); } } Math.main(null); . tets test . Polymorphism - methods with the same name that take in different parameters . public void turbo (int a) { System.out.println(&quot;Engaging turbo &quot; + a); } public void turbo (int a, int b) { System.out.println(&quot;Engaging turbo &quot; + a + &quot; and nitro &quot; + b); } . toString Method - Prints out the attributes of an object. Converts string objects into a string equals Method - Compares two strings . Unit 10 . a recursive method is a method that calls itself - a subproblem that calls itself repeatedly | contains a base and recursive call. | the base case is reached where recursion is stopped and a value is returned | base case should be written first to avoid infinite recursion | recursion uses function calls vs. iteration uses for and while loops | binary search - sorted in order to maximize efficiency | Linear recursion - only calls itself once | Selection sort - finds the minimum value | Merge sort - divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves | . class Factorial { static int factorial( int n ) { if (n != 0) // termination condition return n * factorial(n-1); // recursive call else return 1; } public static void main(String[] args) { int number = 4, result; result = factorial(number); System.out.println(number + &quot; factorial = &quot; + result); } } Factorial.main(null); . 4 factorial = 24 .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/14/vocab610.html",
            "relUrl": "/tri2/2022/12/14/vocab610.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "public class School { protected double numberpencil; protected double numberpapaer; protected double numberscis; public School(double numberpencil, double numberpapaer, double numberscis) { this.numberpencil = numberpencil; this.numberpapaer = numberpapaer; this.numberscis = numberscis; } public void test() { System.out.println(&quot;test&quot;); } } . public class Math extends School { protected double numbercalc; public Math(double numberpencil, double numberpapaer, double numberscis, double numbercalc) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(numberpencil, numberpapaer, numberscis); } // hornSound is not in the Superclass, so we add it separately in the constructor @Override public void test () { System.out.println(&quot;tets test&quot;); } public static void main(String[] args) { // 5 argument constructor Math william = new Math(2, 3, 1, 5); william.test(); } } Math.main(null); . tets test .",
            "url": "https://willcyber.github.io/fastpages/2022/12/13/unit9.html",
            "relUrl": "/2022/12/13/unit9.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Extracred",
            "content": "Kathyleen Beveridge . Born in Vietnam . | 1980 . | Bay area . | Undergrad at Santa Clara . | Study in spain . | Finance degree . | Not traditional edu . | Hp . | Career . First job investment banker . Did not like it . | . | Switched to tech . Loved . | Hp . | Qualcomm . | . | . | Company mission statement . HP: create technology that makes life better for everyone everywhere . | Qualcomm: Inventing the tech the world loves . | All doing something the world will want . | . | Qualcomm impacts a billion people a day . | Senior director of marketing . | Loved working with people . | Switched to high tech . | . Kris Porter . Software engineer . | SRE . | Dev Ops . | UCLA . | Started back in comp sci after 8 years . Learned linux . | . | Graduated in grad school . | No company was hiring cause stock awful . | Fixing mac comp . | Job at startup. Email marketing. Deploy software . | Worked at Twitter . | Taught himself python . | Projects . Streaming . | Analytics . | Banking systems . | . | Now planning to work at mystenlabs . | Predict what repo will be downloaded . | Skills that are important . Continuous learning . | Don’t be concerned about things you learn in the news . | . | Senior directors listen to requirements and think about how technology can solve these requirements . | Coding a wa/y of thinking: dissecting a problem, critcial think, problem solving . | AWS and google cloud . | .",
            "url": "https://willcyber.github.io/fastpages/2022/12/13/extracred.html",
            "relUrl": "/2022/12/13/extracred.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "FRQ4",
            "content": "public class LightBoard { private boolean[] [] lights; public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int i=0; i&lt;numRows; i++) { for (int j=0; j&lt;numCols; j++) { java.util.Random random = new java.util.Random(); double r = random.nextDouble(); if (r &lt; 0.4) { lights[i][j] = true; } else { lights[i][j] = false; } } } } } . public boolean evalulateLight(int row, int col) { } .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/10/frq4.html",
            "relUrl": "/tri2/2022/12/10/frq4.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 9",
            "content": "//Hack 1 public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); } arr[2][0] = &quot;Athens&quot;; } Test.main(null); . | arr[2][0] = &#34;Athens&#34;; &#39;]&#39; expected . public class Test { int longest = 0; public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); } for (String[] row : arr) { for (String[] item : row) { if (array[row][item].length() &gt; longest) { longest = array[row][item].length(); } } } System.out.println(longest); } Test.main(null); . | for (String[] row : arr) { illegal start of type | for (String[] row : arr) { &#39;;&#39; expected | for (String[] row : arr) { &lt;identifier&gt; expected | System.out.println(longest); &lt;identifier&gt; expected | System.out.println(longest); &lt;identifier&gt; expected . int height = 1; int spaceCounter = 0; int leafCounter = 0; String[][] tree = new String[height + 1][height * 2 ]; for (int i = 0; i &lt; tree.length; i++) { int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[height].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt;= maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else if (j % 2 != 0 &amp;&amp; leafCounter &lt;= maxLeaf) { tree[i][j] = &quot; &quot;; } else { tree[i][j] = &quot; &quot;; } } } System.out.println(tree); . [[Ljava.lang.String;@508f50cb .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/06/unit8.html",
            "relUrl": "/tri2/2022/12/06/unit8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 1-5 Vocab",
            "content": "Unit 1 . int, boolean, char, and double are primitives | Strings and other classes are objects | Compare primitives with == and objects with .equals() | Objects have properties while primitives do not | casting is when you assign a value of one primitive data type to another type. In integer division, the decimal is truncated. You need to use a double in order to keep the decimal | casting rounds down while Math.round rounds to the nearest int | . int a = 7; int b = 3; System.out.println(a/b); System.out.println((double)a/(double)b); . 2 2.3333333333333335 . Unit 2 . Objects are instances | Methods have to specify return type which can be void, or nothing | Static methods tied with the class and defined once across all instances | Method overloading is when multiple methods with the same name have different parameters | Wrapper classes allow you to use primatives as objects. One use case would be in arraylists, where only objects are stored. Ex: ArrayList myNumbers = new ArrayList(); &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; @Type(type=&quot;json&quot;) @Column(columnDefinition = &quot;jsonb&quot;) private Map&lt;String,Map&lt;String, Object&gt;&gt; stats = new HashMap&lt;&gt;(); public Integer height; public Integer weight; // Constructor used when building object from an API public Person(Integer weight, Date dob) { this.height = height; this.weight = weight; } . Concatanation is when you combine primatives together. For example, you would use the .append for combining two strings. You could use &quot;+&quot; to add together integers and doubles. You can concatanate a string with an integer through &quot;+&quot;. | . String a = &quot;test &quot;; String b = &quot;this&quot;; System.out.println(a+b); . test this . Math.round rounds to the nearest int | Math.random gives a random number between two numbers | . double a = 3.54; double b = 3.49; System.out.println(Math.round(a)); System.out.println(Math.round(b)); . 4 3 . Unit 3 . Compound boolean values uses logical operators AND and OR to evaulate an expression as true or false | . boolean t = true; boolean f = false; if (t) { System.out.println(&quot;1&quot;); } if (f) { System.out.println(&quot;2&quot;); } if (f &amp;&amp; !t) { System.out.println(&quot;3&quot;); } if (t &amp;&amp; !f) { System.out.println(&quot;4&quot;); } if (t || f) { System.out.println(&quot;5&quot;); } if (!t || !f) { System.out.println(&quot;6&quot;); } if ((t &amp;&amp; !f) &amp;&amp; (t || f)) { System.out.println(&quot;7&quot;); } if ((!t || (t &amp;&amp; f)) || t ) { System.out.println(&quot;8&quot;); } if (!((f || !t) || (f &amp;&amp; t))) { System.out.println(&quot;9&quot;); } if (!((f &amp;&amp; !t) || (f || t))) { System.out.println(&quot;10&quot;); } . 1 4 5 6 7 8 9 . Truth Tables used to see the values of boolean expressions | . De Morgan&#39;s Law is in essence, Not (A and B) is the same as Not A or Not B | Remember that &quot;!&quot; denotes Not. | . boolean test1 = true; boolean test2 = true; if (!(test1 &amp;&amp; test2)){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true&quot;); } . They are both true . boolean test1 = true; boolean test2 = true; if (!test1 || !test2){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true once again&quot;); } . They are both true once again . Unit 4 . For loops defines a variable that changes every loop and runs when the conditional is true | Enhanced for loop interates through the whole thing | in the format for (int i : arr) | . While loops run when conditional is true | Do While loop runs once no matter what and then checks conditionals | . int i=1; do{ System.out.println(i); i++; }while(i&lt;=10); . 1 2 3 4 5 6 7 8 9 10 . int i=11; do{ System.out.println(i); i++; }while(i&lt;=10); . 11 . nested loops are loops used inside each other | this can be seen in our monkey nursery rhyme thing | . Unit 5 . Classes have properties and methods | Properties store information about each object | private and public | Methods runs code | Getter and setter methods are coded to modify private attributes | . Classes are created using the class keyword and the first letter is capitalized | main method class is the tester. Automatically called | . public class Person { // automatic unique identifier for Person record @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // email, password, roles are key attributes to login and authentication @NotEmpty @Size(min=5) @Column(unique=true) @Email private String email; @NotEmpty private String password; // @NonNull, etc placed in params of constructor: &quot;@NonNull @Size(min = 2, max = 30, message = &quot;Name (2 to 30 chars)&quot;) String name&quot; @NonNull @Size(min = 2, max = 30, message = &quot;Name (2 to 30 chars)&quot;) private String name; @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) private Date dob; // inches public Integer height; public Integer weight; /* HashMap is used to store JSON for daily &quot;stats&quot; &quot;stats&quot;: { &quot;2022-11-13&quot;: { &quot;calories&quot;: 2200, &quot;steps&quot;: 8000 } } */ @Type(type=&quot;json&quot;) @Column(columnDefinition = &quot;jsonb&quot;) private Map&lt;String,Map&lt;String, Object&gt;&gt; stats = new HashMap&lt;&gt;(); // Constructor used when building object from an API public Person(String email, String password, String name, Integer height, Integer weight, Date dob) { this.email = email; this.password = password; this.name = name; this.dob = dob; this.height = height; this.weight = weight; } // A custom getter to return age from dob attribute public int getAge() { if (this.dob != null) { LocalDate birthDay = this.dob.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); return Period.between(birthDay, LocalDate.now()).getYears(); } return -1; } // note this is just an example. just doing bmi *10 public int numberofsteps() { int numberofsteps = (int) (weight/Math.pow(height, 2) *703 *10); return numberofsteps; } public String toString() { return ( &quot;{ &quot;email &quot;: &quot; +this.email+ &quot;, &quot; + &quot; &quot;password &quot;: &quot; +this.password+ &quot; &quot;name &quot;: &quot; +this.name+ &quot; &quot;height &quot;: &quot; +this.height+ &quot; &quot;weight &quot;: &quot; +this.weight+ &quot; &quot;dob &quot;: &quot; +this.dob+ &quot; }&quot; ); } public static void main(String[] args) throws ParseException { Date dob = new SimpleDateFormat(&quot;MM-dd-yyyy&quot;).parse(&quot;01-28-2006&quot;); //no arg Person test = new Person(); System.out.println(test); //arg Person test2 = new Person(&quot;wutwilliam@gmail.com&quot;, &quot;CyberPatriot1!&quot;, &quot;William Wu&quot;, 71, 180, dob); System.out.println(test2); System.out.println(test2.numberofsteps()); System.out.println(test2.toString()); } } . getters and setters can both be seen in use in this code | they get and set properties of an object | this keywords gets access to properties of the class | public = accessible anywhere | private = accessible only in its own class | static methods dont need an object. part of the class. only initialized once at the start of the execution | . public class Example { public static void ex() { System.out.println(&quot;no object needed&quot;); } public static void main(String[] args){ ex(); } } Example.main(null); . no object needed . extends in when a class is inherited from a different class | subclass = class that inherits | superclass = class inherited from | . public class Super { public void ex() { System.out.println(&quot;test output&quot;); } } . public class Sub extends Super { public static void main (String[] args) { Sub ex1 = new Sub(); ex1.ex(); } } Sub.main(null); . test output . toString() returns value to string. automatically ran. can be overrided | hashCode() returns the hash code of an object . | Polymorphism is when you have multiple methjods with the same name but different parameters. . | Overloading is when you have multiple methods with the same name but different parameters. | Overriding is when you have a method with the same name and parameters as a method in a superclass but you want to modify the method in the subclass. | Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. | Big O notation tells you the number of operations an algorithm will make. Determines efficiancy | . &lt;/div&gt; | .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/01/vocab15.html",
            "relUrl": "/tri2/2022/12/01/vocab15.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Title",
            "content": "//Hack 3 // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int value; for (int i : num) { value +=i; } System.out.println(value); . 9 .",
            "url": "https://willcyber.github.io/fastpages/2022/11/30/unit7.html",
            "relUrl": "/2022/11/30/unit7.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "FRQ1",
            "content": "// Prototype Implementation public class APCalendar { /** Returns true if year is a leap year and false otherwise. * isLeapYear(2019) returns False * isLeapYear(2016) returns True */ private static boolean isLeapYear(int year) { // implementation not shown return false; } /** Returns the value representing the day of the week * 0 denotes Sunday, * 1 denotes Monday, ..., * 6 denotes Saturday. * firstDayOfYear(2019) returns 2 for Tuesday. */ private static int firstDayOfYear(int year) { // implementation not shown return 0; } /** Returns n, where month, day, and year specify the nth day of the year. * This method accounts for whether year is a leap year. * dayOfYear(1, 1, 2019) return 1 * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. */ private static int dayOfYear(int month, int day, int year) { // implementation not shown return 1; } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { // to be implemented in part (a) return 0; } /** Returns the value representing the day of the week for the given date * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { // to be implemented in part (b) return 0; } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot;isLeapYear: &quot; + APCalendar.isLeapYear(2022)); System.out.println(&quot;firstDayOfYear: &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot;dayOfYear: &quot; + APCalendar.dayOfYear(1, 1, 2022)); // Public access modifiers System.out.println(&quot;numberOfLeapYears: &quot; + APCalendar.numberOfLeapYears(2000, 2022)); System.out.println(&quot;dayOfWeek: &quot; + APCalendar.dayOfWeek(1, 1, 2022)); } } .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/11/14/frq1.html",
            "relUrl": "/tri2/2022/11/14/frq1.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Notes",
            "content": "List of Vocab . Casting, specifically for Division | Casting, specifically for Truncating or Rounding | Wrapper Classes, why wrap int, double. Show examples | Concatenation, explain or illustrate rules on mixed type Concatenation | Math class, specifically Random usage | Compound Boolean Expression . | Truth Tables | De Morgan’s Law | Comparing Numbers | Comparing Strings | Comparing Objects | for loop, enhanced for loop | while loop versus do while loop | nested loops | Creating a Class, describe Naming Conventions | Constructor, describe why there is no return | Accessor methods, relationship to getter | Mutator methods, relationship to setter, describe void return type | Static variables, Class variables, show use case in code | Show use case of access modifiers: Public, Private, Protected | Static methods, Class methods | this Keyword | main method, tester methods | Inheritance, extends | Subclass constructor, super Keyword | Overloading a method, same name different parameters | Overriding a method, same signature of a method | Abstract Class, Abstract Method | Standard methods: toString(), equals(), hashCode() | Late binding of object, referencing superclass object, ie Animal a = new Chicken(); Animal b = new Goat(); | Polymorphism: any of overloading, overriding, late binding | Big O notation for Hash map, Binary Search, Single loop, Nested Loop | . Unit 1 . casting is when you assign a value of one primitive data type to another type. In integer division, the decimal is truncated. You need to use a double in order to keep the decimal | casting rounds down while Math.round rounds to the nearest int | . int, boolean, char, and double are primitives Strings and other classes are objects Compare primitives with == and objects with .equals() Objects have properties while primitives do not . Unit 2 . Wrapper classes allow you to use primatives as objects. One use case would be in arraylists, where only objects are stored. Ex: ArrayList myNumbers = new ArrayList(); | Concatanation is when you combine primatives together. For example, you would use the .append for combining two strings. You could use “+” to add together integers and doubles. You can concatanate a string with an integer through “+”. | Math.round rounds to the nearest int | Math.random gives a random number between two numbers | . Objects are instances Methods have to specify return type which can be void, or nothing Static methods tied with the class and defined once across all instances Method overloading is when multiple methods with the same name have different parameters . Unit 3 . Compound boolean values uses logical operators AND and OR to evaulate an expression as true or false | | . Unit 4 . While loops run when conditional is true For loops defines a variable that changes every loop and runs when the conditional is true Nested iteration can be good in situations Enhanced for loops can loop through all elements in an array but the array cannot be modified when it is looping . Unit 5 . Classes have properties and methods Properties store information about each object private and public Methods runs code Getter and setter methods are coded to modify private attributes . Unit 6 . Arrays are objects defined by type[] name = new type[size] or initialized with elements using type[] name = new type[]{a,b,c,…} Loops an enhanced can iterate through arrays Index goes from 0 to size-1 Algorithms can be used to modify or get info about arrays . Unit 7 . Wrapper class stores prim in objects | make sure to specify the data type | return arraylist using the return command | traverse arraylist through for loops and while loops | get() to get an element | size() to get size | .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/11/08/notes.html",
            "relUrl": "/markdown/2022/11/08/notes.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Final Blog",
            "content": "N@TM . Presented on our database quiz and api | Great experience talking with students and parents | Looked at studio arts and AP CSP projects Tested the Team Berries Dictionary | . | . . Recap of units . HW . Unit 1 HW . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Is the final in a seperate category? True to False&quot;); boolean tof = myObj.nextBoolean(); // Read user input System.out.println(&quot;Final in a seperate category is &quot; + tof); // Output user input if (tof) { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is % of grade that is final?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); double output = (desired - (grade * ((100-percent)/100)))/(percent/100); System.out.println(&quot;You need a &quot; + output + &quot; on your final&quot;); } else { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is the % of grade that is test category?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is current % in tests category?&quot;); double currentpercent = myObj.nextDouble(); System.out.println(currentpercent + &quot;%&quot;); System.out.println(&quot;What is the current amount of points in the test category?&quot;); int currentpts = myObj.nextInt(); System.out.println(currentpts); System.out.println(&quot;How many pts is the final?&quot;); int pts = myObj.nextInt(); System.out.println(pts); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); // double output = (desired - ((grade * currentpercent)*((100 - percent) / 100)))/((currentpts + pts)/(percent / 100))- currentpts; double output = ((desired - grade+currentpercent)*(currentpts+pts)-currentpts*currentpercent)/100; // double output = // desired = percent * // current grade = System.out.println(&quot;You need &quot; + output + &quot; pts on your final&quot;); } } } ScanPrimitives.main(null); . Is the final in a seperate category? True to False Final in a seperate category is true What is your current grade rn? 90.0 What is % of grade that is final? 25.0% What is your desired grade? 93.0 You need a 102.0 on your final . Unit 2 . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } . Unit 4 . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letterIndividual = &quot;&quot;; public CaesarCipher(String msg) { for (int i = 0; i &lt; msg.length(); i++) { letterIndividual = msg.substring(i, i+1); if (letterIndividual.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letterIndividual.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letterIndividual.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } if (letterIndividual.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null) . Nice job! code code code supercalifragilisticexpialidocious . Unit 5 . did the form mc with Lily | . public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 . Unit 6 . Not too sure what I was thinking. names[n] would be incorrect in a foreach loop . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(names[n], gradYear, true); memberList.add(member); } } . Revised . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(n, gradYear, true); memberList.add(member); } } . CB corrections . Score . #15 . misread the question. thought it wanted the array to be sorted in decreasing order | . #21 . We are trying to find the closest number so subtracting the row number will not make any sense. Not too sure why I chose E | . #22 . Need to use typecasting to let the compiler know that the object stored in the books array at this index is actually an AudioBook object. Didn&#39;t realize that there would be no compile error because igt will run the lengt() method in Audiobook because books[0] is in it | . #33 . ahhhh brain fart. somehow I thought that because sum would be eventually false, the loop will break. It will only break if they are both false, which will never happen because k will be constant. | . #40 . didn&#39;t see that it kept on calling whatsitdo | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/11/08/final_blog.html",
            "relUrl": "/jupyter/2022/11/08/final_blog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Practice",
            "content": "2015 frq . 1 a .",
            "url": "https://willcyber.github.io/fastpages/2022/10/26/recapofjava.html",
            "relUrl": "/2022/10/26/recapofjava.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "HW",
            "content": "// java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Is the final in a seperate category? True to False&quot;); boolean tof = myObj.nextBoolean(); // Read user input System.out.println(&quot;Final in a seperate category is &quot; + tof); // Output user input if (tof) { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is % of grade that is final?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); double output = (desired - (grade * ((100-percent)/100)))/(percent/100); System.out.println(&quot;You need a &quot; + output + &quot; on your final&quot;); } else { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is the % of grade that is test category?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is current % in tests category?&quot;); double currentpercent = myObj.nextDouble(); System.out.println(currentpercent + &quot;%&quot;); System.out.println(&quot;What is the current amount of points in the test category?&quot;); int currentpts = myObj.nextInt(); System.out.println(currentpts); System.out.println(&quot;How many pts is the final?&quot;); int pts = myObj.nextInt(); System.out.println(pts); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); // double output = (desired - ((grade * currentpercent)*((100 - percent) / 100)))/((currentpts + pts)/(percent / 100))- currentpts; double output = ((desired - grade+currentpercent)*(currentpts+pts)-currentpts*currentpercent)/100; // double output = // desired = percent * // current grade = System.out.println(&quot;You need &quot; + output + &quot; pts on your final&quot;); } } } ScanPrimitives.main(null); . Is the final in a seperate category? True to False Final in a seperate category is false What is your current grade rn? 93.0 What is % of grade that is test category? 30.0% What is current % in tests category? 90.0% What is the current amount of points in the test category? 100 How many pts is the final? 50 What is your desired grade? 90.0 You need 40.5 pts on your final .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/10/22/unit1hw.html",
            "relUrl": "/jupyter/2022/10/22/unit1hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Title",
            "content": "message = &quot;91 322 57 124 40 406 272 147 239 285 353 272 77 110 296 262 299 323 255 337 150 102&quot; alphabet = string.ascii_lowercase + string.digits + &quot;_&quot; FLAG = &quot;picoCTF{&quot; for i in message.split(): FLAG += alphabet[int(i) % 37] FLAG += &quot;}&quot; print(FLAG) . picoCTF{r0und_n_r0und_add17ec2} . import string message = &quot;104 290 356 313 262 337 354 229 146 297 118 373 221 359 338 321 288 79 214 277 131 190 377&quot; alphabet = string.ascii_lowercase + string.digits + &quot;_&quot; FLAG = &quot;picoCTF{&quot; for i in message.split(): FLAG += alphabet[pow(int(i), -1, 41) - 1] #pow(A, power, B) FLAG += &quot;}&quot; print(&quot;Flag:&quot;, FLAG) . Flag: picoCTF{1nv3r53ly_h4rd_8a05d939} . public class Party { private int boxesOfFood; private int numOfPeople; public Party(int people, int foodBoxes) { numOfPeople = people; boxesOfFood = foodBoxes; } public void orderMoreFood( int additionalFoodBoxes) { int updatedAmountOfFood; boxesOfFood = updatedAmountOfFood; } public void eatFoodBoxes(int eatenBoxes) { boxesOfFood = updatedAmountOfFood - eatenBoxes; } } . | boxesOfFood = updatedAmountOfFood - eatenBoxes; cannot find symbol symbol: variable updatedAmountOfFood | boxesOfFood = updatedAmountOfFood; variable updatedAmountOfFood might not have been initialized .",
            "url": "https://willcyber.github.io/fastpages/2022/10/22/ctf.html",
            "relUrl": "/2022/10/22/ctf.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Quiz",
            "content": "Question choiceA choiceB .",
            "url": "https://willcyber.github.io/fastpages/data/quiz",
            "relUrl": "/data/quiz",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Test",
            "content": "Joke HaHa Boohoo .",
            "url": "https://willcyber.github.io/fastpages/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Database video notes",
            "content": "Video Notes . Overview . Spring Data JPA: abstracts all complexity needed to interact with databases. Works well with spring boot applications | JPA (Java Persistance API): accessing, persisting, and managing data between java objects | Hibernate: a popular implementation of JPA. Basically takes any java object and extracts it with ORM (object relational mapping). Makes it so that we have a java class which we can map to a database | . Application.properties . spring.datasource.url: connection to database (specify name) | spring.datasource.username: username, don&#39;t needa specify since local rn | spring.datasource.password: password, don&#39;t needa specify since local rn | spring.jpa.hibernate.ddl-auto=create-drop: create the schema and before the application shuts down, drop everything. We need this since we are testing various stuff with spring data JPA | spring.jpa.show-sql=true: so we can see the sql statements that hibernate generates | spring.jpa.propertoes.hibernate.dialect=org.hibermate.dialect.PostgreSQLDialect: Specifying the dialect to be Postgresql | spring.jpa.propertoes.hibernate.format_sql=true: sql is formatted | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/10/08/databasenotes.html",
            "relUrl": "/jupyter/2022/10/08/databasenotes.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Arraylist",
            "content": "import java.util.ArrayList; ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;hi&quot;); list.add(&quot;hey&quot;); list.add(&quot;hello&quot;); list.add(&quot;nice&quot;); . true . System.out.println(list); . [hi, hey, hello, nice] . add(int index, element) . list.add(1, &quot;test&quot;); . System.out.println(list); . [hi, test, hey, hello, nice] . addAll(int index, Collection collection) . ArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;(); list2.add(&quot;apple&quot;); list2.add(&quot;orange&quot;); list2.add(&quot;grape&quot;); list2.add(&quot;pineapple&quot;); System.out.println(list2); . [apple, orange, grape, pineapple] . list.addAll(3, list2); System.out.println(list); . [hi, test, hey, apple, orange, grape, pineapple, hello, nice] . size() . list.size(); . 9 . list2.size(); . 4 . clear() . list2.clear(); System.out.println(list2); . [] . remove(int index) . list.remove(2); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice] . remove(element) . list.add(&quot;nice&quot;); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice, nice] . list.remove(&quot;nice&quot;); . true . System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice] . get(int index) . list.get(3); // first element is actually the 0th index . orange . set(int index, element) . list.set(4, new String(&quot;grapeskittlessuck?&quot;)); System.out.println(list); . [hi, test, apple, orange, grapeskittlessuck?, pineapple, hello, nice] . indexOf(element) . list.indexOf(&quot;orange&quot;); . 3 . list.indexOf(&quot;thisdoesntexist&quot;); . -1 . equals(element) . list.equals(&quot;doesnt equal&quot;); . false . hashCode() . list.hashCode(); . -872586150 . isEmpty() . list.isEmpty(); . false . ArrayList&lt;String&gt; empty = new ArrayList&lt;String&gt;(); empty.isEmpty(); . true .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/10/03/arraylist.html",
            "relUrl": "/jupyter/2022/10/03/arraylist.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Covid",
            "content": "Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Critical Cases Active Cases .",
            "url": "https://willcyber.github.io/fastpages/covidAPI",
            "relUrl": "/covidAPI",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Api",
            "content": "State Abbreviation Capital Population Population Density (by km) .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/10/02/api.html",
            "relUrl": "/markdown/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Title",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://jgentes-crime-data-v1.p.rapidapi.com/crime&quot;)) .header(&#39;X-RapidAPI-Key&#39;: &#39;99055c6785msh0eec04755216d76p1d458djsnf1bc6a1c3b66&#39;) .header(&#39;X-RapidAPI-Host&#39;: &#39;jgentes-Crime-Data-v1.p.rapidapi.com&#39;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.covid; illegal start of expression . OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(&quot;https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly?lat=35.5&amp;lon=-78.5&quot;) .get() .addHeader(&quot;X-RapidAPI-Key&quot;, &quot;99055c6785msh0eec04755216d76p1d458djsnf1bc6a1c3b66&quot;) .addHeader(&quot;X-RapidAPI-Host&quot;, &quot;weatherbit-v1-mashape.p.rapidapi.com&quot;) .build(); Response response = client.newCall(request).execute(); .",
            "url": "https://willcyber.github.io/fastpages/2022/09/28/rapidapi.html",
            "relUrl": "/2022/09/28/rapidapi.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Creating a table using JavaScript for the CSA Team Project",
            "content": ". .",
            "url": "https://willcyber.github.io/fastpages/js/2022/09/27/jstable.html",
            "relUrl": "/js/2022/09/27/jstable.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;-&quot;; } else if (g &gt;= 170) { str = &quot;*&quot;; } else if (g &gt;= 160) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;j&quot;; }else if (g &gt;= 140) { str = &quot;n&quot;; }else if (g &gt;= 130) { str = &quot;V&quot;; } else if (g &gt;= 120) { str = &quot;3&quot;; } else if (g &gt;= 110) { str = &quot;5&quot;; } else if (g &gt;= 100) { str = &quot;&amp;&quot;; } else if (g &gt;= 90) { str = &quot;g&quot;; }else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . Grey scale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; double r=0.299; double g=0.587; double b=0.114; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String changedFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.changedFile = this.outDir + name + &quot;Gray.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void grayscale() { BufferedImage img; try { File file = new File(this.changedFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed() * r); int green = (int)(col.getGreen() * g); int blue = (int)(col.getBlue() * b); Color rgb = new Color(red, green, blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.changedFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.grayscale(); } } Pics.main(null); . . Green . //green scale double r=0; double g=1; double b=0; Pics.main(null); . . Red . //red scale double r=1; double g=0; double b=0; Pics.main(null); . . Blue . //blue scale double r=0; double g=0; double b=1; Pics.main(null); . .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/27/images.html",
            "relUrl": "/jupyter/2022/09/27/images.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Morts code",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(8); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . public class FiboFor extends Fibo { public FiboFor() { super(); } public FiboFor(int nth) { super(nth); } @Override protected void init() { super.name = &quot;For Extends&quot;; long limit = this.size; // for loops are likely the most common iteration structure, all the looping facts are in one line for (long[] f = new long[]{0, 1}; limit-- &gt; 0; f = new long[]{f[1], f[0] + f[1]}) this.setData(f[0]); } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For Extends fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . public class FiboStream extends Fibo { public FiboStream() { super(); } public FiboStream(int nth) { super(nth); } @Override protected void init() { super.name = &quot;Stream Extends&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(super.size) .forEach(f -&gt; super.setData(f[0]) ); } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboStream fib = new FiboStream(); fib.print(); } } FiboStream.main(null); . Init method = Stream Extends fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] .",
            "url": "https://willcyber.github.io/fastpages/2022/09/27/abstractfib.html",
            "relUrl": "/2022/09/27/abstractfib.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Javascript",
            "content": "console.log(&quot;Test console&quot;); . Test console . var msg = &quot;Hello, World!&quot;; console.log(msg); function logIt(output) { console.log(output); } logIt(msg); . Hello, World! Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . function Person(name, class1, class2, class3, class4, class5) { this.name = name; this.class1 = class1; this.class2 = class2; this.class3 = class3; this.class4 = class4; this.class5 = class5; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;CSA&quot;, &quot;CSA&quot;, &quot;CSA&quot;, &quot;CSA&quot;, &quot;CSA&quot;); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, class1: &#39;CSA&#39;, class2: &#39;CSA&#39;, class3: &#39;CSA&#39;, class4: &#39;CSA&#39;, class5: &#39;CSA&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;} object ; Person { name: &#39;Mr M&#39;, class1: &#39;CSA&#39;, class2: &#39;CSA&#39;, class3: &#39;CSA&#39;, class4: &#39;CSA&#39;, class5: &#39;CSA&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;William&quot;, &quot;Bio&quot;, &quot;CSA&quot;, &quot;Stats&quot;, &quot;APUSH&quot;, &quot;APEL&quot;), new Person(&quot;Lily&quot;, &quot;APEL&quot;, &quot;CSA&quot;, &quot;Stats&quot;, &quot;APUSH&quot;, &quot;CSP&quot;), new Person(&quot;Vidhi&quot;, &quot;APEL&quot;, &quot;CSA&quot;, &quot;Physics&quot;, &quot;Hon Princ Eng&quot;, &quot;&quot;), new Person(&quot;Riya&quot;, &quot;Calc BC&quot;, &quot;CSA&quot;, &quot;Physics&quot;, &quot;APEL&quot;, &quot;&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, class1: &#39;CSA&#39;, class2: &#39;CSA&#39;, class3: &#39;CSA&#39;, class4: &#39;CSA&#39;, class5: &#39;CSA&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;William&#39;, class1: &#39;Bio&#39;, class2: &#39;CSA&#39;, class3: &#39;Stats&#39;, class4: &#39;APUSH&#39;, class5: &#39;APEL&#39;, role: &#39;Student&#39; }, Person { name: &#39;Lily&#39;, class1: &#39;APEL&#39;, class2: &#39;CSA&#39;, class3: &#39;Stats&#39;, class4: &#39;APUSH&#39;, class5: &#39;CSP&#39;, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, class1: &#39;APEL&#39;, class2: &#39;CSA&#39;, class3: &#39;Physics&#39;, class4: &#39;Hon Princ Eng&#39;, class5: &#39;&#39;, role: &#39;Student&#39; }, Person { name: &#39;Riya&#39;, class1: &#39;Calc BC&#39;, class2: &#39;CSA&#39;, class3: &#39;Physics&#39;, class4: &#39;APEL&#39;, class5: &#39;&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 1&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 2&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 3&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 4&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 5&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class1 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class2 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class3 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class4 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class5 + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameClass 1Class 2Class 3Class 4Class 5 . Mr M | CSA | CSA | CSA | CSA | CSA | William | Bio | CSA | Stats | APUSH | APEL | Lily | APEL | CSA | Stats | APUSH | CSP | Vidhi | APEL | CSA | Physics | Hon Princ Eng | | Riya | Calc BC | CSA | Physics | APEL | | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/25/javascript.html",
            "relUrl": "/jupyter/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Program and Design",
            "content": "Crime News . Local News | Safety Against Crime | National News | About page | . Team Wire frame . . . . .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/24/programdesign.html",
            "relUrl": "/jupyter/2022/09/24/programdesign.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Fibonacci",
            "content": "Old static loops . For Loops . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } public class Fibext extends Fibo { public void init() { super.name = &quot;For loop&quot;; int count = super.size; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } static public void main(String[] args) { long start = System.nanoTime(); Fibext fibF = new Fibext(); long end = System.nanoTime(); fibF.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } Fibext.main(null); . Init method = For loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 33100 ns . While Loop . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } public class Fibext extends Fibo { public void init() { super.name = &quot;While loop&quot;; int count = super.size; long[] nums = new long[]{0, 1}; int i = 0; while (i &lt; this.size) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; } } static public void main(String[] args) { long start = System.nanoTime(); Fibext fibF = new Fibext(); long end = System.nanoTime(); fibF.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } Fibext.main(null); . Init method = For loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 54100 ns . Recursion . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;recursion&quot;; recursiveLoop(0); } long[] nums = new long[]{0, 1}; public void recursiveLoop(int i) { if (i &lt; this.size) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; recursiveLoop(i); } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { long startTime = System.nanoTime(); Fibo fib = new Fibo(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); } } Fibo.main(null); . Init method = recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fixed Abstract loops . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(); } } . public class FibF extends Fibo { public void init() { super.name = &quot;For&quot;; int count = super.size; long[] previous = new long[] {0, 1}; for (int i = 0; i &lt; count; i++) { super.setData(previous[0]); previous = new long[] {previous[1], previous[0] + previous[1]}; } } static public void main(String[] args) { long start = System.nanoTime(); FibF fibF = new FibF(); long end = System.nanoTime(); fibF.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } FibF.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 70500 ns . public class FibW extends Fibo { public void init() { super.name = &quot;While&quot;; int count = 0; long[] previous = new long[] {0, 1}; while (count &lt; super.size) { super.setData(previous[0]); previous = new long[] {previous[1], previous[0] + previous[1]}; count++; } } static public void main(String[] args) { long start = System.nanoTime(); FibW fibW = new FibW(); long end = System.nanoTime(); fibW.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } FibW.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 31000 ns . public class FibR extends Fibo { public void init() { this.init(super.size); } long[] previous = new long[]{0, 1}; public void init(int count) { if (count &lt; super.size) { super.setData(previous[0]); previous = new long[] {previous[1], previous[0] + previous[1]}; count++; this.init(count); } } static public void main(String[] args) { long start = System.nanoTime(); FibR fibR = new FibR(); long end = System.nanoTime(); fibR.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } FibW.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 135500 ns .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/23/Fibonacci.html",
            "relUrl": "/jupyter/2022/09/23/Fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Agile and Roles",
            "content": "Roles . Scrum Master: Vidhi Kulkarni | DevOps: Lily Wu | Frontened Developer: Riya Patil | Backend Developer: William Wu | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/15/agile.html",
            "relUrl": "/jupyter/2022/09/15/agile.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "FRQ",
            "content": "2022 FRQ Problem #1 part a . First Attempt . public int getScore { if (goalReached(levelOne) = true) { int score = 200; if (goalReached(levelTwo) = true) { int score = score+100; if (goalReached(levelThree) = true) { int score = score+500; if (isBonus() = true) { int score = score*3; } } } } } . Comments . I should define score at the very beginning | Bonus game has nothing to do with what level you completed (misread question) | getscore needs to have two parenthesis -&gt; getscore() | levelOne and the other levels are objects | goalReached is a function | I don&#39;t need to add the actual pt value, just use the getPoints parameter my syntax wasn&#39;t right either. need to practice this and get out of the python mindset | . | forgot to return score | . Solution . public int getScore() { int score = 0; if (levelOne.goalReached()) { score = levelOne.getPoints(); if (levelTwo.goalReached()) { score += levelTwo.getPoints(); if (levelThree.goalReached()) { score += levelThree.getPoints(); } } } if (isBonus()) { score *= 3; } . 2022 FRQ Problem #1 part b . public int playManyTimes(num) { int max = 0; for (int i = 0; i&lt;num;i++) { play(); int score = getScore(); if (score &gt; max) { max = scorel } } } return max; . Comments . Definitely did better than part a | return max needs to be inside playManyTimes | num needs to be defined as an integer | . Solution . public int playManyTimes(int num) { int max = 0; for (int i = 0; i&lt;num;i++) { play(); int score = getScore(); if (score &gt; max) { max = scorel } } return max; } .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/13/aptestprep.html",
            "relUrl": "/jupyter/2022/09/13/aptestprep.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Arrays",
            "content": "Monkeys printed horizontally . This is done by flipping the horizontal and vertical for loops . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; // int monkeyCount = 6; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col]); //this is new line between separate parts // System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Custom Example . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;( ^ &quot;, &quot; ) ( &#39;)&quot;, &quot;( / )&quot;, &quot; )(__)| &quot; }, //Monkey 1 { &quot; ___ &quot;, //[1][0] &quot; (o o) &quot;, &quot; ( V ) &quot;, &quot; --m-m- &quot; }, //Monkey 2 { &quot; _&quot;, //[2][0] &quot; &gt;&lt;_&gt; &quot;, &quot; &quot;, &quot; &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Animals jumping in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; // int monkeyCount = 6; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little animals jumping on the bed...&quot;); System.out.println(&quot;One fell off and bumped his head&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); System.out.println(&quot;No more animals jumping on the bed!&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col]); //this is new line between separate parts // System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more animals jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; D: &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Animals jumping in Java Loopy 5 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ _ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) ) ( &#39;) (o o) &gt;&lt;_&gt; _⍾_/ _⍾_/ ( / ) ( V ) ==3== ==4== )(__)| --m-m- _/ _ _/ _ 4 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ _ ʕ ͡° ͜ʖ ° ͡ʔ ) ( &#39;) (o o) &gt;&lt;_&gt; _⍾_/ ( / ) ( V ) ==3== )(__)| --m-m- _/ _ 3 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ _ ) ( &#39;) (o o) &gt;&lt;_&gt; ( / ) ( V ) )(__)| --m-m- 2 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ ) ( &#39;) (o o) ( / ) ( V ) )(__)| --m-m- 1 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ) ( &#39;) ( / ) )(__)| No more animals jumping on the bed 0000000000000000000000000000000000 D: . Questions . Is this program in more of an Imperative Programming Style or OOP style? Explain. . Imperative Programming Style because it is not using objects. We are just coding to solve a problem, not manipulating data . Is each Monkey an object? . Nope! .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/12/arrays.html",
            "relUrl": "/jupyter/2022/09/12/arrays.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Focus and Habits",
            "content": "Video Notes . Students often feel burned out and sacrifice their mental health for grades | Do something you love | Change your behavior | Socialize with others | Exercise, sleep, be mindful, set goals | . Gratitude list . my supportive friends that always are there for me and bring me a smile | my parents who are supportive and help me when times get rough | my sister who always finds a way to make me laugh | my grandparents who give good advice and wants the best for me | . Goals . maintain a good balance between academics and life | find activities or hobbies to relieve stress | SLEEP MORE | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/09/Focus-and-Habits.html",
            "relUrl": "/jupyter/2022/09/09/Focus-and-Habits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "If else statements",
            "content": "if statements . If the condition is true, run the code inside . int test = 1; if (test == 1) { System.out.println(&quot;test pass&quot;); } . test pass . if-else statements . If the condition is true, run the code inside If nt of the if statements are true, run the else statement. . int test = 0; if (test == 1) { System.out.println(&quot;test pass&quot;); } else { System.out.println(&quot;test failed&quot;); } . test failed . Bool . boolean t = true; boolean f = false; if (t) { System.out.println(&quot;1&quot;); } if (f) { System.out.println(&quot;2&quot;); } if (f &amp;&amp; !t) { System.out.println(&quot;3&quot;); } if (t &amp;&amp; !f) { System.out.println(&quot;4&quot;); } if (t || f) { System.out.println(&quot;5&quot;); } if (!t || !f) { System.out.println(&quot;6&quot;); } if ((t &amp;&amp; !f) &amp;&amp; (t || f)) { System.out.println(&quot;7&quot;); } if ((!t || (t &amp;&amp; f)) || t ) { System.out.println(&quot;8&quot;); } if (!((f || !t) || (f &amp;&amp; t))) { System.out.println(&quot;9&quot;); } if (!((f &amp;&amp; !t) || (f || t))) { System.out.println(&quot;10&quot;); } . 1 4 5 6 7 8 9 . int test1 = 3; int test2 = 1; if (test1 == 0) { int test2 = 10; } else if (test1 == 3) { int test2 = 5; int test1 = 0; System.out.println(&quot;Nice&quot;); } else { int test2 = 3; } if (test1 &gt; test2) { System.out.println(&quot;Work&quot;); } else if (test1 &lt; test2) { System.out.println(&quot;Job&quot;); } else { System.out.println(&quot;Code&quot;); } . Nice Work . public class Test { public static void main(String[] args) { String s1 = &quot;HELLO&quot;; String s2 = &quot;HELLO&quot;; String s3 = new String(&quot;HELLO&quot;); System.out.println(s1 == s2); System.out.println(s1 == s3); System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); } } Test.main(null); . true false true true . Rock paper Scissors using if-elseif-else . See comments for futher details :D . public class RPS { public static final String ROCK = &quot;ROCK&quot;; public static final String PAPER = &quot;PAPER&quot;; public static final String SCISSORS = &quot;SCISSORS&quot;; //Scanner class to detect what move user plays public static String getPlayerMove() { Scanner in = new Scanner(System.in); String input = in.next(); String playermove = input.toUpperCase(); System.out.println(&quot;Player move is: &quot;+ playermove);* return playermove; } //Computer mobve is randomly generated through random function public static String getComputerMove() { String computermove; Random random = new Random(); int input = random.nextInt(3)+1; if (input == 1) computermove = RPS.ROCK; else if(input == 2) computermove = RPS.PAPER; else computermove = RPS.SCISSORS; System.out.println(&quot;Computer move is: &quot; + computermove); System.out.println(); return computermove; } public static void main(String args[]) { System.out.println(&quot;Enter any t of the following inputs: &quot;); System.out.println(&quot;ROCK&quot;); System.out.println(&quot;PAPER&quot;); System.out.println(&quot;SCISSORS&quot;); System.out.println(); String playerMove = getPlayerMove(); String computerMove = getComputerMove(); //Tie if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); // Player = Rock, Computer = Paper else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Computer Wins&quot;); // Player = Rock, Computer = Scissors else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Player Wins&quot;); // Player = Paper, Computer = Scissors else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Computer Wins&quot;); // Player = Paper, Computer = Rock else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Player Wins&quot;); // Player = Scissors, Computer = Paper else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Player Wins&quot;); // Player = Scissors, Computer = Rock else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Computer Wins&quot;); // Player = Paper, Computer = Scissors else if (playerMove.equals(RPS.PAPER)) System.out.println(computerMove.equals(RPS.SCISSORS) ? &quot;Computer Wins&quot;: &quot;Player wins&quot;); // if input isn&#39;t rock, paper, or scissors else System.out.println(&quot;There was an error, please try again&quot;); } } RPS.main(null); . | System.out.println(&#34;Player move is: &#34;+ playermove);* illegal start of expression | return playermove; illegal start of expression . Switch Case . public class RPS { public static final String ROCK = &quot;ROCK&quot;; public static final String PAPER = &quot;PAPER&quot;; public static final String SCISSORS = &quot;SCISSORS&quot;; //Scanner class to detect what move user plays public static String getPlayerMove() { Scanner in = new Scanner(System.in); String input = in.next(); String playermove = input.toUpperCase(); System.out.println(&quot;Player move is: &quot;+ playermove); return playermove; } public static void main(String args[]) { System.out.println(&quot;Enter any t of the following inputs: &quot;); System.out.println(&quot;ROCK&quot;); System.out.println(&quot;PAPER&quot;); System.out.println(&quot;SCISSORS&quot;); System.out.println(); String playerMove = getPlayerMove(); String computerMove = getComputerMove(); switch (playerMove) { case ROCK: // if user input ROCK if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; case PAPER: // if user input is Paper if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; case SCISSORS: // if user input is scissors if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; } } //Computer mobve is randomly generated through random function public static String getComputerMove() { String computermove; Random random = new Random(); int input = random.nextInt(3)+1; if (input == 1) computermove = RPS.ROCK; else if(input == 2) computermove = RPS.PAPER; else computermove = RPS.SCISSORS; System.out.println(&quot;Computer move is: &quot; + computermove); System.out.println(); return computermove; } } RPS.main(null); . Enter any one of the following inputs: ROCK PAPER SCISSORS Player move is: PAPER Computer move is: ROCK Player Wins . De Morgan&#39;s Law . In essence, Not (A and B) is the same as Not A or Not B Remember that &quot;!&quot; denotes Not. . This . boolean test1 = true; boolean test2 = true; if (!(test1 &amp;&amp; test2)){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true&quot;); } . They are both true . is the same as this . boolean test1 = true; boolean test2 = true; if (!test1 || !test2){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true once again&quot;); } . They are both true once again .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/06/if-else-statements.html",
            "relUrl": "/jupyter/2022/09/06/if-else-statements.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Code.org takeaways",
            "content": "Let&#39;s refer to Lesson 7 Part 2 on Code.org . MyNeighborhood.java . import org.code.neighborhood.Painter; public class MyNeighborhood { public static void main(String[] args) { PainterPlus myPainterPlus = new PainterPlus(); // Lesson 6 Level 3 // TO DO #1: Instantiate a PainterPlus object. // Lesson 7 Level 2 // TO DO #1: Navigate the PainterPlus object // to the traffic cone. myPainterPlus.move(); myPainterPlus.move(); myPainterPlus.move(); myPainterPlus.turnRight(); myPainterPlus.move(); myPainterPlus.move(); } } . PainterPlus.java . import org.code.neighborhood.*; public class PainterPlus extends Painter { public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } . Defining a class . Syntax: public class classname . // Example from code.org public class MyNeighborhood . Creating an object . Syntax: Class object = new Class(); . // Example from code.org PainterPlus myPainterPlus = new PainterPlus(); // where PainterPlus is the class and myPainterPlus is the object . Object calling a method . This is what runs the code Syntax: object.method(); . // Example from code.org myPainterPlus.turnRight(); . Extends . superclass - class being extended subclass - class that is extending The result is that the super and subclass will have the same attributes . // syntax public class PainterPlus extends Painter { public PainterPlus() { super(); } } // example from code.org public class PainterPlus extends Painter { public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/05/code.org-takeaways.html",
            "relUrl": "/jupyter/2022/09/05/code.org-takeaways.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;2 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;3 - William&#39;s Modulus Calculator&quot;); System.out.println(&quot;4 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye! Thanks for checking this out :D&quot;); quit = true; break; case 1: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 2: double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); break; case 3: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Vidhi and Riya&#39;s Temp Convertor 2 - Lily&#39;s Average Calculator 3 - Modulus Calculator 4 - F=ma calculator 0 - Quit - 1: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello william Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 25.0 degree Celsius is equal to 298.0 in Kelvin 2: Enter numbers, type &#39;end&#39; to finish Number: 2 Number: 5 Number: 3 Number: end Show detailed info? y/n y Sum: 10.0 Count: 3 Mean: 3.3333333333333335 3: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 4: F=ma calculator Enter the mass: 3.0 Enter the accel: 6.0 Force calculator 3.0*6.0=18.0 0: Goodbye! Thanks for checking this out :D .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/02/menu.html",
            "relUrl": "/jupyter/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Alumni Panel",
            "content": "Notes . How did you realize you wanted to do major? How did Ap CSA and CSP help? . Compare against your competitors . | What you liked to do when you were young. Early interests . | Internships . | Interested in websites, csp gave technical background . | Able to be used in the real world . | . | What is tge biggest challenge you’ve encountered with computer science? . The bugs and errors in the beginning . | Egos, people brag about their accomplishments. Follow your own path. Work on your own stuff . | Theory. How structures are set up. Transition between high school and college . | Finding the motivation. Use google. Projects can helps to create a goal . | Temptation to cut corners. Do stuff just for points. GO abobve and beyond . | Getting started in a new area of cs. . | . | Are there any PBL scenarios in college computer science classes . Still exists in UCSD . | There are PBLS and Tests . | . | Have you applied CS in your major if you are not majoring in CS . Coding is everywhere . | Automate things . | MATLAB uses for loops, if statemntrs, etc . | Helpful for math classes . | . | For existing cplleghe studentrs have you had a job within your profession . Yes, you need to make a resume. Jobs are a good addition to your resume . | Tridant AI . | Northrop Grumman . Wiring Diagrams . | Visuakizing flight data . | Cybersecurity intern . | Creating website for flight data . | Scripting for staffing contract . | . | TEacher Assistant . | Code Ninjas . | . | Personal projects . Good if you have no work experience . | . | Internships, September and November open . | . Insights . This panel really helped me to see how practical CS is in a variety of majors. Computer Science really can be applied to anything. I really resonated with Allison choosing talking about Cognitive Science. I never knew that you could major psychology with computer science. I will definitely check out the other submajors for computer science and choose one that I enjoy doing. I am leaning towards cybersecurity + comp sci rn. In addition, it was comforting knowing that others also faced many challenges in computer science. I liked how Anthony brought up his challenge of looking through other people’s Linkedins and feeling like he wasn’t good enough. His advice on just focusing on what you are doing is really good and beneficial to me. It was also interesting learning what the interns at Northrop Grumman do. .",
            "url": "https://willcyber.github.io/fastpages/2022/08/29/alumni-panel.html",
            "relUrl": "/2022/08/29/alumni-panel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Primatives",
            "content": "// java style to import library import java.util.Scanner; double mass; double accel; double Force; double ac; double m; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); } } ScanPrimitives.main(null); . F=ma calculator Enter the mass: 2.3 Enter the accel: 2.5 Force calculator 2.3*2.5=5.75 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/26/Primatives.html",
            "relUrl": "/jupyter/2022/08/26/Primatives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Bash Tool Checkup",
            "content": "Testing Python Installation . python --version python2 --version python3 --version conda --version . Python 3.9.12 Python 2.7.18 Python 3.9.12 conda 4.14.0 . Testing Java Installation . java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) . Testing Jupyter Kernel installations . jupyter kernelspec list . Available kernels: bash /home/wu/.local/share/jupyter/kernels/bash java /home/wu/.local/share/jupyter/kernels/java javascript /home/wu/.local/share/jupyter/kernels/javascript python3 /home/wu/anaconda3/share/jupyter/kernels/python3 . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/25/bash.html",
            "relUrl": "/jupyter/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Java Jupyter Tests",
            "content": "System.out.println(&quot;Hello&quot;); System.out.println(&quot;Test&quot;); System.out.println(&quot;Test Again&quot;); . Hello Test Test Again . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); Output Primitive Data The second key to to all programming is Output. All programming has means to format and combine data. In these examples you see descriptions of the mathematical operation combine with the result of the operation. public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); Output Primitive Data The second key to to all programming is Output. All programming has means to format and combine data. In these examples you see descriptions of the mathematical operation combine with the result of the operation. public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulos calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); // m = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); // ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulos Calculator&quot;); double result = mod1 % mod2; System.out.print(mod1 + &quot;modulos&quot; + mod2 + &#39;=&#39; + Force); break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input4; // primitive int input4 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input4.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input4.close(); // primitive int input4 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input4.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input4.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/21/java.html",
            "relUrl": "/jupyter/2022/08/21/java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Python Jupyter Tests",
            "content": "print(&#39;Hello&#39;) . Hello . age = 24 if age &lt; 21: print(&quot;ur too young for beer kid&quot;) else: print(&quot;you&#39;re old enough&quot;) name = &quot;Sam&quot; if name == &quot;William&quot;: print(&quot;Hi William&quot;) elif name == &quot;Bob&quot;: Print(&quot;Hey Bob&quot;) elif name == &quot;Sam&quot;: print(&quot;Hello Sam&quot;) else: print(&quot;You aren&#39;t allowed here&quot;) . you&#39;re old enough Hello Sam . vehicles = [&quot;car&quot;, &quot;bus&quot;, &quot;truck&quot;, &quot;bike&quot;, &quot;train&quot;] for v in vehicles: print(v) print(len(v)) . car 3 bus 3 truck 5 bike 4 train 5 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/20/python.html",
            "relUrl": "/jupyter/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "First Post",
            "content": "Welcome to my first post! . What is this? . This is a website that makes use of a tool called fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Everything is hosted using github pages. . Stuff . Name Github Name Issues Commits Profile . William | willcyber | Issues | Commits | Profile | .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/08/20/first-post.html",
            "relUrl": "/markdown/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post50": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://willcyber.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "PBL Notes",
          "content": "Week 0 . “Object Oriented Programming” focuses software design around data, or objects. “object” contains both methods and data “instance of a class” is the process of making an object, unique or instances of variables are created within the object “constructor” special method in class, code that is used to initialize the data within the object “getter” is a method that is used to extract or reference data from within the object. . Week 1 . _notebooks is used for jupyter ntoebooks _posts for mardkdown files _pages creates subpages (stuff on navbar) images stored in the images folder . Week 2 .",
          "url": "https://willcyber.github.io/fastpages/pbl/",
          "relUrl": "/pbl/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "College Board",
          "content": "Unit One: Primitive Types . Goal: To learn the fundamentals of Java and other foundational concepts for coding. AP Exam Weighting 2.5-5% . Unit Two: Using Objects . Goal: Explore reference data in order to represent real-world objects in a digital world and discover methods to initiate more complex operations AP Exam Weighting 5-7.5% . Unit Three: Boolean Expressions and if Statements . Goal: Dive into the building blocks of algorithms and use conditional statements to solve problems and have control over your results AP Exam Weighting 15-17.5% . Unit Four: Iteration . Goal: Learn about iteration which is used for repetition in algorithms AP Exam Weighting 17.5-22.5% . Unit Five: Writing Clauses . Goal: Explore real-world interactions that can be expressed through code by organizing behaviors and attribites into classes – also learn about the legal and ethical implications of programming AP Exam Weighting 5-7.5% . Unit Six: Array . Goal: Learn techniques and standard algorithms to work with collections of data structures AP Exam Weighting 10-15% . Unit Seven: ArrayList . Goal: Delve into data setts, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns for your personal data storage AP Exam Weighting 2.5-7.5% . Unit Eight: 2D Array . Goal: Experiment with data sets represented in a table AP Exam Weighting 7.5-10% . Unit Nine: Inheritance . Goal: Manipulate programming without altering original code by using subclasses to create a hierarchy AP Exam Weighting 5-10% . Unit Ten: Recurision . Goal: Solve larger problems by solving small versions of the same problems using recursive methods AP Exam Weighting 5-7.5% .",
          "url": "https://willcyber.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://willcyber.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}