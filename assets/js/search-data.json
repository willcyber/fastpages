{
  
    
        "post0": {
            "title": "Seed Extra Cred",
            "content": "Class . public class Book { private String title; private double price; public Book(String bookTitle, double bookPrice) { title = bookTitle; price = bookPrice; } public String getTitle() { return title; } public String getBookInfo() { return title + &quot;-&quot; + price; } } . public class Textbook extends Book { public int edition; public Textbook(String bookTitle, double bookPrice, int editionnum) { super(String bookTitle, double bookPrice); edition = editionnum; } public int getEdition() { return edition; } public String getBookInfo() { super.getBookInfo() + &quot;-&quot; + edition; // return title + &quot;-&quot; + price + &quot;-&quot; + editionnum; } public boolean canSubsituteFor(Textbook two) { if (two.getTitle().equals(getTitle()) &amp;&amp; two.getEdition() &lt;= getEditon()) { return true; } else { return false; } } } . | super(String bookTitle, double bookPrice); &#39;)&#39; expected | super(String bookTitle, double bookPrice); not a statement | super(String bookTitle, double bookPrice); &#39;;&#39; expected | super(String bookTitle, double bookPrice); &#39;;&#39; expected | super.getBookInfo() + &#34;-&#34; + edition; not a statement . edition needs to be private | the super in the constructor should not redefine bookTItle as String, etc | forgot the return in getBookInfo() | if else not needed | misspelled getEdition() | . Corrected code (essential parts) . public class Textbook extends Book { private int edition; public Textbook(String bookTitle, double bookPrice, int editionnum) { super(bookTitle, bookPrice); edition = editionnum; } public int getEdition() { return edition; } public String getBookInfo() { return super.getBookInfo() + &quot;-&quot; + edition; // return title + &quot;-&quot; + price + &quot;-&quot; + editionnum; } public boolean canSubsituteFor(Textbook two) { if (two.getTitle().equals(getTitle()) &amp;&amp; two.getEdition() &lt;= this.getEdition()) { return true; } else { return false; } } public static void main(String[] args) { Textbook test = new Textbook(&quot;Harry Potter&quot;, 5.0, 3); System.out.println(test.getBookInfo()); } } Textbook.main(null); . Harry Potter-5.0-3 . Methods and Control Structures . public class FrogSimulation { private int goalDistance; private int maxHops; private int random; private int distance = 0; private int counter; private double prop; public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } private int hopDistance() { random = (int) ((Math.random()*2-1)*(Math.random()*goalDistance)); return random; } public boolean simulate() { //a for (int i=0; i&lt;maxHops; i++) { distance += this.hopDistance(); if (distance &gt;= goalDistance) { return true; } if (distance &lt; 0) { return false; } } return false; } public double runSimulations(int num) { //b for (int i=0; i&lt;num; i++) { if (this.simulate()) { counter++; } } prop = (double) counter/num; return prop; } public static void main(String[] args) { FrogSimulation test = new FrogSimulation(50, 5); System.out.println(&quot;the prop is &quot; + test.runSimulations(500)); } } FrogSimulation.main(null); . the prop is 0.096 .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/23/seedec.html",
            "relUrl": "/tri3/2023/04/23/seedec.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Pop Quiz",
            "content": "public class Book { String title; double uniqueid; int bookcount; int number; public Book(String title) { this.title = title; } public String toString() { return (&quot;the title is&quot; + title + &quot;the unique id is&quot; + uniqueid + &quot;the bookcount is&quot; + bookcount); } public String gettitle() { return title; } public void generateuniqueid() { // uniqueid = Math.random() * 1000; uniqueid = System.currentTimeMillis() + Math.random(); } public double getuniqueid() { return uniqueid; } public int getbookcount() { return bookcount; } public static void main(String[] args) { Book test = new Book(&quot;test&quot;); test.generateuniqueid(); System.out.println(test.getuniqueid()); System.out.println(test.getbookcount()); System.out.println(test.gettitle()); Book test2 = new Book(&quot;Harry Potter&quot;); test2.generateuniqueid(); System.out.println(test2.getuniqueid()); System.out.println(test2.getbookcount()); System.out.println(test2.gettitle()); } } Book.main(null); . 1.6820926083556812E12 0 test 1.682092608357625E12 0 Harry Potter .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/20/popquiz.html",
            "relUrl": "/tri3/2023/04/20/popquiz.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Pres 1",
            "content": "Merge Sort . implement with recursive function | . int sum = 0; public void recursionex(int n) { sum += n; System.out.println(sum); if (n&gt;15) { System.out.println(&quot;stop&quot;); } else { recursionex(n+1); } } recursionex(10); . 10 21 33 46 60 75 91 stop . //don&#39;t run lol int sum = 0; public void infiniteex(int n) { sum += n; System.out.println(sum); if (n&gt;15) { System.out.println(&quot;stop&quot;); } infiniteex(n+1); } // infiniteex(10); .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/18/pres1.html",
            "relUrl": "/tri3/2023/04/18/pres1.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "AP FRQ Practice",
            "content": "2022 . 1 a . int pts; if (levelOne.goalReached()) { if (this.isBonus()) { pts = pts + (levelOne.getPoints() * 3); } else { pts += levelOne.getPoints(); } } if (levelTwo.goalReached() &amp;&amp; levelOne.goalReached()) { if (this.isBonus()) { pts = pts + (levelTwo.getPoints() * 3); } else { pts += levelTwo.getPoints(); } } if (levelThree.goalReached() &amp;&amp; levelTwo.goalReached() &amp;&amp; levelOne.goalReached()) { if (this.isBonus()) { pts = pts + (levelThree.getPoints() * 3); } else { pts += levelThree.getPoints(); } } return pts; . Comments: . misread the problem. read bonus levels instead of bonus game. | . 1 b . int highest = Integer.MIN_VALUE; int temp; int pts; if (num &gt; 0) { for (i=0; i &lt; num; i++) { this.play(); temp = this.getScore(); if (temp &gt; highest) { highest = temp; } } } return highest; . play() not this.play() | if (num&gt;0) not needed | . 2 . public class Book { private String title; private double price; public Book(String bookTitle, double bookPrice) { title = bookTitle; price = bookPrice; } public String getTitle() { return title; } public String getBookInfo() { return title + &quot;-&quot; + price; } } . public class Textbook extends Book { public int edition; public Textbook(String bookTitle, double bookPrice, int editionnum) { super(String bookTitle, double bookPrice); edition = editionnum; } public int getEdition() { return edition; } public String getBookInfo() { super.getBookInfo() + &quot;-&quot; + edition; // return title + &quot;-&quot; + price + &quot;-&quot; + editionnum; } public boolean canSubsituteFor(Textbook two) { if (two.getTitle().equals(getTitle()) &amp;&amp; two.getEdition() &lt;= getEditon()) { return true; } else { return false; } } } . | super.getBookInfo() + &#34;-&#34; + edition; not a statement | public bool canSubsituteFor(Textbook two) { cannot find symbol symbol: class bool | if (two.getTitle().equals(getTitle()) &amp;&amp; two.getEdition() &lt;= getEditon()) { cannot find symbol symbol: method getEditon() | public String getBookInfo() { | super.getBookInfo() + &#34;-&#34; + edition; | // return title + &#34;-&#34; + price + &#34;-&#34; + editionnum; | } missing return statement . edition needs to be private | the super in the constructor should not redefine bookTItle as String, etc | forgot the return in getBookInfo() | if else not needed | misspelled getEdition() | . Corrected code (essential parts) . public class Textbook extends Book { private int edition; public Textbook(String bookTitle, double bookPrice, int editionnum) { super(bookTitle, bookPrice); edition = editionnum; } public int getEdition() { return edition; } public String getBookInfo() { return super.getBookInfo() + &quot;-&quot; + edition; // return title + &quot;-&quot; + price + &quot;-&quot; + editionnum; } public boolean canSubsituteFor(Textbook two) { if (two.getTitle().equals(getTitle()) &amp;&amp; two.getEdition() &lt;= this.getEdition()) { return true; } else { return false; } } public static void main(String[] args) { Textbook test = new Textbook(&quot;Harry Potter&quot;, 5.0, 3); System.out.println(test.getBookInfo()); } } Textbook.main(null); . Harry Potter-5.0-3 . 3 . public class Review { private int rating; private String comment; public Review(int r, String c) { rating = r; comment = c; } public int getRating() { return rating; } public String getComment() { return comment; } } . public class ReviewAnalysis { private Review[] allReviews; int sum; double average; String comment; String end; public ReviewAnalysis(Review[] reviews) { allReviews = reviews; } public double getAverageRating() { //part a for (int i=0; i&lt;allReviews.length; i++) { sum += allReviews[i].getRating(); } average = sum/allReviews.length; return average; } public ArrayList&lt;String&gt; collectComments() { //part b ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;(); for (int i=0; i&lt;allReviews.length; i++) { comment = allReviews[i].getComment(); if (comment.indexOf(&quot;!&quot;) != -1) { end = comment.substring(comment.length - 1); if (!end.equals(&quot;.&quot;) &amp;&amp; !end.equals(&quot;!&quot;)) { end += &quot;.&quot;; } array.add(i + &quot;-&quot; + comment); } } return array; } } . | end = comment.substring(comment.length - 1); cannot find symbol symbol: variable length . Corrections . .length() used to get length of string. .length used to get length of array | . Corrected . public class ReviewAnalysis { private Review[] allReviews; int sum; double average; String comment; String end; public ReviewAnalysis(Review[] reviews) { allReviews = reviews; } public double getAverageRating() { //part a for (int i=0; i&lt;allReviews.length; i++) { sum += allReviews[i].getRating(); } average = sum/allReviews.length; return average; } public ArrayList&lt;String&gt; collectComments() { //part b ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;(); for (int i=0; i&lt;allReviews.length; i++) { comment = allReviews[i].getComment(); if (comment.indexOf(&quot;!&quot;) != -1) { end = comment.substring(comment.length() - 1); if (!end.equals(&quot;.&quot;) &amp;&amp; !end.equals(&quot;!&quot;)) { end += &quot;.&quot;; } array.add(i + &quot;-&quot; + comment); } } return array; } public static void main(String[] args) { Review[] reviews = { new Review(3, &quot;This is a review.&quot;), new Review(4, &quot;This is another review!&quot;), new Review(5, &quot;This is a! third review&quot;) }; ReviewAnalysis analysis = new ReviewAnalysis(reviews); System.out.println(&quot;Average rating: &quot; + analysis.getAverageRating()); ArrayList&lt;String&gt; comments = analysis.collectComments(); System.out.println(&quot;Comments with exclamation marks:&quot;); for (String comment : comments) { System.out.println(comment); } } } ReviewAnalysis.main(null); . Average rating: 4.0 Comments with exclamation marks: 1-This is another review! 2-This is a! third review . indexOf review . finds and returns the index of the character(s) it&#39;s looking for | return -1 if it can&#39;t find it | thus checkign to see if it&#39;s greater or equal to 0 basically checks if it exists | only used for strings | . substring review . remember strings start at index 0 | only goes from starting pt to end-1 for ex: substring(2,4) only gives index 2 and 3 | . | substring(2) would give everythign from index 2 and beyond | . 4 a . for (int i = 0; i &lt; grid.length; i++) { for (int j = 0; j &lt; grid[j].length; j++) { int random = (int) (Math.random() * (MAX-1)) + 1; while (random%10 != 0 &amp;&amp; random%100 == 0) { random = (int) (Math.random() * (MAX-1)) + 1; } grid[i][j] = random; } } . oops use MAX not MAX -1 cause I&#39;m adding 1 to the end | . 4 b . int count = 0; for (int i = 0; i &lt; grid[0].length; i++) { boolean tof = true; for (int j = 1; j &lt; grid.length; j++) { if (grid[i][j] &lt; grid[i-1][j]) { tof = false; } } if (tof) { count++; } return count; } . noice . 2021 . 1 a . int freq; int length = guess.length(); int j; for (int i=0; i&lt;secret.length; i=i+length) { j = i+length+1; if (secret.substring(i, j) == guess) { freq++; } } return freq * length * length; . I once again forgot to use .equals :&#39;) | forgot parenthesis for .legnth in for loop | &lt;= in for loop | . int a = game.scoreGuess(guess1); int b = game.scoreGuess(guess2); int num1; int num2; if (a&gt;b) { return a; } if (b&gt;a) { return b; } else { num1 = //idk what to do lmao unless I create a huge array which I aint doing } . didn&#39;t know you could use compareTo like that | . compareTo review . It compares strings in dictionary (lexicographical) order: | If string1.compareTo(string2) &lt; 0, then string1 precedes string2 in the dictionary. | If string1.compareTo(string2) &gt; 0, then string1 follows string2 in the dictionary. | If string1.compareTo(string2) == 0, then string1 and string2 are identical. (This test is an alternative to string1.equals(string2).) | .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/11/apfrqpractice.html",
            "relUrl": "/tri3/2023/04/11/apfrqpractice.html",
            "date": " • Apr 11, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Hashmap",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . /* * Animal class extends Collectable and defines abstract methods */ public class Animal extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* Getters * */ public String getName() { return this.name; } public int getAge() { return this.age; } public String getColor() { return this.color; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // convert to Coolection and sort in name order Animal.setOrder(KeyType.name); List&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;(Arrays.asList(objs)); // Array has asList conversion Collections.sort(animals); Animal.setOrder(KeyType.title); for (Animal animal : animals) System.out.println(animal); } } Animal.main(null); . class [LREPL.$JShell$13C$Animal; 6 Collectable: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 Animal: Cat, Black, 10 Animal: Dog, Brown, 14 Animal: Kitty, Calico, 1 Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 . Hashmap Lookup . import java.util.HashMap; import java.lang.Math; public class Pets { // create a new HashMap HashMap&lt;Integer, String&gt; names = new HashMap&lt;Integer, String&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap for (int i=0; i&lt;5000; i++) { String s = String.valueOf(i); names.put(i, s); } } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); // Hashmap lookup int rand = (int) (Math.random()*5000); long startTime = System.nanoTime(); for (Integer key : pets.names.keySet()) { if (key==rand) { break; } } long elapsedTime = System.nanoTime() - startTime; System.out.println(&quot;Hashmap Lookup&quot;); System.out.println(elapsedTime); } } Pets.main(null); . Hashmap Lookup 135600 . Binary Search in Hashmap . import java.util.HashMap; import java.lang.Math; public class Pets { // create a new HashMap HashMap&lt;Integer, String&gt; names = new HashMap&lt;Integer, String&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap for (int i=0; i&lt;5000; i++) { String s = String.valueOf(i); names.put(i, s); } } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); // Hashmap lookup int rand = (int) (Math.random()*5000); int mid = 2500; int min = 0; int max = 5000; long startTime = System.nanoTime(); for (int i=0; i&lt;20; i++) { if (rand == mid) { break; } if (rand &gt; mid) { mid = (max+mid)/2; } if (rand &lt; mid) { mid= (min+mid)/2; } } long elapsedTime = System.nanoTime() - startTime; System.out.println(&quot;Binary Sort&quot;); System.out.println(elapsedTime); } } Pets.main(null); . Binary Sort 3100 . Just by looking at one output, we can clearly see that binary sort is way more efficient. This is because it needs to iterate way less times to find the random number. .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/04/hashmap.html",
            "relUrl": "/tri3/2023/04/04/hashmap.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Checkpoint",
            "content": "/** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } public void setNext(LinkedList&lt;T&gt; next) { this.nextNode = next; } // public void setNext(T data) { // this.nextNode = new LinkedList&lt;&gt;(data); // } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail tail.setPrevNode(this.tail); this.tail = tail; // update tail } } public void addList(T[] lists) { for (T data : lists) { this.add(data); } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } /** * Returns if queue is empty * * @return boolean if it is empty */ public boolean isEmpty() { return this.head == null; } /** * Changes the head * */ public void setHead(LinkedList&lt;T&gt; h) { this.head = h; } /** * Returns size of queue * * @return size of queue */ public int size() { int sz = 0; for (T e: this) { sz++; } return sz; } public String toString() { int count = 0; String str = &quot;&quot;; for (T e : this) { str += e + &quot; &quot;; count++; } return &quot;count: &quot; + count + &quot;, data: &quot; + str; } } . Generic Class . abstract class Sorter&lt;T&gt; { String name; double stime; double etime; double difftime; int compares; int swaps; public Sorter(String name) { this.name = name; } abstract public Queue&lt;T&gt; sort(Queue&lt;T&gt; list, boolean verbose); public Queue&lt;T&gt; sort(Queue&lt;T&gt; list) { return this.sort(list, true); } public void start() { this.stime = System.nanoTime(); } public void end() { this.etime = System.nanoTime(); } public double elapsedtime() { difftime = etime - stime; return difftime; } public void incrementcompare() { compares++; } public void incrementswap() { swaps++; } public int printcomp() { return this.compares; } public int printswap() { return this.swaps; } } . Bubble . class BubbleSorter&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public BubbleSorter() { super(&quot;Bubble Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q, boolean verbose) { super.start(); boolean swapped = true; LinkedList&lt;T&gt; head = q.getHead(); while (swapped) { swapped = false; LinkedList&lt;T&gt; current = head; while (current.getNext() != null) { if (current.getData().compareTo(current.getNext().getData()) &gt; 0) { T temp = current.getNext().getData(); current.getNext().setData(current.getData()); current.setData(temp); swapped = true; super.incrementswap(); } super.incrementcompare(); current = current.getNext(); } } super.end(); return q; } } . Selection . class Selection&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public Selection() { super(&quot;Selection Sort&quot;); } public Queue&lt;T&gt; sort (Queue&lt;T&gt; q, boolean verbose) { super.start(); boolean swapped = true; LinkedList&lt;T&gt; current = q.getHead(); while (current.getNext() != null) { LinkedList&lt;T&gt; currentnext = current.getNext(); LinkedList&lt;T&gt; min = current; while (currentnext != null) { if (min.getData().compareTo(currentnext.getData()) &gt; 0) { min = currentnext; } currentnext = currentnext.getNext(); super.incrementcompare(); } T temp = min.getData(); min.setData(current.getData()); current.setData(temp); super.incrementswap(); current = current.getNext(); } super.end(); return q; } } . Insertion . class Insertion&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { public Insertion() { super(&quot;Insertion Sort&quot;); } public Queue&lt;T&gt; sort(Queue&lt;T&gt; q, boolean verbose) { super.start(); LinkedList&lt;T&gt; current = q.getHead().getNext(); while (current != null) { LinkedList&lt;T&gt; current2 = current; while (current2.getPrevious() != null &amp;&amp; current2.getPrevious().getData().compareTo(current2.getData()) &gt; 0) { T temp = current2.getPrevious().getData(); current2.getPrevious().setData(current2.getData()); current2.setData(temp); super.incrementswap(); super.incrementcompare(); current2 = current2.getPrevious(); } current = current.getNext(); super.incrementcompare(); } super.end(); return q; } } . Merge . /** A class representing the Merge Sort algorithm for sorting a Queue of elements @param &lt;T&gt; The type of elements in the Queue, must implement Comparable */ class Merge&lt;T extends Comparable&lt;T&gt;&gt; extends Sorter&lt;T&gt; { /** Creates a new instance of Merge Sort */ public Merge() { super(&quot;Merge Sort&quot;); } /** Sorts the given Queue of elements using Merge Sort algorithm @param q The Queue of elements to be sorted @param verbose A boolean indicating whether to print out the sorting process or not @return The sorted Queue of elements */ public Queue&lt;T&gt; sort(Queue&lt;T&gt; q, boolean verbose) { super.start(); q.setHead(mergeSort(q.getHead())); super.end(); return q; } private LinkedList&lt;T&gt; mergeSort(LinkedList&lt;T&gt; head) { // Base case: if the linked list is empty or has only one element if (head == null || head.getNext() == null) { return head; } // Find the middle node of the linked list LinkedList&lt;T&gt; middle = getMiddle(head); LinkedList&lt;T&gt; nextOfMiddle = middle.getNext(); middle.setNext(null); // Recursively sort the left and right halves of the linked list LinkedList&lt;T&gt; left = mergeSort(head); LinkedList&lt;T&gt; right = mergeSort(nextOfMiddle); // Merge the two sorted halves of the linked list return merge(left, right); } private LinkedList&lt;T&gt; getMiddle(LinkedList&lt;T&gt; head) { // Base case: if the linked list is empty if (head == null) { return head; } // Initialize two pointers: slow and fast LinkedList&lt;T&gt; slow = head; LinkedList&lt;T&gt; fast = head; // Traverse the linked list using two pointers: // slow moves one node at a time, while fast moves two nodes at a time while (fast.getNext() != null &amp;&amp; fast.getNext().getNext() != null) { slow = slow.getNext(); fast = fast.getNext().getNext(); } // The slow pointer is now pointing to the middle node of the linked list return slow; } private LinkedList&lt;T&gt; merge(LinkedList&lt;T&gt; left, LinkedList&lt;T&gt; right) { LinkedList&lt;T&gt; result = null; // Base case: if one of the linked lists is empty, return the other one if (left == null) { return right; } if (right == null) { return left; } // Compare the first nodes of the left and right linked lists, // and recursively merge the remaining halves until all nodes are merged if (left.getData().compareTo(right.getData()) &lt;= 0) { result = left; result.setNext(merge(left.getNext(), right)); } else { result = right; result.setNext(merge(left, right.getNext())); } super.incrementswap(); super.incrementcompare(); return result; } } . Tester . public class Tester { private static double calcAvg(ArrayList&lt;Double&gt; arr) { double sum = 0; if(!arr.isEmpty()) { for (Double i : arr) { sum += i; } return sum / arr.size(); } return sum; } public static void main (String[] args) { List&lt;Sorter&lt;Integer&gt;&gt; sorters = new ArrayList&lt;Sorter&lt;Integer&gt;&gt;(); sorters.add(new BubbleSorter&lt;&gt;()); sorters.add(new Selection&lt;&gt;()); sorters.add(new Insertion&lt;&gt;()); sorters.add(new Merge&lt;&gt;()); int size = 5000; for (Sorter i : sorters) { int test = 1; ArrayList&lt;Double&gt; elapsed = new ArrayList&lt;Double&gt;(); ArrayList&lt;Double&gt; comp = new ArrayList&lt;Double&gt;(); ArrayList&lt;Double&gt; swap = new ArrayList&lt;Double&gt;(); while (test &lt;= 20) { ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(); for (int j = 0; j &lt; size; j++) { int rand = (int) Math.floor(Math.random() * size * 10); arr.add(rand); } Queue&lt;Integer&gt; q = new Queue&lt;&gt;(); q.addList(arr.toArray(new Integer[size])); i.sort(q); elapsed.add(i.elapsedtime()); comp.add(new Double(i.printcomp())); swap.add(new Double(i.printswap())); test++; } System.out.println(i.name); System.out.printf(&quot;Average Elapsed time: %.10fs n&quot;, calcAvg(elapsed)/1000000000); System.out.printf(&quot;Average Number of compares: %.2f n&quot;, calcAvg(comp)); System.out.printf(&quot;Average Number of swaps: %.2f n&quot;, calcAvg(swap)); System.out.println(); } System.out.println(); } } Tester.main(null); . Bubble Sort Average Elapsed time: 0.1399708400s Average Number of compares: 258080123.65 Average Number of swaps: 65697475.40 Selection Sort Average Elapsed time: 0.0544021950s Average Number of compares: 131223750.00 Average Number of swaps: 52489.50 Insertion Sort Average Elapsed time: 0.0281362850s Average Number of compares: 65930296.10 Average Number of swaps: 65877806.60 Merge Sort Average Elapsed time: 0.0009457550s Average Number of compares: 579713.60 Average Number of swaps: 579713.60 .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/04/02/checkpoint3.html",
            "relUrl": "/tri3/2023/04/02/checkpoint3.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "CSU notes",
            "content": "Our stories . failed Calc and physics but kept on persuing | got PHD | cal state opened lots of doors | | . Fun facts . newer University | new engineer bulding | national leader in social mobility | easy to get internships | . Pathways . Chem | biochem | apploed physics | electronics | bio | comp sci | cyber | comp eng | . Departments . physics | chem | biotech | math | comp sci | . Clubs . cybersecurity club | robotics | 3D printing | . Internships . network | join clubs | check emails | . Programs . Summer scholars program - do research with a professor | Quantam - $1500 + learn quantaum science | . Reflection . It was very cool learning each of their journeys and how CSU opened so many doors. Although I don&#39;t plan on going to CSU, I learned lots of great advice on loans and scholarships. It was also interesting learning how much their internships paid them. Overall, this was a cool oppurtunity to learn about the college experiece from current college students! .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/28/csunotes.html",
            "relUrl": "/tri3/2023/03/28/csunotes.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Sorts and Algo Rhythmic",
            "content": "Bubble Sort . public class Sorts { //bubble public void Bubble(int arr[]) { int n = arr.length; int t; for (int j = 0; j &lt; n - 1; j++) { for (int i = 0; i &lt; n - 1 - j; i++) { if (arr[i] &gt; arr[i + 1]) { t = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = t; } } } } //selection public void Selection(int arr[]) { int n = arr.length; int t; int min; int k; for (int j = 0; j &lt; n - 1; j++) { min = arr[j]; k = j; for (int i = j + 1; i &lt; n; i++) { if (min &gt; arr[i]) { min = arr[i]; k = i; } } if (k != j) { t = arr[j]; arr[j] = arr[k]; arr[k] = t; } } } //insertion public void Insertion(int arr[]) { } public static void main(String args[]) { Sorts obj = new Sorts(); int arr[] = {2, 1, 8, 4, 7}; obj.Bubble(arr); // obj.Selection(arr); int n = arr.length; System.out.println(&quot;Bubble:&quot;); for (int i = 0; i &lt; n; ++i) { System.out.print(arr[i] + &quot; &quot;); } System.out.println(); Sorts obj2 = new Sorts(); int arr2[] = {2, 1, 8, 4, 7}; obj.Selection(arr2); int m = arr2.length; System.out.println(&quot;Selection:&quot;); for (int i = 0; i &lt; m; ++i) { System.out.print(arr2[i] + &quot; &quot;); } System.out.println(); } } Sorts.main(null); . Bubble: 1 2 4 7 8 Selection: 1 2 4 7 8 .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/26/sorts.html",
            "relUrl": "/tri3/2023/03/26/sorts.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Data Collections Hacks",
            "content": "CB Vid . An access modifier is a keyword that determines the accessibility of a class, method, or variable. In Java, there are four access modifiers: public, protected, private, and default. Public classes, methods, and variables can be accessed from anywhere, while private ones can only be accessed within the same class. Protected ones can be accessed within the same package or through inheritance, and default ones can be accessed within the same package. | A constructor is a special method that is used to initialize objects of a class. It has the same name as the class and doesn&#39;t have a return type. Constructors can have parameters or no parameters, and they are called automatically when an object is created using the &quot;new&quot; keyword. | Modifiers are methods that are used to modify the values of the variables of a class. They can be public or private, and they are used to encapsulate the class by hiding the internal details. Modifiers can also have validation checks to ensure that the values are within certain limits. | Getters are methods that are used to retrieve the values of the variables of a class. They are used to encapsulate the class by hiding the internal details, and they are usually public. Getters can also be used to return calculated values based on the variables of the class. | Variables are used to store data within a class. They can be of different data types, such as int, double, String, and so on. Variables can also have different access modifiers, such as public, private, protected, and default. | Methods are functions that are defined within a class. They can be used to perform operations on the variables of the class, and they can also be used to return values. Methods can have parameters or no parameters, and they can be public or private. | . Hack Challenge #1 . public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { private LinkedList&lt;T&gt; head = null; private LinkedList&lt;T&gt; tail = null; private int wordCount = 0; public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) { // initial condition this.head = this.tail = tail; } else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } wordCount++; System.out.printf(&quot;Enqueued data: %s n&quot;, data); System.out.printf(&quot;Words count: %d, data: %s n&quot;, wordCount, this.toString()); } public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(null); } } wordCount--; System.out.printf(&quot;Dequeued data: %s n&quot;, data); System.out.printf(&quot;Words count: %d, data: %s n&quot;, wordCount, this.toString()); return data; } public T peek() { return this.head.getData(); } public LinkedList&lt;T&gt; getHead() { return this.head; } public LinkedList&lt;T&gt; getTail() { return this.tail; } public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } public String toString() { StringBuilder sb = new StringBuilder(); LinkedList&lt;T&gt; current = head; while (current != null) { sb.append(current.getData().toString()); sb.append(&quot; &quot;); current = current.getNext(); } return sb.toString().trim(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); // qWords.queue.add(&quot;Test&quot;); // qWords.queue.delete(&quot;seven&quot;); qWords.printQueue(); } } QueueTester.main(null); . Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/19/dscollections.html",
            "relUrl": "/tri3/2023/03/19/dscollections.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Checkpoint 1",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class User extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { User.key = key; } public enum KeyType implements KeyTypes {title, uid, password, name, points} // Instance data private final String uid; // user / person id private final String password; private final String name; private final int points; /* constructor * */ public User(String uid, String password, String name, int points) { super.setType(&quot;User&quot;); this.uid = uid; this.password = password; this.name = name; this.points = points; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return User.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.uid.equals(this.getKey())) { output += this.uid; } else if (KeyType.password.equals(this.getKey())) { output += this.password; } else if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.points.equals(this.getKey())) { output += this.points; } else { output += super.getType() + &quot;: &quot; + this.uid + &quot;, &quot; + this.password + &quot;, &quot; + this.name + &quot;, &quot; + this.points; } return output; } // Test data initializer public static User[] Users() { return new User[]{ new User(&quot;1&quot;, &quot;CyberPatriot1!&quot;, &quot;William&quot;, 20), new User(&quot;2&quot;, &quot;Password1!&quot;, &quot;Aidan&quot;, 5) }; } /* main to test User class * */ public static void main(String[] args) { // Inheritance Hierarchy User[] objs = Users(); // print with title User.setOrder(KeyType.title); User.print(objs); // print name only User.setOrder(KeyType.name); User.print(objs); } } User.main(null); . class [LREPL.$JShell$15B$User; 2 Generic: User listed by title User: 1, CyberPatriot1!, William, 20 User: 2, Password1!, Aidan, 5 class [LREPL.$JShell$15B$User; 2 Generic: User listed by name William Aidan . Challenge 2 . // Create iterable Queue of Integers Queue&lt;Object&gt; queue1 = new LinkedList&lt;&gt;(); queue1.add(1); queue1.add(4); queue1.add(5); queue1.add(8); Queue&lt;Object&gt; queue2 = new LinkedList&lt;&gt;(); queue2.add(2); queue2.add(3); queue2.add(6); queue2.add(7); System.out.println(&quot;Queue 1&quot;); System.out.println(queue1); System.out.println(&quot;Queue 2&quot;); System.out.println(queue2); Queue&lt;Object&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) { Object num1 = queue1.peek(); Object num2 = queue2.peek(); if ((int) num1 &lt; (int) num2) { mergedQueue.add(num1); queue1.remove(); } else { mergedQueue.add(num2); queue2.remove(); } } while (!queue1.isEmpty()) { mergedQueue.add(queue1.peek()); queue1.remove(); } while (!queue2.isEmpty()) { mergedQueue.add(queue2.peek()); queue2.remove(); } System.out.println(&quot;Merged Queue&quot;); System.out.println(mergedQueue); . Queue 1 [1, 4, 5, 8] Queue 2 [2, 3, 6, 7] Merged Queue [1, 2, 3, 4, 5, 6, 7, 8] .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/19/checkpoint1.html",
            "relUrl": "/tri3/2023/03/19/checkpoint1.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Data Types Hacks",
            "content": "Primatives . // int int[] intArray = new int[5]; for (int i=0; i&lt;intArray.length; i++) { intArray[i] = (int) (Math.random() *10); System.out.println(intArray[i]); } . 1 4 6 5 3 . // double double[] doubleArray = new double[5]; for (int i=0; i&lt;intArray.length; i++) { doubleArray[i] = (Math.random() *10); System.out.println(doubleArray[i]); } double d1 = 1.23; double d2 = 1.23; System.out.println(d1==d2); . 7.301043248071254 3.9008856742247797 9.461633641089941 6.668201382560991 0.853542092221744 true . //bool boolean tof = true; if (tof) { System.out.println(&quot;bool is true&quot;); } . bool is true . //char char letter = &#39;h&#39;; char letter2 = &#39;e&#39;; char letter3 = &#39;l&#39;; char letter4 = &#39;o&#39;; String word = &quot;&quot; + letter + letter2 + letter3 + letter3 + letter4; System.out.println(word); . hello . Wrapper Class . //Integer Integer[] intArray = new Integer[5]; for (int i = 0; i &lt; intArray.length; i++) { intArray[i] = (int) (Math.random() * 10); System.out.println(intArray[i]); } . 2 5 7 4 3 . // double double[] doubleArray = new double[5]; for (int i=0; i&lt;intArray.length; i++) { doubleArray[i] = (Math.random() *10); System.out.println(doubleArray[i]); } Double d3 = 1.23; Double d4 = 1.23; System.out.println(d3==d4); . 7.5698481641159185 2.086576518913615 8.956948380868376 7.035930903235372 2.0862771279196535 false . //Boolean Boolean b1 = Boolean.TRUE; Boolean b2 = Boolean.FALSE; Boolean b3 = true; System.out.println(b1); System.out.println(b2); System.out.println(b3); . true false true . //Character Character letter = &#39;h&#39;; Character letter2 = &#39;e&#39;; Character letter3 = &#39;l&#39;; Character letter4 = &#39;o&#39;; String word = new StringBuilder().append(letter).append(letter2).append(letter3).append(letter3).append(letter4).toString(); System.out.println(word); . hello . Methods and Control Structures . Methods take in an input and output a value. They can be called from other parts of the code. . Control Structures allow users to specify what actions occur in what conditions. Some examples inclue for loops and if else statements. . Diverse Arrays and Matrix include both methods and control strucutures. . For example, matrix includes the method String toString() and multiple for loops. . There are multiple data type examples in their code. Uses int and String. . Math.random . Math.random() * 10, random numbers between 0 and 10 (not includng 10) | returns double | if you want it in int add (int) to the front of Math.random() | . DoNothingByValue . Essentially this code shows the differenc between passing by value and by reference | the main method calls multiple methods with different paramteter types | integer array &quot;arr&quot; defined | inter value &quot;val&quot; defined | &quot;word&quot; defined as first 5 char of input string | all elements of arr set to 0 | print arr elememnts through for loop | changeIt essentially shows that passing parameters by value does not modify the original values of the variables. The method creates a new integer array of length 5, sets val to 0, and sets word to the first 5 characters of the input string. Then, it initializes all elements of the arr array to 0 and prints the array elements and word using a for loop. | changeIt2 has the same purpose as changeIt. It creates a new integer array of length 5, sets value to 0, and sets name to the first 5 characters of the input string. Then, it initializes all elements of the nums array to 0 and prints the array elements and name using a for loop. | changeIt3 and 4 both demonstrate that it is possible to change values by returning a new value. changeIt3 creates a new string that is the first 5 characters of the input string and initializes all elements of the arr array to 0. Then, it prints the array elements and the new string while changeIt4 creates a new integer array of length 5, sets the integer value to 0, and sets the string value to the first 5 characters of the input string. Then, it initializes all elements of the integer array to 0 and prints the array elements and the string. | . IntByReference . the method swapToLowHighOrder() basically swaps the value fiels of two objects if this.value &gt; i.value | the static swapper() method takes two integer arguments n0 and n1. This method creates two IntByReference objects, a and b, with n0 and n1 as their values, respectively. It then calls the swapToLowHighOrder() method on a, passing in b as an argument. Finally, it prints the values of a and b before and after the swap. | main() calls sweeper 3 times with different values | . Menu . Try is literally used to catch errors in a block of code | If there are errors in the try block, catch can catch the error and output an applicable error message to help debugging | Runnable is used to store a class-method to be run when a title is selected from a menu. It will be executed when the correspinding MenuRow object is selected. | .",
            "url": "https://willcyber.github.io/fastpages/tri3/2023/03/13/datahacks.html",
            "relUrl": "/tri3/2023/03/13/datahacks.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Binary Addition",
            "content": "String input0 = &quot;1&quot;; String input1 = &quot;1&quot;; int number0 = Integer.parseInt(input0, 2); int number1 = Integer.parseInt(input1, 2); int sum = number0 + number1; System.out.println(Integer.toBinaryString(sum)); . 10 . import java.util.concurrent.atomic.AtomicInteger; public class PassByReference { public static void changeAtomicInteger(AtomicInteger n) { System.out.println(&quot;In changeAtomicInteger method&quot;); System.out.println(&quot; tBefore change: n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); n.set(n.get() + 10); // at this point, we are clearly working with reference data type System.out.println(&quot; tAfter change: n = &quot; + n + // prints 15 &quot; hash code = &quot; + n.hashCode()); } public static void main(String[] args) { AtomicInteger n = new AtomicInteger(5); // unlike conventional wrapper class, this requires new System.out.println(&quot;Main method before changeAtomicInteger(n): n = &quot; + n + // prints 5 &quot; hash code = &quot; + n.hashCode()); changeAtomicInteger(n); System.out.println(&quot;Main method after changeAtomicInteger(n): n = &quot; + n + // now prints 15 &quot; hash code = &quot; + n.hashCode()); } } PassByReference.main(null); . Main method before changeAtomicInteger(n): n = 5 hash code = 915254697 In changeAtomicInteger method Before change: n = 5 hash code = 915254697 After change: n = 15 hash code = 915254697 Main method after changeAtomicInteger(n): n = 15 hash code = 915254697 . public class IntByReference { private int value; public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } public void swapToLowHighOrder(IntByReference i) { if (this.value &gt; i.value) { int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); // conditionally build swap method to change values of a, b System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://willcyber.github.io/fastpages/tri2/2023/03/06/binaryaddition.html",
            "relUrl": "/tri2/2023/03/06/binaryaddition.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "55 MC",
            "content": "2 . Misunderstood the problem. didn&#39;t realize it would lead to a chain reaction . 6 . The algorithm uses a for-each loop to traverse the rows, the row index is not being stored. . 9 . System.out.println would not affect the str&#39;s length . 10 . I forgot that you concatanate with + and += . 25 . didn&#39;t see that the remove didn&#39;t occurr before the size was calculated . 33 . C is wrong because r is used as the row index in printing numbers[r][c] . 45 . Got this wronng because I was confused about what the code what doing. I now understand that it runs line 12 every time a new smallest value is found . 47 . I can&#39;t do math apparently. 2+2+3+8+5+6=26 . 50 . When j has the value 0, k takes on values from 0 through 2, inclusive and 1 2 3 is printed. When j has the value 1, k takes on the values 1 and 2 and 5 6 is printed. When j has the value 2, k takes on the value 2 and 9 is printed. When j has the value 3, the inner for loop body is not executed because the initial value of k (3) is not less than the number of elements in the first row of the array (3). .",
            "url": "https://willcyber.github.io/fastpages/tri2/2023/01/30/52mc.html",
            "relUrl": "/tri2/2023/01/30/52mc.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "66 MC",
            "content": "4, 9, 10, 16, 22, 24, 34, 38, 44, 45, 46, 50, 56, 59, 60, 63, 65, . 4 . This was just a dumb mistake. I was too focused on flipping the &amp;&amp; to || and forgot to add the ! to &quot;a&quot; and &quot;b&quot; | . 9 . Once again a dumb mistake. I had the right idea but picked the wrong answer. The top result will be affectected not the middle duh | . 10 . Once again a dumb mistake. I seem to always have the right idea but execute it wrong. I thought the if statements were &lt; instead of greater than | . 16 . Column is a variable so C would be wrong | . 22 . I misread the code. A is obv wrong because the code works fine if there is no A include in any of the rows. | . 24 . - .",
            "url": "https://willcyber.github.io/fastpages/tri2/2023/01/28/66mc.html",
            "relUrl": "/tri2/2023/01/28/66mc.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 6-10 Vocab",
            "content": "Unit 6 . Arrays are objects defined by type[] name = new type[size] or initialized with elements using type[] name = new type[]{a,b,c,...} | Loops an enhanced can iterate through arrays | Index goes from 0 to size-1 | Algorithms can be used to modify or get info about arrays | By default, each element in the array is value 0 | . int[] arraytest = new int[5]; int[] arraytest2 = {10, 9, 5, 2, 4}; . Bound Errors . // good arraytest[3]; . 0 . //bound error arraytest[5]; . java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5 at .(#17:1) . Uninitialized and Unfilled Arrays - Allocate a single array variable but not the whole array | Traversing an array - incrementing through the array and doing stuff | . for(int i = 0; i &lt; arraytest2.length; i++){ System.out.println(arraytest2[i]); } . 10 9 5 2 4 . Unit 7 . Wrapper class stores prim in objects | make sure to specify the data type | return arraylist using the return command | traverse arraylist through for loops and while loops | get() to get an element | size() to get size | . import java.util.ArrayList; ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;hi&quot;); list.add(&quot;hey&quot;); list.add(&quot;hello&quot;); list.add(&quot;nice&quot;); . true . System.out.println(list); . [hi, hey, hello, nice] . add(int index, element) . list.add(1, &quot;test&quot;); System.out.println(list); . [hi, test, hey, hello, nice] . addAll(int index, Collection collection) . ArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;(); list2.add(&quot;apple&quot;); list2.add(&quot;orange&quot;); list2.add(&quot;grape&quot;); list2.add(&quot;pineapple&quot;); System.out.println(list2); . [apple, orange, grape, pineapple] . list.addAll(3, list2); System.out.println(list); . [hi, test, hey, apple, orange, grape, pineapple, hello, nice] . size() . list.size(); . 9 . clear() . list2.clear(); System.out.println(list2); . [] . remove(int index) . list.remove(2); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice] . remove(element) . list.add(&quot;nice&quot;); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice, nice] . get(int index) . list.get(3); // first element is actually the 0th index . orange . set(int index, element) . list.set(4, new String(&quot;grapeskittlessuck?&quot;)); System.out.println(list); . [hi, test, apple, orange, grapeskittlessuck?, pineapple, hello, nice, nice] . Unit 8 . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array | Format: data type[][] name = new data type[num row][num column] | . Accessing an element . //Hack 1 public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . Traverse 2D arrays through Nested Loops . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Unit 9 . Inheritance useful because it is efficeint | don&#39;t need to define methods over and over again | extend from base class | base class -&gt; super class | protected is an access modifier so that the attribute isn&#39;t affected by outside modifiers | super keyword allows us to use constructors that we define in the superclass | sub and superclass can have some varying attributes | Overriding allows a subclass or child class to provide a specific implementation of a method that has already been provided by a super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type (or sub-type) as a method in its super-class, then the method in the subclass will override the method in the super-class | . public class School { protected double numberpencil; protected double numberpapaer; protected double numberscis; public School(double numberpencil, double numberpapaer, double numberscis) { this.numberpencil = numberpencil; this.numberpapaer = numberpapaer; this.numberscis = numberscis; } public void test() { System.out.println(&quot;test&quot;); } } . public class Math extends School { protected double numbercalc; public Math(double numberpencil, double numberpapaer, double numberscis, double numbercalc) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(numberpencil, numberpapaer, numberscis); } // hornSound is not in the Superclass, so we add it separately in the constructor @Override public void test () { System.out.println(&quot;tets test&quot;); } public static void main(String[] args) { // 5 argument constructor Math william = new Math(2, 3, 1, 5); william.test(); } } Math.main(null); . tets test . Polymorphism - methods with the same name that take in different parameters . public void turbo (int a) { System.out.println(&quot;Engaging turbo &quot; + a); } public void turbo (int a, int b) { System.out.println(&quot;Engaging turbo &quot; + a + &quot; and nitro &quot; + b); } . toString Method - Prints out the attributes of an object. Converts string objects into a string equals Method - Compares two strings . Unit 10 . a recursive method is a method that calls itself - a subproblem that calls itself repeatedly | contains a base and recursive call. | the base case is reached where recursion is stopped and a value is returned | base case should be written first to avoid infinite recursion | recursion uses function calls vs. iteration uses for and while loops | binary search - sorted in order to maximize efficiency | Linear recursion - only calls itself once | Selection sort - finds the minimum value | Merge sort - divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves | . class Factorial { static int factorial( int n ) { if (n != 0) // termination condition return n * factorial(n-1); // recursive call else return 1; } public static void main(String[] args) { int number = 4, result; result = factorial(number); System.out.println(number + &quot; factorial = &quot; + result); } } Factorial.main(null); . 4 factorial = 24 .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/14/vocab610.html",
            "relUrl": "/tri2/2022/12/14/vocab610.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Title",
            "content": "public class School { protected double numberpencil; protected double numberpapaer; protected double numberscis; public School(double numberpencil, double numberpapaer, double numberscis) { this.numberpencil = numberpencil; this.numberpapaer = numberpapaer; this.numberscis = numberscis; } public void test() { System.out.println(&quot;test&quot;); } } . public class Math extends School { protected double numbercalc; public Math(double numberpencil, double numberpapaer, double numberscis, double numbercalc) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(numberpencil, numberpapaer, numberscis); } // hornSound is not in the Superclass, so we add it separately in the constructor @Override public void test () { System.out.println(&quot;tets test&quot;); } public static void main(String[] args) { // 5 argument constructor Math william = new Math(2, 3, 1, 5); william.test(); } } Math.main(null); . tets test .",
            "url": "https://willcyber.github.io/fastpages/2022/12/13/unit9.html",
            "relUrl": "/2022/12/13/unit9.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Extracred",
            "content": "Kathyleen Beveridge . Born in Vietnam . | 1980 . | Bay area . | Undergrad at Santa Clara . | Study in spain . | Finance degree . | Not traditional edu . | Hp . | Career . First job investment banker . Did not like it . | . | Switched to tech . Loved . | Hp . | Qualcomm . | . | . | Company mission statement . HP: create technology that makes life better for everyone everywhere . | Qualcomm: Inventing the tech the world loves . | All doing something the world will want . | . | Qualcomm impacts a billion people a day . | Senior director of marketing . | Loved working with people . | Switched to high tech . | . Kris Porter . Software engineer . | SRE . | Dev Ops . | UCLA . | Started back in comp sci after 8 years . Learned linux . | . | Graduated in grad school . | No company was hiring cause stock awful . | Fixing mac comp . | Job at startup. Email marketing. Deploy software . | Worked at Twitter . | Taught himself python . | Projects . Streaming . | Analytics . | Banking systems . | . | Now planning to work at mystenlabs . | Predict what repo will be downloaded . | Skills that are important . Continuous learning . | Don’t be concerned about things you learn in the news . | . | Senior directors listen to requirements and think about how technology can solve these requirements . | Coding a wa/y of thinking: dissecting a problem, critcial think, problem solving . | AWS and google cloud . | .",
            "url": "https://willcyber.github.io/fastpages/2022/12/13/extracred.html",
            "relUrl": "/2022/12/13/extracred.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "FRQ4",
            "content": "public class LightBoard { private boolean[] [] lights; public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int i=0; i&lt;numRows; i++) { for (int j=0; j&lt;numCols; j++) { java.util.Random random = new java.util.Random(); double r = random.nextDouble(); if (r &lt; 0.4) { lights[i][j] = true; } else { lights[i][j] = false; } } } } } . public boolean evalulateLight(int row, int col) { } .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/10/frq4.html",
            "relUrl": "/tri2/2022/12/10/frq4.html",
            "date": " • Dec 10, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 9",
            "content": "//Hack 1 public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; // Print the last element in the array! System.out.println(arr[2][2]); } } Test.main(null); . i . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); } arr[2][0] = &quot;Athens&quot;; } Test.main(null); . | arr[2][0] = &#34;Athens&#34;; &#39;]&#39; expected . public class Test { int longest = 0; public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // String longest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); } for (String[] row : arr) { for (String[] item : row) { if (array[row][item].length() &gt; longest) { longest = array[row][item].length(); } } } System.out.println(longest); } Test.main(null); . | for (String[] row : arr) { illegal start of type | for (String[] row : arr) { &#39;;&#39; expected | for (String[] row : arr) { &lt;identifier&gt; expected | System.out.println(longest); &lt;identifier&gt; expected | System.out.println(longest); &lt;identifier&gt; expected . int height = 1; int spaceCounter = 0; int leafCounter = 0; String[][] tree = new String[height + 1][height * 2 ]; for (int i = 0; i &lt; tree.length; i++) { int maxLeaf = i * 2 + 1; for (int j = 0; j &lt; tree[height].length; j++) { if (j &lt; (2*(height - 1 - i))) { tree[i][j] = &quot; &quot;; } else if (j % 2 == 0 &amp;&amp; leafCounter &lt;= maxLeaf) { tree[i][j] = &quot;*&quot;; leafCounter++; } else if (j % 2 != 0 &amp;&amp; leafCounter &lt;= maxLeaf) { tree[i][j] = &quot; &quot;; } else { tree[i][j] = &quot; &quot;; } } } System.out.println(tree); . [[Ljava.lang.String;@508f50cb .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/06/unit8.html",
            "relUrl": "/tri2/2022/12/06/unit8.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 1-5 Vocab",
            "content": "Unit 1 . int, boolean, char, and double are primitives | Strings and other classes are objects | Compare primitives with == and objects with .equals() | Objects have properties while primitives do not | casting is when you assign a value of one primitive data type to another type. In integer division, the decimal is truncated. You need to use a double in order to keep the decimal | casting rounds down while Math.round rounds to the nearest int | . int a = 7; int b = 3; System.out.println(a/b); System.out.println((double)a/(double)b); . 2 2.3333333333333335 . Unit 2 . Objects are instances | Methods have to specify return type which can be void, or nothing | Static methods tied with the class and defined once across all instances | Method overloading is when multiple methods with the same name have different parameters | Wrapper classes allow you to use primatives as objects. One use case would be in arraylists, where only objects are stored. Ex: ArrayList myNumbers = new ArrayList(); &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; @Type(type=&quot;json&quot;) @Column(columnDefinition = &quot;jsonb&quot;) private Map&lt;String,Map&lt;String, Object&gt;&gt; stats = new HashMap&lt;&gt;(); public Integer height; public Integer weight; // Constructor used when building object from an API public Person(Integer weight, Date dob) { this.height = height; this.weight = weight; } . Concatanation is when you combine primatives together. For example, you would use the .append for combining two strings. You could use &quot;+&quot; to add together integers and doubles. You can concatanate a string with an integer through &quot;+&quot;. | . String a = &quot;test &quot;; String b = &quot;this&quot;; System.out.println(a+b); . test this . Math.round rounds to the nearest int | Math.random gives a random number between two numbers | . double a = 3.54; double b = 3.49; System.out.println(Math.round(a)); System.out.println(Math.round(b)); . 4 3 . Unit 3 . Compound boolean values uses logical operators AND and OR to evaulate an expression as true or false | . boolean t = true; boolean f = false; if (t) { System.out.println(&quot;1&quot;); } if (f) { System.out.println(&quot;2&quot;); } if (f &amp;&amp; !t) { System.out.println(&quot;3&quot;); } if (t &amp;&amp; !f) { System.out.println(&quot;4&quot;); } if (t || f) { System.out.println(&quot;5&quot;); } if (!t || !f) { System.out.println(&quot;6&quot;); } if ((t &amp;&amp; !f) &amp;&amp; (t || f)) { System.out.println(&quot;7&quot;); } if ((!t || (t &amp;&amp; f)) || t ) { System.out.println(&quot;8&quot;); } if (!((f || !t) || (f &amp;&amp; t))) { System.out.println(&quot;9&quot;); } if (!((f &amp;&amp; !t) || (f || t))) { System.out.println(&quot;10&quot;); } . 1 4 5 6 7 8 9 . Truth Tables used to see the values of boolean expressions | . De Morgan&#39;s Law is in essence, Not (A and B) is the same as Not A or Not B | Remember that &quot;!&quot; denotes Not. | . boolean test1 = true; boolean test2 = true; if (!(test1 &amp;&amp; test2)){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true&quot;); } . They are both true . boolean test1 = true; boolean test2 = true; if (!test1 || !test2){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true once again&quot;); } . They are both true once again . Unit 4 . For loops defines a variable that changes every loop and runs when the conditional is true | Enhanced for loop interates through the whole thing | in the format for (int i : arr) | . While loops run when conditional is true | Do While loop runs once no matter what and then checks conditionals | . int i=1; do{ System.out.println(i); i++; }while(i&lt;=10); . 1 2 3 4 5 6 7 8 9 10 . int i=11; do{ System.out.println(i); i++; }while(i&lt;=10); . 11 . nested loops are loops used inside each other | this can be seen in our monkey nursery rhyme thing | . Unit 5 . Classes have properties and methods | Properties store information about each object | private and public | Methods runs code | Getter and setter methods are coded to modify private attributes | . Classes are created using the class keyword and the first letter is capitalized | main method class is the tester. Automatically called | . public class Person { // automatic unique identifier for Person record @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // email, password, roles are key attributes to login and authentication @NotEmpty @Size(min=5) @Column(unique=true) @Email private String email; @NotEmpty private String password; // @NonNull, etc placed in params of constructor: &quot;@NonNull @Size(min = 2, max = 30, message = &quot;Name (2 to 30 chars)&quot;) String name&quot; @NonNull @Size(min = 2, max = 30, message = &quot;Name (2 to 30 chars)&quot;) private String name; @DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;) private Date dob; // inches public Integer height; public Integer weight; /* HashMap is used to store JSON for daily &quot;stats&quot; &quot;stats&quot;: { &quot;2022-11-13&quot;: { &quot;calories&quot;: 2200, &quot;steps&quot;: 8000 } } */ @Type(type=&quot;json&quot;) @Column(columnDefinition = &quot;jsonb&quot;) private Map&lt;String,Map&lt;String, Object&gt;&gt; stats = new HashMap&lt;&gt;(); // Constructor used when building object from an API public Person(String email, String password, String name, Integer height, Integer weight, Date dob) { this.email = email; this.password = password; this.name = name; this.dob = dob; this.height = height; this.weight = weight; } // A custom getter to return age from dob attribute public int getAge() { if (this.dob != null) { LocalDate birthDay = this.dob.toInstant().atZone(ZoneId.systemDefault()).toLocalDate(); return Period.between(birthDay, LocalDate.now()).getYears(); } return -1; } // note this is just an example. just doing bmi *10 public int numberofsteps() { int numberofsteps = (int) (weight/Math.pow(height, 2) *703 *10); return numberofsteps; } public String toString() { return ( &quot;{ &quot;email &quot;: &quot; +this.email+ &quot;, &quot; + &quot; &quot;password &quot;: &quot; +this.password+ &quot; &quot;name &quot;: &quot; +this.name+ &quot; &quot;height &quot;: &quot; +this.height+ &quot; &quot;weight &quot;: &quot; +this.weight+ &quot; &quot;dob &quot;: &quot; +this.dob+ &quot; }&quot; ); } public static void main(String[] args) throws ParseException { Date dob = new SimpleDateFormat(&quot;MM-dd-yyyy&quot;).parse(&quot;01-28-2006&quot;); //no arg Person test = new Person(); System.out.println(test); //arg Person test2 = new Person(&quot;wutwilliam@gmail.com&quot;, &quot;CyberPatriot1!&quot;, &quot;William Wu&quot;, 71, 180, dob); System.out.println(test2); System.out.println(test2.numberofsteps()); System.out.println(test2.toString()); } } . getters and setters can both be seen in use in this code | they get and set properties of an object | this keywords gets access to properties of the class | public = accessible anywhere | private = accessible only in its own class | static methods dont need an object. part of the class. only initialized once at the start of the execution | . public class Example { public static void ex() { System.out.println(&quot;no object needed&quot;); } public static void main(String[] args){ ex(); } } Example.main(null); . no object needed . extends in when a class is inherited from a different class | subclass = class that inherits | superclass = class inherited from | . public class Super { public void ex() { System.out.println(&quot;test output&quot;); } } . public class Sub extends Super { public static void main (String[] args) { Sub ex1 = new Sub(); ex1.ex(); } } Sub.main(null); . test output . toString() returns value to string. automatically ran. can be overrided | hashCode() returns the hash code of an object . | Polymorphism is when you have multiple methjods with the same name but different parameters. . | Overloading is when you have multiple methods with the same name but different parameters. | Overriding is when you have a method with the same name and parameters as a method in a superclass but you want to modify the method in the subclass. | Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. | Big O notation tells you the number of operations an algorithm will make. Determines efficiancy | . &lt;/div&gt; | .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/12/01/vocab15.html",
            "relUrl": "/tri2/2022/12/01/vocab15.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Title",
            "content": "//Hack 3 // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int value; for (int i : num) { value +=i; } System.out.println(value); . 9 .",
            "url": "https://willcyber.github.io/fastpages/2022/11/30/unit7.html",
            "relUrl": "/2022/11/30/unit7.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "FRQ1",
            "content": "// Prototype Implementation public class APCalendar { /** Returns true if year is a leap year and false otherwise. * isLeapYear(2019) returns False * isLeapYear(2016) returns True */ private static boolean isLeapYear(int year) { // implementation not shown return false; } /** Returns the value representing the day of the week * 0 denotes Sunday, * 1 denotes Monday, ..., * 6 denotes Saturday. * firstDayOfYear(2019) returns 2 for Tuesday. */ private static int firstDayOfYear(int year) { // implementation not shown return 0; } /** Returns n, where month, day, and year specify the nth day of the year. * This method accounts for whether year is a leap year. * dayOfYear(1, 1, 2019) return 1 * dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year * dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. */ private static int dayOfYear(int month, int day, int year) { // implementation not shown return 1; } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) { // to be implemented in part (a) return 0; } /** Returns the value representing the day of the week for the given date * Precondition: The date represented by month, day, year is a valid date. */ public static int dayOfWeek(int month, int day, int year) { // to be implemented in part (b) return 0; } /** Tester method */ public static void main(String[] args) { // Private access modifiers System.out.println(&quot;isLeapYear: &quot; + APCalendar.isLeapYear(2022)); System.out.println(&quot;firstDayOfYear: &quot; + APCalendar.firstDayOfYear(2022)); System.out.println(&quot;dayOfYear: &quot; + APCalendar.dayOfYear(1, 1, 2022)); // Public access modifiers System.out.println(&quot;numberOfLeapYears: &quot; + APCalendar.numberOfLeapYears(2000, 2022)); System.out.println(&quot;dayOfWeek: &quot; + APCalendar.dayOfWeek(1, 1, 2022)); } } .",
            "url": "https://willcyber.github.io/fastpages/tri2/2022/11/14/frq1.html",
            "relUrl": "/tri2/2022/11/14/frq1.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Notes",
            "content": "List of Vocab . Casting, specifically for Division | Casting, specifically for Truncating or Rounding | Wrapper Classes, why wrap int, double. Show examples | Concatenation, explain or illustrate rules on mixed type Concatenation | Math class, specifically Random usage | Compound Boolean Expression . | Truth Tables | De Morgan’s Law | Comparing Numbers | Comparing Strings | Comparing Objects | for loop, enhanced for loop | while loop versus do while loop | nested loops | Creating a Class, describe Naming Conventions | Constructor, describe why there is no return | Accessor methods, relationship to getter | Mutator methods, relationship to setter, describe void return type | Static variables, Class variables, show use case in code | Show use case of access modifiers: Public, Private, Protected | Static methods, Class methods | this Keyword | main method, tester methods | Inheritance, extends | Subclass constructor, super Keyword | Overloading a method, same name different parameters | Overriding a method, same signature of a method | Abstract Class, Abstract Method | Standard methods: toString(), equals(), hashCode() | Late binding of object, referencing superclass object, ie Animal a = new Chicken(); Animal b = new Goat(); | Polymorphism: any of overloading, overriding, late binding | Big O notation for Hash map, Binary Search, Single loop, Nested Loop | . Unit 1 . casting is when you assign a value of one primitive data type to another type. In integer division, the decimal is truncated. You need to use a double in order to keep the decimal | casting rounds down while Math.round rounds to the nearest int | . int, boolean, char, and double are primitives Strings and other classes are objects Compare primitives with == and objects with .equals() Objects have properties while primitives do not . Unit 2 . Wrapper classes allow you to use primatives as objects. One use case would be in arraylists, where only objects are stored. Ex: ArrayList myNumbers = new ArrayList(); | Concatanation is when you combine primatives together. For example, you would use the .append for combining two strings. You could use “+” to add together integers and doubles. You can concatanate a string with an integer through “+”. | Math.round rounds to the nearest int | Math.random gives a random number between two numbers | . Objects are instances Methods have to specify return type which can be void, or nothing Static methods tied with the class and defined once across all instances Method overloading is when multiple methods with the same name have different parameters . Unit 3 . Compound boolean values uses logical operators AND and OR to evaulate an expression as true or false | | . Unit 4 . While loops run when conditional is true For loops defines a variable that changes every loop and runs when the conditional is true Nested iteration can be good in situations Enhanced for loops can loop through all elements in an array but the array cannot be modified when it is looping . Unit 5 . Classes have properties and methods Properties store information about each object private and public Methods runs code Getter and setter methods are coded to modify private attributes . Unit 6 . Arrays are objects defined by type[] name = new type[size] or initialized with elements using type[] name = new type[]{a,b,c,…} Loops an enhanced can iterate through arrays Index goes from 0 to size-1 Algorithms can be used to modify or get info about arrays . Unit 7 . Wrapper class stores prim in objects | make sure to specify the data type | return arraylist using the return command | traverse arraylist through for loops and while loops | get() to get an element | size() to get size | .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/11/08/notes.html",
            "relUrl": "/markdown/2022/11/08/notes.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Final Blog",
            "content": "N@TM . Presented on our database quiz and api | Great experience talking with students and parents | Looked at studio arts and AP CSP projects Tested the Team Berries Dictionary | . | . . Recap of units . HW . Unit 1 HW . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Is the final in a seperate category? True to False&quot;); boolean tof = myObj.nextBoolean(); // Read user input System.out.println(&quot;Final in a seperate category is &quot; + tof); // Output user input if (tof) { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is % of grade that is final?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); double output = (desired - (grade * ((100-percent)/100)))/(percent/100); System.out.println(&quot;You need a &quot; + output + &quot; on your final&quot;); } else { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is the % of grade that is test category?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is current % in tests category?&quot;); double currentpercent = myObj.nextDouble(); System.out.println(currentpercent + &quot;%&quot;); System.out.println(&quot;What is the current amount of points in the test category?&quot;); int currentpts = myObj.nextInt(); System.out.println(currentpts); System.out.println(&quot;How many pts is the final?&quot;); int pts = myObj.nextInt(); System.out.println(pts); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); // double output = (desired - ((grade * currentpercent)*((100 - percent) / 100)))/((currentpts + pts)/(percent / 100))- currentpts; double output = ((desired - grade+currentpercent)*(currentpts+pts)-currentpts*currentpercent)/100; // double output = // desired = percent * // current grade = System.out.println(&quot;You need &quot; + output + &quot; pts on your final&quot;); } } } ScanPrimitives.main(null); . Is the final in a seperate category? True to False Final in a seperate category is true What is your current grade rn? 90.0 What is % of grade that is final? 25.0% What is your desired grade? 93.0 You need a 102.0 on your final . Unit 2 . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } else { return guess2; } } . Unit 4 . public class CaesarCipher { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String[] capitalLetters = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;}; static String message1 = &quot;Kfzb gly!&quot;; static String message2 = &quot;zlab zlab zlab&quot;; static String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String letterIndividual = &quot;&quot;; public CaesarCipher(String msg) { for (int i = 0; i &lt; msg.length(); i++) { letterIndividual = msg.substring(i, i+1); if (letterIndividual.equals(&quot; &quot;)) { System.out.print(&quot; &quot;); } if (letterIndividual.equals(&quot;!&quot;)) { System.out.print(&quot;!&quot;); } for (int j = 0; j &lt; letters.length; j++) { if (letterIndividual.equals(letters[j])) { System.out.print(letters[(j+3)%26]); } if (letterIndividual.equals(capitalLetters[j])) { System.out.print(capitalLetters[(j+3)%26]); } } } System.out.println(&quot;&quot;); } public static void main(String[] args) { CaesarCipher decode = new CaesarCipher(message1); CaesarCipher decode2 = new CaesarCipher(message2); CaesarCipher decode3 = new CaesarCipher(message3); } } CaesarCipher.main(null) . Nice job! code code code supercalifragilisticexpialidocious . Unit 5 . did the form mc with Lily | . public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 . Unit 6 . Not too sure what I was thinking. names[n] would be incorrect in a foreach loop . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(names[n], gradYear, true); memberList.add(member); } } . Revised . public void addMembers(String[] names, int gradYear) { for (String n : names) { memberInfo member = new MemberInfo(n, gradYear, true); memberList.add(member); } } . CB corrections . Score . #15 . misread the question. thought it wanted the array to be sorted in decreasing order | . #21 . We are trying to find the closest number so subtracting the row number will not make any sense. Not too sure why I chose E | . #22 . Need to use typecasting to let the compiler know that the object stored in the books array at this index is actually an AudioBook object. Didn&#39;t realize that there would be no compile error because igt will run the lengt() method in Audiobook because books[0] is in it | . #33 . ahhhh brain fart. somehow I thought that because sum would be eventually false, the loop will break. It will only break if they are both false, which will never happen because k will be constant. | . #40 . didn&#39;t see that it kept on calling whatsitdo | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/11/08/final_blog.html",
            "relUrl": "/jupyter/2022/11/08/final_blog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Practice",
            "content": "2015 frq . 1 a .",
            "url": "https://willcyber.github.io/fastpages/2022/10/26/recapofjava.html",
            "relUrl": "/2022/10/26/recapofjava.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "HW",
            "content": "// java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner myObj = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Is the final in a seperate category? True to False&quot;); boolean tof = myObj.nextBoolean(); // Read user input System.out.println(&quot;Final in a seperate category is &quot; + tof); // Output user input if (tof) { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is % of grade that is final?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); double output = (desired - (grade * ((100-percent)/100)))/(percent/100); System.out.println(&quot;You need a &quot; + output + &quot; on your final&quot;); } else { System.out.println(&quot;What is your current grade rn?&quot;); double grade = myObj.nextDouble(); System.out.println(grade); System.out.println(&quot;What is the % of grade that is test category?&quot;); double percent = myObj.nextDouble(); System.out.println(percent + &quot;%&quot;); System.out.println(&quot;What is current % in tests category?&quot;); double currentpercent = myObj.nextDouble(); System.out.println(currentpercent + &quot;%&quot;); System.out.println(&quot;What is the current amount of points in the test category?&quot;); int currentpts = myObj.nextInt(); System.out.println(currentpts); System.out.println(&quot;How many pts is the final?&quot;); int pts = myObj.nextInt(); System.out.println(pts); System.out.println(&quot;What is your desired grade?&quot;); double desired = myObj.nextDouble(); System.out.println(desired); // double output = (desired - ((grade * currentpercent)*((100 - percent) / 100)))/((currentpts + pts)/(percent / 100))- currentpts; double output = ((desired - grade+currentpercent)*(currentpts+pts)-currentpts*currentpercent)/100; // double output = // desired = percent * // current grade = System.out.println(&quot;You need &quot; + output + &quot; pts on your final&quot;); } } } ScanPrimitives.main(null); . Is the final in a seperate category? True to False Final in a seperate category is false What is your current grade rn? 93.0 What is % of grade that is test category? 30.0% What is current % in tests category? 90.0% What is the current amount of points in the test category? 100 How many pts is the final? 50 What is your desired grade? 90.0 You need 40.5 pts on your final .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/10/22/unit1hw.html",
            "relUrl": "/jupyter/2022/10/22/unit1hw.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Title",
            "content": "message = &quot;91 322 57 124 40 406 272 147 239 285 353 272 77 110 296 262 299 323 255 337 150 102&quot; alphabet = string.ascii_lowercase + string.digits + &quot;_&quot; FLAG = &quot;picoCTF{&quot; for i in message.split(): FLAG += alphabet[int(i) % 37] FLAG += &quot;}&quot; print(FLAG) . picoCTF{r0und_n_r0und_add17ec2} . import string message = &quot;104 290 356 313 262 337 354 229 146 297 118 373 221 359 338 321 288 79 214 277 131 190 377&quot; alphabet = string.ascii_lowercase + string.digits + &quot;_&quot; FLAG = &quot;picoCTF{&quot; for i in message.split(): FLAG += alphabet[pow(int(i), -1, 41) - 1] #pow(A, power, B) FLAG += &quot;}&quot; print(&quot;Flag:&quot;, FLAG) . Flag: picoCTF{1nv3r53ly_h4rd_8a05d939} . public class Party { private int boxesOfFood; private int numOfPeople; public Party(int people, int foodBoxes) { numOfPeople = people; boxesOfFood = foodBoxes; } public void orderMoreFood( int additionalFoodBoxes) { int updatedAmountOfFood; boxesOfFood = updatedAmountOfFood; } public void eatFoodBoxes(int eatenBoxes) { boxesOfFood = updatedAmountOfFood - eatenBoxes; } } . | boxesOfFood = updatedAmountOfFood - eatenBoxes; cannot find symbol symbol: variable updatedAmountOfFood | boxesOfFood = updatedAmountOfFood; variable updatedAmountOfFood might not have been initialized .",
            "url": "https://willcyber.github.io/fastpages/2022/10/22/ctf.html",
            "relUrl": "/2022/10/22/ctf.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Quiz",
            "content": "Question choiceA choiceB .",
            "url": "https://willcyber.github.io/fastpages/data/quiz",
            "relUrl": "/data/quiz",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Test",
            "content": "Joke HaHa Boohoo .",
            "url": "https://willcyber.github.io/fastpages/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Database video notes",
            "content": "Video Notes . Overview . Spring Data JPA: abstracts all complexity needed to interact with databases. Works well with spring boot applications | JPA (Java Persistance API): accessing, persisting, and managing data between java objects | Hibernate: a popular implementation of JPA. Basically takes any java object and extracts it with ORM (object relational mapping). Makes it so that we have a java class which we can map to a database | . Application.properties . spring.datasource.url: connection to database (specify name) | spring.datasource.username: username, don&#39;t needa specify since local rn | spring.datasource.password: password, don&#39;t needa specify since local rn | spring.jpa.hibernate.ddl-auto=create-drop: create the schema and before the application shuts down, drop everything. We need this since we are testing various stuff with spring data JPA | spring.jpa.show-sql=true: so we can see the sql statements that hibernate generates | spring.jpa.propertoes.hibernate.dialect=org.hibermate.dialect.PostgreSQLDialect: Specifying the dialect to be Postgresql | spring.jpa.propertoes.hibernate.format_sql=true: sql is formatted | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/10/08/databasenotes.html",
            "relUrl": "/jupyter/2022/10/08/databasenotes.html",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Arraylist",
            "content": "import java.util.ArrayList; ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;hi&quot;); list.add(&quot;hey&quot;); list.add(&quot;hello&quot;); list.add(&quot;nice&quot;); . true . System.out.println(list); . [hi, hey, hello, nice] . add(int index, element) . list.add(1, &quot;test&quot;); . System.out.println(list); . [hi, test, hey, hello, nice] . addAll(int index, Collection collection) . ArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;(); list2.add(&quot;apple&quot;); list2.add(&quot;orange&quot;); list2.add(&quot;grape&quot;); list2.add(&quot;pineapple&quot;); System.out.println(list2); . [apple, orange, grape, pineapple] . list.addAll(3, list2); System.out.println(list); . [hi, test, hey, apple, orange, grape, pineapple, hello, nice] . size() . list.size(); . 9 . list2.size(); . 4 . clear() . list2.clear(); System.out.println(list2); . [] . remove(int index) . list.remove(2); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice] . remove(element) . list.add(&quot;nice&quot;); System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice, nice] . list.remove(&quot;nice&quot;); . true . System.out.println(list); . [hi, test, apple, orange, grape, pineapple, hello, nice] . get(int index) . list.get(3); // first element is actually the 0th index . orange . set(int index, element) . list.set(4, new String(&quot;grapeskittlessuck?&quot;)); System.out.println(list); . [hi, test, apple, orange, grapeskittlessuck?, pineapple, hello, nice] . indexOf(element) . list.indexOf(&quot;orange&quot;); . 3 . list.indexOf(&quot;thisdoesntexist&quot;); . -1 . equals(element) . list.equals(&quot;doesnt equal&quot;); . false . hashCode() . list.hashCode(); . -872586150 . isEmpty() . list.isEmpty(); . false . ArrayList&lt;String&gt; empty = new ArrayList&lt;String&gt;(); empty.isEmpty(); . true .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/10/03/arraylist.html",
            "relUrl": "/jupyter/2022/10/03/arraylist.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Covid",
            "content": "Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Critical Cases Active Cases .",
            "url": "https://willcyber.github.io/fastpages/covidAPI",
            "relUrl": "/covidAPI",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Api",
            "content": "State Abbreviation Capital Population Population Density (by km) .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/10/02/api.html",
            "relUrl": "/markdown/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Title",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://jgentes-crime-data-v1.p.rapidapi.com/crime&quot;)) .header(&#39;X-RapidAPI-Key&#39;: &#39;99055c6785msh0eec04755216d76p1d458djsnf1bc6a1c3b66&#39;) .header(&#39;X-RapidAPI-Host&#39;: &#39;jgentes-Crime-Data-v1.p.rapidapi.com&#39;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . package com.nighthawk.spring_portfolio.mvc.covid; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.covid; illegal start of expression . OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(&quot;https://weatherbit-v1-mashape.p.rapidapi.com/forecast/3hourly?lat=35.5&amp;lon=-78.5&quot;) .get() .addHeader(&quot;X-RapidAPI-Key&quot;, &quot;99055c6785msh0eec04755216d76p1d458djsnf1bc6a1c3b66&quot;) .addHeader(&quot;X-RapidAPI-Host&quot;, &quot;weatherbit-v1-mashape.p.rapidapi.com&quot;) .build(); Response response = client.newCall(request).execute(); .",
            "url": "https://willcyber.github.io/fastpages/2022/09/28/rapidapi.html",
            "relUrl": "/2022/09/28/rapidapi.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Creating a table using JavaScript for the CSA Team Project",
            "content": ". .",
            "url": "https://willcyber.github.io/fastpages/js/2022/09/27/jstable.html",
            "relUrl": "/js/2022/09/27/jstable.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . ASCII . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j+=1) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;-&quot;; } else if (g &gt;= 170) { str = &quot;*&quot;; } else if (g &gt;= 160) { str = &quot;+&quot;; } else if (g &gt;= 150) { str = &quot;j&quot;; }else if (g &gt;= 140) { str = &quot;n&quot;; }else if (g &gt;= 130) { str = &quot;V&quot;; } else if (g &gt;= 120) { str = &quot;3&quot;; } else if (g &gt;= 110) { str = &quot;5&quot;; } else if (g &gt;= 100) { str = &quot;&amp;&quot;; } else if (g &gt;= 90) { str = &quot;g&quot;; }else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 images/MonaLisa.png Scaled: 55625 128x136 images/tmp/MonaLisa.png . Grey scale . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; double r=0.299; double g=0.587; double b=0.114; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String changedFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.changedFile = this.outDir + name + &quot;Gray.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void grayscale() { BufferedImage img; try { File file = new File(this.changedFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed() * r); int green = (int)(col.getGreen() * g); int blue = (int)(col.getBlue() * b); Color rgb = new Color(red, green, blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.changedFile)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { // Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.grayscale(); } } Pics.main(null); . . Green . //green scale double r=0; double g=1; double b=0; Pics.main(null); . . Red . //red scale double r=1; double g=0; double b=0; Pics.main(null); . . Blue . //blue scale double r=0; double g=0; double b=1; Pics.main(null); . .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/27/images.html",
            "relUrl": "/jupyter/2022/09/27/images.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Morts code",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(8); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } } . public class FiboFor extends Fibo { public FiboFor() { super(); } public FiboFor(int nth) { super(nth); } @Override protected void init() { super.name = &quot;For Extends&quot;; long limit = this.size; // for loops are likely the most common iteration structure, all the looping facts are in one line for (long[] f = new long[]{0, 1}; limit-- &gt; 0; f = new long[]{f[1], f[0] + f[1]}) this.setData(f[0]); } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For Extends fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] . public class FiboStream extends Fibo { public FiboStream() { super(); } public FiboStream(int nth) { super(nth); } @Override protected void init() { super.name = &quot;Stream Extends&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(super.size) .forEach(f -&gt; super.setData(f[0]) ); } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { FiboStream fib = new FiboStream(); fib.print(); } } FiboStream.main(null); . Init method = Stream Extends fibonacci Number 8 = 13 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] .",
            "url": "https://willcyber.github.io/fastpages/2022/09/27/abstractfib.html",
            "relUrl": "/2022/09/27/abstractfib.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Javascript",
            "content": "console.log(&quot;Test console&quot;); . Test console . var msg = &quot;Hello, World!&quot;; console.log(msg); function logIt(output) { console.log(output); } logIt(msg); . Hello, World! Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . function Person(name, class1, class2, class3, class4, class5) { this.name = name; this.class1 = class1; this.class2 = class2; this.class3 = class3; this.class4 = class4; this.class5 = class5; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;CSA&quot;, &quot;CSA&quot;, &quot;CSA&quot;, &quot;CSA&quot;, &quot;CSA&quot;); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, class1: &#39;CSA&#39;, class2: &#39;CSA&#39;, class3: &#39;CSA&#39;, class4: &#39;CSA&#39;, class5: &#39;CSA&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;} object ; Person { name: &#39;Mr M&#39;, class1: &#39;CSA&#39;, class2: &#39;CSA&#39;, class3: &#39;CSA&#39;, class4: &#39;CSA&#39;, class5: &#39;CSA&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;William&quot;, &quot;Bio&quot;, &quot;CSA&quot;, &quot;Stats&quot;, &quot;APUSH&quot;, &quot;APEL&quot;), new Person(&quot;Lily&quot;, &quot;APEL&quot;, &quot;CSA&quot;, &quot;Stats&quot;, &quot;APUSH&quot;, &quot;CSP&quot;), new Person(&quot;Vidhi&quot;, &quot;APEL&quot;, &quot;CSA&quot;, &quot;Physics&quot;, &quot;Hon Princ Eng&quot;, &quot;&quot;), new Person(&quot;Riya&quot;, &quot;Calc BC&quot;, &quot;CSA&quot;, &quot;Physics&quot;, &quot;APEL&quot;, &quot;&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, class1: &#39;CSA&#39;, class2: &#39;CSA&#39;, class3: &#39;CSA&#39;, class4: &#39;CSA&#39;, class5: &#39;CSA&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;William&#39;, class1: &#39;Bio&#39;, class2: &#39;CSA&#39;, class3: &#39;Stats&#39;, class4: &#39;APUSH&#39;, class5: &#39;APEL&#39;, role: &#39;Student&#39; }, Person { name: &#39;Lily&#39;, class1: &#39;APEL&#39;, class2: &#39;CSA&#39;, class3: &#39;Stats&#39;, class4: &#39;APUSH&#39;, class5: &#39;CSP&#39;, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, class1: &#39;APEL&#39;, class2: &#39;CSA&#39;, class3: &#39;Physics&#39;, class4: &#39;Hon Princ Eng&#39;, class5: &#39;&#39;, role: &#39;Student&#39; }, Person { name: &#39;Riya&#39;, class1: &#39;Calc BC&#39;, class2: &#39;CSA&#39;, class3: &#39;Physics&#39;, class4: &#39;APEL&#39;, class5: &#39;&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 1&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 2&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 3&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 4&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class 5&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class1 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class2 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class3 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class4 + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + compsci.classroom[row].class5 + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameClass 1Class 2Class 3Class 4Class 5 . Mr M | CSA | CSA | CSA | CSA | CSA | William | Bio | CSA | Stats | APUSH | APEL | Lily | APEL | CSA | Stats | APUSH | CSP | Vidhi | APEL | CSA | Physics | Hon Princ Eng | | Riya | Calc BC | CSA | Physics | APEL | | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/25/javascript.html",
            "relUrl": "/jupyter/2022/09/25/javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Program and Design",
            "content": "Crime News . Local News | Safety Against Crime | National News | About page | . Team Wire frame . . . . .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/24/programdesign.html",
            "relUrl": "/jupyter/2022/09/24/programdesign.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Fibonacci",
            "content": "Old static loops . For Loops . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } public class Fibext extends Fibo { public void init() { super.name = &quot;For loop&quot;; int count = super.size; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } static public void main(String[] args) { long start = System.nanoTime(); Fibext fibF = new Fibext(); long end = System.nanoTime(); fibF.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } Fibext.main(null); . Init method = For loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 33100 ns . While Loop . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;for loop&quot;; long[] nums = new long[]{0, 1}; for (int i = 0; i &lt; this.size; i++) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } public class Fibext extends Fibo { public void init() { super.name = &quot;While loop&quot;; int count = super.size; long[] nums = new long[]{0, 1}; int i = 0; while (i &lt; this.size) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; } } static public void main(String[] args) { long start = System.nanoTime(); Fibext fibF = new Fibext(); long end = System.nanoTime(); fibF.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } Fibext.main(null); . Init method = For loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 54100 ns . Recursion . import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;recursion&quot;; recursiveLoop(0); } long[] nums = new long[]{0, 1}; public void recursiveLoop(int i) { if (i &lt; this.size) { this.setData(nums[0]); long index1 = nums[0]; long index2 = nums[1]; nums[0] = index2; nums[1] = index1 + index2; i++; recursiveLoop(i); } } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { long startTime = System.nanoTime(); Fibo fib = new Fibo(); fib.print(); long endTime = System.nanoTime(); long duration = (endTime - startTime); } } Fibo.main(null); . Init method = recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Fixed Abstract loops . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } System.out.println(); } } . public class FibF extends Fibo { public void init() { super.name = &quot;For&quot;; int count = super.size; long[] previous = new long[] {0, 1}; for (int i = 0; i &lt; count; i++) { super.setData(previous[0]); previous = new long[] {previous[1], previous[0] + previous[1]}; } } static public void main(String[] args) { long start = System.nanoTime(); FibF fibF = new FibF(); long end = System.nanoTime(); fibF.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } FibF.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 70500 ns . public class FibW extends Fibo { public void init() { super.name = &quot;While&quot;; int count = 0; long[] previous = new long[] {0, 1}; while (count &lt; super.size) { super.setData(previous[0]); previous = new long[] {previous[1], previous[0] + previous[1]}; count++; } } static public void main(String[] args) { long start = System.nanoTime(); FibW fibW = new FibW(); long end = System.nanoTime(); fibW.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } FibW.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 31000 ns . public class FibR extends Fibo { public void init() { this.init(super.size); } long[] previous = new long[]{0, 1}; public void init(int count) { if (count &lt; super.size) { super.setData(previous[0]); previous = new long[] {previous[1], previous[0] + previous[1]}; count++; this.init(count); } } static public void main(String[] args) { long start = System.nanoTime(); FibR fibR = new FibR(); long end = System.nanoTime(); fibR.print(); System.out.println(&quot;Time: &quot; + (end-start) + &quot; ns&quot;); } } FibW.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] Time: 135500 ns .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/23/Fibonacci.html",
            "relUrl": "/jupyter/2022/09/23/Fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Agile and Roles",
            "content": "Roles . Scrum Master: Vidhi Kulkarni | DevOps: Lily Wu | Frontened Developer: Riya Patil | Backend Developer: William Wu | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/15/agile.html",
            "relUrl": "/jupyter/2022/09/15/agile.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "FRQ",
            "content": "2022 FRQ Problem #1 part a . First Attempt . public int getScore { if (goalReached(levelOne) = true) { int score = 200; if (goalReached(levelTwo) = true) { int score = score+100; if (goalReached(levelThree) = true) { int score = score+500; if (isBonus() = true) { int score = score*3; } } } } } . Comments . I should define score at the very beginning | Bonus game has nothing to do with what level you completed (misread question) | getscore needs to have two parenthesis -&gt; getscore() | levelOne and the other levels are objects | goalReached is a function | I don&#39;t need to add the actual pt value, just use the getPoints parameter my syntax wasn&#39;t right either. need to practice this and get out of the python mindset | . | forgot to return score | . Solution . public int getScore() { int score = 0; if (levelOne.goalReached()) { score = levelOne.getPoints(); if (levelTwo.goalReached()) { score += levelTwo.getPoints(); if (levelThree.goalReached()) { score += levelThree.getPoints(); } } } if (isBonus()) { score *= 3; } . 2022 FRQ Problem #1 part b . public int playManyTimes(num) { int max = 0; for (int i = 0; i&lt;num;i++) { play(); int score = getScore(); if (score &gt; max) { max = scorel } } } return max; . Comments . Definitely did better than part a | return max needs to be inside playManyTimes | num needs to be defined as an integer | . Solution . public int playManyTimes(int num) { int max = 0; for (int i = 0; i&lt;num;i++) { play(); int score = getScore(); if (score &gt; max) { max = scorel } } return max; } .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/13/aptestprep.html",
            "relUrl": "/jupyter/2022/09/13/aptestprep.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Arrays",
            "content": "Monkeys printed horizontally . This is done by flipping the horizontal and vertical for loops . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; // int monkeyCount = 6; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col]); //this is new line between separate parts // System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Custom Example . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkeys: a 2D array of Monkeys * As well as method to print the Poem */ class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;( ^ &quot;, &quot; ) ( &#39;)&quot;, &quot;( / )&quot;, &quot; )(__)| &quot; }, //Monkey 1 { &quot; ___ &quot;, //[1][0] &quot; (o o) &quot;, &quot; ( V ) &quot;, &quot; --m-m- &quot; }, //Monkey 2 { &quot; _&quot;, //[2][0] &quot; &gt;&lt;_&gt; &quot;, &quot; &quot;, &quot; &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Animals jumping in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; // int monkeyCount = 6; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little animals jumping on the bed...&quot;); System.out.println(&quot;One fell off and bumped his head&quot;); System.out.println(&quot;Mama called the doctor and the doctor said&quot;); System.out.println(&quot;No more animals jumping on the bed!&quot;); //how many separate parts are there in a monkey monkey? for (int col = 0; col &lt; monkeys[col].length; col++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int row = 0; row &lt; monkeyCount; row++) { // prints specific part of the monkey from the column System.out.print(monkeys[row][col]); //this is new line between separate parts // System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more animals jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; D: &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Animals jumping in Java Loopy 5 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ _ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) ) ( &#39;) (o o) &gt;&lt;_&gt; _⍾_/ _⍾_/ ( / ) ( V ) ==3== ==4== )(__)| --m-m- _/ _ _/ _ 4 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ _ ʕ ͡° ͜ʖ ° ͡ʔ ) ( &#39;) (o o) &gt;&lt;_&gt; _⍾_/ ( / ) ( V ) ==3== )(__)| --m-m- _/ _ 3 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ _ ) ( &#39;) (o o) &gt;&lt;_&gt; ( / ) ( V ) )(__)| --m-m- 2 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ___ ) ( &#39;) (o o) ( / ) ( V ) )(__)| --m-m- 1 little animals jumping on the bed... One fell off and bumped his head Mama called the doctor and the doctor said No more animals jumping on the bed! ( ^ ) ( &#39;) ( / ) )(__)| No more animals jumping on the bed 0000000000000000000000000000000000 D: . Questions . Is this program in more of an Imperative Programming Style or OOP style? Explain. . Imperative Programming Style because it is not using objects. We are just coding to solve a problem, not manipulating data . Is each Monkey an object? . Nope! .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/12/arrays.html",
            "relUrl": "/jupyter/2022/09/12/arrays.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Focus and Habits",
            "content": "Video Notes . Students often feel burned out and sacrifice their mental health for grades | Do something you love | Change your behavior | Socialize with others | Exercise, sleep, be mindful, set goals | . Gratitude list . my supportive friends that always are there for me and bring me a smile | my parents who are supportive and help me when times get rough | my sister who always finds a way to make me laugh | my grandparents who give good advice and wants the best for me | . Goals . maintain a good balance between academics and life | find activities or hobbies to relieve stress | SLEEP MORE | .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/09/Focus-and-Habits.html",
            "relUrl": "/jupyter/2022/09/09/Focus-and-Habits.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "If else statements",
            "content": "if statements . If the condition is true, run the code inside . int test = 1; if (test == 1) { System.out.println(&quot;test pass&quot;); } . test pass . if-else statements . If the condition is true, run the code inside If nt of the if statements are true, run the else statement. . int test = 0; if (test == 1) { System.out.println(&quot;test pass&quot;); } else { System.out.println(&quot;test failed&quot;); } . test failed . Bool . boolean t = true; boolean f = false; if (t) { System.out.println(&quot;1&quot;); } if (f) { System.out.println(&quot;2&quot;); } if (f &amp;&amp; !t) { System.out.println(&quot;3&quot;); } if (t &amp;&amp; !f) { System.out.println(&quot;4&quot;); } if (t || f) { System.out.println(&quot;5&quot;); } if (!t || !f) { System.out.println(&quot;6&quot;); } if ((t &amp;&amp; !f) &amp;&amp; (t || f)) { System.out.println(&quot;7&quot;); } if ((!t || (t &amp;&amp; f)) || t ) { System.out.println(&quot;8&quot;); } if (!((f || !t) || (f &amp;&amp; t))) { System.out.println(&quot;9&quot;); } if (!((f &amp;&amp; !t) || (f || t))) { System.out.println(&quot;10&quot;); } . 1 4 5 6 7 8 9 . int test1 = 3; int test2 = 1; if (test1 == 0) { int test2 = 10; } else if (test1 == 3) { int test2 = 5; int test1 = 0; System.out.println(&quot;Nice&quot;); } else { int test2 = 3; } if (test1 &gt; test2) { System.out.println(&quot;Work&quot;); } else if (test1 &lt; test2) { System.out.println(&quot;Job&quot;); } else { System.out.println(&quot;Code&quot;); } . Nice Work . public class Test { public static void main(String[] args) { String s1 = &quot;HELLO&quot;; String s2 = &quot;HELLO&quot;; String s3 = new String(&quot;HELLO&quot;); System.out.println(s1 == s2); System.out.println(s1 == s3); System.out.println(s1.equals(s2)); System.out.println(s1.equals(s3)); } } Test.main(null); . true false true true . Rock paper Scissors using if-elseif-else . See comments for futher details :D . public class RPS { public static final String ROCK = &quot;ROCK&quot;; public static final String PAPER = &quot;PAPER&quot;; public static final String SCISSORS = &quot;SCISSORS&quot;; //Scanner class to detect what move user plays public static String getPlayerMove() { Scanner in = new Scanner(System.in); String input = in.next(); String playermove = input.toUpperCase(); System.out.println(&quot;Player move is: &quot;+ playermove);* return playermove; } //Computer mobve is randomly generated through random function public static String getComputerMove() { String computermove; Random random = new Random(); int input = random.nextInt(3)+1; if (input == 1) computermove = RPS.ROCK; else if(input == 2) computermove = RPS.PAPER; else computermove = RPS.SCISSORS; System.out.println(&quot;Computer move is: &quot; + computermove); System.out.println(); return computermove; } public static void main(String args[]) { System.out.println(&quot;Enter any t of the following inputs: &quot;); System.out.println(&quot;ROCK&quot;); System.out.println(&quot;PAPER&quot;); System.out.println(&quot;SCISSORS&quot;); System.out.println(); String playerMove = getPlayerMove(); String computerMove = getComputerMove(); //Tie if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); // Player = Rock, Computer = Paper else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Computer Wins&quot;); // Player = Rock, Computer = Scissors else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Player Wins&quot;); // Player = Paper, Computer = Scissors else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Computer Wins&quot;); // Player = Paper, Computer = Rock else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Player Wins&quot;); // Player = Scissors, Computer = Paper else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Player Wins&quot;); // Player = Scissors, Computer = Rock else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Computer Wins&quot;); // Player = Paper, Computer = Scissors else if (playerMove.equals(RPS.PAPER)) System.out.println(computerMove.equals(RPS.SCISSORS) ? &quot;Computer Wins&quot;: &quot;Player wins&quot;); // if input isn&#39;t rock, paper, or scissors else System.out.println(&quot;There was an error, please try again&quot;); } } RPS.main(null); . | System.out.println(&#34;Player move is: &#34;+ playermove);* illegal start of expression | return playermove; illegal start of expression . Switch Case . public class RPS { public static final String ROCK = &quot;ROCK&quot;; public static final String PAPER = &quot;PAPER&quot;; public static final String SCISSORS = &quot;SCISSORS&quot;; //Scanner class to detect what move user plays public static String getPlayerMove() { Scanner in = new Scanner(System.in); String input = in.next(); String playermove = input.toUpperCase(); System.out.println(&quot;Player move is: &quot;+ playermove); return playermove; } public static void main(String args[]) { System.out.println(&quot;Enter any t of the following inputs: &quot;); System.out.println(&quot;ROCK&quot;); System.out.println(&quot;PAPER&quot;); System.out.println(&quot;SCISSORS&quot;); System.out.println(); String playerMove = getPlayerMove(); String computerMove = getComputerMove(); switch (playerMove) { case ROCK: // if user input ROCK if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(RPS.ROCK) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; case PAPER: // if user input is Paper if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.SCISSORS)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(RPS.PAPER) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; case SCISSORS: // if user input is scissors if (playerMove.equals(computerMove)) System.out.println(&quot;Game is Tie !!&quot;); else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.ROCK)) System.out.println(&quot;Computer Wins&quot;); else if (playerMove.equals(RPS.SCISSORS) &amp;&amp; computerMove.equals(RPS.PAPER)) System.out.println(&quot;Player Wins&quot;); else System.out.println(&quot;There was an error, please try again&quot;); break; } } //Computer mobve is randomly generated through random function public static String getComputerMove() { String computermove; Random random = new Random(); int input = random.nextInt(3)+1; if (input == 1) computermove = RPS.ROCK; else if(input == 2) computermove = RPS.PAPER; else computermove = RPS.SCISSORS; System.out.println(&quot;Computer move is: &quot; + computermove); System.out.println(); return computermove; } } RPS.main(null); . Enter any one of the following inputs: ROCK PAPER SCISSORS Player move is: PAPER Computer move is: ROCK Player Wins . De Morgan&#39;s Law . In essence, Not (A and B) is the same as Not A or Not B Remember that &quot;!&quot; denotes Not. . This . boolean test1 = true; boolean test2 = true; if (!(test1 &amp;&amp; test2)){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true&quot;); } . They are both true . is the same as this . boolean test1 = true; boolean test2 = true; if (!test1 || !test2){ System.out.println(&quot;Test1 and Test2 are both false&quot;); } else{ System.out.println(&quot;They are both true once again&quot;); } . They are both true once again .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/06/if-else-statements.html",
            "relUrl": "/jupyter/2022/09/06/if-else-statements.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Code.org takeaways",
            "content": "Let&#39;s refer to Lesson 7 Part 2 on Code.org . MyNeighborhood.java . import org.code.neighborhood.Painter; public class MyNeighborhood { public static void main(String[] args) { PainterPlus myPainterPlus = new PainterPlus(); // Lesson 6 Level 3 // TO DO #1: Instantiate a PainterPlus object. // Lesson 7 Level 2 // TO DO #1: Navigate the PainterPlus object // to the traffic cone. myPainterPlus.move(); myPainterPlus.move(); myPainterPlus.move(); myPainterPlus.turnRight(); myPainterPlus.move(); myPainterPlus.move(); } } . PainterPlus.java . import org.code.neighborhood.*; public class PainterPlus extends Painter { public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } . Defining a class . Syntax: public class classname . // Example from code.org public class MyNeighborhood . Creating an object . Syntax: Class object = new Class(); . // Example from code.org PainterPlus myPainterPlus = new PainterPlus(); // where PainterPlus is the class and myPainterPlus is the object . Object calling a method . This is what runs the code Syntax: object.method(); . // Example from code.org myPainterPlus.turnRight(); . Extends . superclass - class being extended subclass - class that is extending The result is that the super and subclass will have the same attributes . // syntax public class PainterPlus extends Painter { public PainterPlus() { super(); } } // example from code.org public class PainterPlus extends Painter { public PainterPlus() { super(); } public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } } .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/05/code.org-takeaways.html",
            "relUrl": "/jupyter/2022/09/05/code.org-takeaways.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; double m1; double m2; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Vidhi and Riya&#39;s Temp Convertor&quot;); System.out.println(&quot;2 - Lily&#39;s Average Calculator&quot;); System.out.println(&quot;3 - William&#39;s Modulus Calculator&quot;); System.out.println(&quot;4 - William&#39;s F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye! Thanks for checking this out :D&quot;); quit = true; break; case 1: Scanner input3; //we used a wrapper class to introduce our program to the user. String aString = &quot;This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class.&quot;; System.out.println(aString); //we used the string to greet the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your name as a string: &quot;); String name = input3.nextLine(); System.out.println(&quot;Hello &quot; + name ); input3.close(); //the integer is used to get the age of the user input3 = new Scanner(System.in); System.out.println(&quot;Enter your age as an integer: &quot;); String age = input3.nextLine(); System.out.println(&quot;You are &quot; + age + &quot; years old.&quot; ); input3.close(); //boolean is used to get a true or false answer about whether the user is in AP Chemistry input3 = new Scanner(System.in); System.out.println(&quot;Are you in AP Chemistry? Enter your answer as a Boolean: &quot;); String chem = input3.nextLine(); System.out.println(&quot;Your answer: &quot; + chem); input3.close(); //double is used to get a number from the user and convert it using arithmetic expression input3 = new Scanner(System.in); System.out.println(&quot;Enter a degree in Celsius as a double: &quot;); double celsius = input3.nextDouble(); double kelvin = (celsius + 273.0); System.out.println( celsius + &quot; degree Celsius is equal to &quot; + kelvin + &quot; in Kelvin&quot;); input3.close(); break; case 2: double numDouble = 0; double sum = 0; // count = n (sample size to determine mean) // Sample size is always a whole number (ex: 1, 2, etc.) int count = 0; double mean = 0; Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter numbers, type &#39;end&#39; to finish&quot;); while (true) { // String is used as the input for each number // The reason why I didn&#39;t use int was because I wanted the user to // be able to end the calculator by typing &quot;end&quot; System.out.println(&quot;Number: &quot;); String numStr = sc.next(); System.out.println(numStr); if (&quot;end&quot;.equals(numStr)) { break; } // This performs casting by changing the input, which was a string, // into a double so that the mean can by determined numDouble = Double.parseDouble(numStr); sum += numDouble; count++; } mean = sum/count; System.out.println(&quot;Show detailed info? y/n&quot;); String detail = sc.next(); // Setting showDetail as true/false, this can be used in the future // as a toggle. (If showDetail = true, show more detail, otherwise, // only show the result) // Also showDetail can only be yes/no, so it can be set as a boolean System.out.println(detail); boolean showDetail; if (&quot;y&quot;.equals(detail)) { showDetail = true; } else { showDetail = false; } if (showDetail) { System.out.println(&quot;Sum: &quot; + sum); System.out.println(&quot;Count: &quot; + count); } System.out.println(&quot;Mean: &quot; + mean); break; case 3: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulus calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); m1 = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); m2 = mod2; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulus Calculator&quot;); double result = m1%m2; System.out.print(m1 + &quot;mod&quot; + m2 + &#39;=&#39; + result); break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input2; // primitive int input2 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input2.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); // primitive int input2 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input2.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input2.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Vidhi and Riya&#39;s Temp Convertor 2 - Lily&#39;s Average Calculator 3 - Modulus Calculator 4 - F=ma calculator 0 - Quit - 1: This is our program to convert Celcius to Kelvin. We are using it for our AP Chemistry class. Enter your name as a string: Hello william Enter your age as an integer: You are 16 years old. Are you in AP Chemistry? Enter your answer as a Boolean: Your answer: no Enter a degree in Celsius as a double: 25.0 degree Celsius is equal to 298.0 in Kelvin 2: Enter numbers, type &#39;end&#39; to finish Number: 2 Number: 5 Number: 3 Number: end Show detailed info? y/n y Sum: 10.0 Count: 3 Mean: 3.3333333333333335 3: Modulus calculator Enter your first number:5.0 Enter the second number: 2.0 Modulus Calculator 5.0mod2.0=1.0 4: F=ma calculator Enter the mass: 3.0 Enter the accel: 6.0 Force calculator 3.0*6.0=18.0 0: Goodbye! Thanks for checking this out :D .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/09/02/menu.html",
            "relUrl": "/jupyter/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Alumni Panel",
            "content": "Notes . How did you realize you wanted to do major? How did Ap CSA and CSP help? . Compare against your competitors . | What you liked to do when you were young. Early interests . | Internships . | Interested in websites, csp gave technical background . | Able to be used in the real world . | . | What is tge biggest challenge you’ve encountered with computer science? . The bugs and errors in the beginning . | Egos, people brag about their accomplishments. Follow your own path. Work on your own stuff . | Theory. How structures are set up. Transition between high school and college . | Finding the motivation. Use google. Projects can helps to create a goal . | Temptation to cut corners. Do stuff just for points. GO abobve and beyond . | Getting started in a new area of cs. . | . | Are there any PBL scenarios in college computer science classes . Still exists in UCSD . | There are PBLS and Tests . | . | Have you applied CS in your major if you are not majoring in CS . Coding is everywhere . | Automate things . | MATLAB uses for loops, if statemntrs, etc . | Helpful for math classes . | . | For existing cplleghe studentrs have you had a job within your profession . Yes, you need to make a resume. Jobs are a good addition to your resume . | Tridant AI . | Northrop Grumman . Wiring Diagrams . | Visuakizing flight data . | Cybersecurity intern . | Creating website for flight data . | Scripting for staffing contract . | . | TEacher Assistant . | Code Ninjas . | . | Personal projects . Good if you have no work experience . | . | Internships, September and November open . | . Insights . This panel really helped me to see how practical CS is in a variety of majors. Computer Science really can be applied to anything. I really resonated with Allison choosing talking about Cognitive Science. I never knew that you could major psychology with computer science. I will definitely check out the other submajors for computer science and choose one that I enjoy doing. I am leaning towards cybersecurity + comp sci rn. In addition, it was comforting knowing that others also faced many challenges in computer science. I liked how Anthony brought up his challenge of looking through other people’s Linkedins and feeling like he wasn’t good enough. His advice on just focusing on what you are doing is really good and beneficial to me. It was also interesting learning what the interns at Northrop Grumman do. .",
            "url": "https://willcyber.github.io/fastpages/2022/08/29/alumni-panel.html",
            "relUrl": "/2022/08/29/alumni-panel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Primatives",
            "content": "// java style to import library import java.util.Scanner; double mass; double accel; double Force; double ac; double m; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); } } ScanPrimitives.main(null); . F=ma calculator Enter the mass: 2.3 Enter the accel: 2.5 Force calculator 2.3*2.5=5.75 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/26/Primatives.html",
            "relUrl": "/jupyter/2022/08/26/Primatives.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Bash Tool Checkup",
            "content": "Testing Python Installation . python --version python2 --version python3 --version conda --version . Python 3.9.12 Python 2.7.18 Python 3.9.12 conda 4.14.0 . Testing Java Installation . java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) . Testing Jupyter Kernel installations . jupyter kernelspec list . Available kernels: bash /home/wu/.local/share/jupyter/kernels/bash java /home/wu/.local/share/jupyter/kernels/java javascript /home/wu/.local/share/jupyter/kernels/javascript python3 /home/wu/anaconda3/share/jupyter/kernels/python3 . conda list | grep jupyter . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/25/bash.html",
            "relUrl": "/jupyter/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Java Jupyter Tests",
            "content": "System.out.println(&quot;Hello&quot;); System.out.println(&quot;Test&quot;); System.out.println(&quot;Test Again&quot;); . Hello Test Test Again . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); Output Primitive Data The second key to to all programming is Output. All programming has means to format and combine data. In these examples you see descriptions of the mathematical operation combine with the result of the operation. public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); Output Primitive Data The second key to to all programming is Output. All programming has means to format and combine data. In these examples you see descriptions of the mathematical operation combine with the result of the operation. public class PrimitiveDivision { public static void main(String[] args) { int i1 = 7, i2 = 2; System.out.println(&quot;Integer Division&quot;); System.out.println(&quot; tint output with concatenation: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2); System.out.println(String.format(&quot; tint output with format: %d/%d = %d&quot;,i1, i2, i1/i2)); System.out.printf(&quot; tint output with printf: %d/%d = %d n&quot;,i1, i2, i1/i2); double d1 = 7, d2 = 2; System.out.println(&quot;Double Division&quot;); System.out.println(&quot; tdouble output with concatenation: &quot; + d1 + &quot;/&quot; + d2 + &quot; = &quot; + d1/d2); System.out.println(String.format(&quot; tdouble output with format: %.2f/%.2f = %.2f&quot;,d1, d2, d1/d2)); System.out.printf(&quot; tdouble output with printf: %.2f/%.2f = %.2f n&quot;,d1, d2, d1/d2); System.out.println(&quot;Casting and Remainders&quot;); System.out.printf(&quot; tint cast to double on division: %d/%d = %.2f n&quot;,i1, i2, i1/(double)i2); System.out.println(&quot; tint using modulo for remainder: &quot; + i1 + &quot;/&quot; + i2 + &quot; = &quot; + i1/i2 + &quot; remainder &quot; + i1%i2); } } PrimitiveDivision.main(null); . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. // these are objects import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers // java style to import library double mass; double accel; double Force; double ac; double m; double mod1; double mod2; double result; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // final = not going to change, static means element is not changing (not part of the object) public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - F=ma calculator&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: Scanner input; // primitive int input = new Scanner(System.in); System.out.println(&quot;Modulos calculator&quot;); System.out.print(&quot;Enter your first number:&quot;); try { double mod1 = input.nextDouble(); System.out.println(mod1); // m = mod1; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter the second number: &quot;); try { double mod2 = input.nextDouble(); System.out.println(mod2); // ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); System.out.println(&quot;Modulos Calculator&quot;); double result = mod1 % mod2; System.out.print(mod1 + &quot;modulos&quot; + mod2 + &#39;=&#39; + Force); break; case 4: // java style to import library // class must alway have 1st letter as uppercase, CamelCase is Java Class convention Scanner input4; // primitive int input4 = new Scanner(System.in); System.out.println(&quot;F=ma calculator&quot;); System.out.println(&quot;Enter the mass: &quot;); try { double mass = input4.nextDouble(); System.out.println(mass); m = mass; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input4.close(); // primitive int input4 = new Scanner(System.in); System.out.print(&quot;Enter the accel: &quot;); try { double accel = input4.nextDouble(); System.out.println(accel); ac = accel; } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input4.close(); System.out.println(&quot;Force calculator&quot;); double Force = m * ac; System.out.print(m + &quot;*&quot; + ac + &#39;=&#39; + Force); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/21/java.html",
            "relUrl": "/jupyter/2022/08/21/java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Python Jupyter Tests",
            "content": "print(&#39;Hello&#39;) . Hello . age = 24 if age &lt; 21: print(&quot;ur too young for beer kid&quot;) else: print(&quot;you&#39;re old enough&quot;) name = &quot;Sam&quot; if name == &quot;William&quot;: print(&quot;Hi William&quot;) elif name == &quot;Bob&quot;: Print(&quot;Hey Bob&quot;) elif name == &quot;Sam&quot;: print(&quot;Hello Sam&quot;) else: print(&quot;You aren&#39;t allowed here&quot;) . you&#39;re old enough Hello Sam . vehicles = [&quot;car&quot;, &quot;bus&quot;, &quot;truck&quot;, &quot;bike&quot;, &quot;train&quot;] for v in vehicles: print(v) print(len(v)) . car 3 bus 3 truck 5 bike 4 train 5 .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2022/08/20/python.html",
            "relUrl": "/jupyter/2022/08/20/python.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "First Post",
            "content": "Welcome to my first post! . What is this? . This is a website that makes use of a tool called fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Everything is hosted using github pages. . Stuff . Name Github Name Issues Commits Profile . William | willcyber | Issues | Commits | Profile | .",
            "url": "https://willcyber.github.io/fastpages/markdown/2022/08/20/first-post.html",
            "relUrl": "/markdown/2022/08/20/first-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://willcyber.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post54": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://willcyber.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "PBL Notes",
          "content": "Week 0 . “Object Oriented Programming” focuses software design around data, or objects. “object” contains both methods and data “instance of a class” is the process of making an object, unique or instances of variables are created within the object “constructor” special method in class, code that is used to initialize the data within the object “getter” is a method that is used to extract or reference data from within the object. . Week 1 . _notebooks is used for jupyter ntoebooks _posts for mardkdown files _pages creates subpages (stuff on navbar) images stored in the images folder . Week 2 .",
          "url": "https://willcyber.github.io/fastpages/pbl/",
          "relUrl": "/pbl/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "College Board",
          "content": "Unit One: Primitive Types . Goal: To learn the fundamentals of Java and other foundational concepts for coding. AP Exam Weighting 2.5-5% . Unit Two: Using Objects . Goal: Explore reference data in order to represent real-world objects in a digital world and discover methods to initiate more complex operations AP Exam Weighting 5-7.5% . Unit Three: Boolean Expressions and if Statements . Goal: Dive into the building blocks of algorithms and use conditional statements to solve problems and have control over your results AP Exam Weighting 15-17.5% . Unit Four: Iteration . Goal: Learn about iteration which is used for repetition in algorithms AP Exam Weighting 17.5-22.5% . Unit Five: Writing Clauses . Goal: Explore real-world interactions that can be expressed through code by organizing behaviors and attribites into classes – also learn about the legal and ethical implications of programming AP Exam Weighting 5-7.5% . Unit Six: Array . Goal: Learn techniques and standard algorithms to work with collections of data structures AP Exam Weighting 10-15% . Unit Seven: ArrayList . Goal: Delve into data setts, exploring ArrayList objects for larger amounts of data, as well as the privacy concerns for your personal data storage AP Exam Weighting 2.5-7.5% . Unit Eight: 2D Array . Goal: Experiment with data sets represented in a table AP Exam Weighting 7.5-10% . Unit Nine: Inheritance . Goal: Manipulate programming without altering original code by using subclasses to create a hierarchy AP Exam Weighting 5-10% . Unit Ten: Recurision . Goal: Solve larger problems by solving small versions of the same problems using recursive methods AP Exam Weighting 5-7.5% .",
          "url": "https://willcyber.github.io/fastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://willcyber.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}